// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RouteGetEntry route get entry
//
// swagger:model RouteGetEntry
type RouteGetEntry struct {

	// IP address and netmask
	DestinationIPNet string `json:"destinationIPNet,omitempty"`

	// Route flags
	Flags string `json:"flags,omitempty"`

	// IP address for nexthop
	Gateway string `json:"gateway,omitempty"`

	// index of the route
	HardwareMark int64 `json:"hardwareMark,omitempty"`

	// Route protocol
	Protocol string `json:"protocol,omitempty"`

	// statistic
	Statistic *RouteGetEntryStatistic `json:"statistic,omitempty"`

	// sync
	Sync int64 `json:"sync,omitempty"`
}

// Validate validates this route get entry
func (m *RouteGetEntry) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStatistic(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RouteGetEntry) validateStatistic(formats strfmt.Registry) error {
	if swag.IsZero(m.Statistic) { // not required
		return nil
	}

	if m.Statistic != nil {
		if err := m.Statistic.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("statistic")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("statistic")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this route get entry based on the context it is used
func (m *RouteGetEntry) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateStatistic(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RouteGetEntry) contextValidateStatistic(ctx context.Context, formats strfmt.Registry) error {

	if m.Statistic != nil {
		if err := m.Statistic.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("statistic")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("statistic")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RouteGetEntry) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RouteGetEntry) UnmarshalBinary(b []byte) error {
	var res RouteGetEntry
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// RouteGetEntryStatistic route get entry statistic
//
// swagger:model RouteGetEntryStatistic
type RouteGetEntryStatistic struct {

	// Statistic of the ingress port bytes.
	// Required: true
	Bytes *int64 `json:"bytes"`

	// Statistic of the egress port bytes.
	// Required: true
	Packets *int64 `json:"packets"`
}

// Validate validates this route get entry statistic
func (m *RouteGetEntryStatistic) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBytes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePackets(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RouteGetEntryStatistic) validateBytes(formats strfmt.Registry) error {

	if err := validate.Required("statistic"+"."+"bytes", "body", m.Bytes); err != nil {
		return err
	}

	return nil
}

func (m *RouteGetEntryStatistic) validatePackets(formats strfmt.Registry) error {

	if err := validate.Required("statistic"+"."+"packets", "body", m.Packets); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this route get entry statistic based on context it is used
func (m *RouteGetEntryStatistic) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *RouteGetEntryStatistic) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RouteGetEntryStatistic) UnmarshalBinary(b []byte) error {
	var res RouteGetEntryStatistic
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
