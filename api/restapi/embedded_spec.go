// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http",
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Loxilb REST API for Baremetal Scenarios",
    "title": "Loxilb Rest API",
    "version": "0.0.1"
  },
  "host": "0.0.0.0:11111",
  "basePath": "/netlox/v1",
  "paths": {
    "/auth/login": {
      "post": {
        "security": [],
        "description": "Authenticates a user and returns a JWT token if the credentials are valid.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "auth"
        ],
        "summary": "User login",
        "parameters": [
          {
            "description": "User credentials",
            "name": "user",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/LoginResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Invalidates the user's token and logs them out.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "auth"
        ],
        "summary": "User logout",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MessageResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/auth/token/upgrade": {
      "post": {
        "description": "Using manual token, It need to upgrade the token.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "auth"
        ],
        "summary": "Upgrade token",
        "parameters": [
          {
            "description": "license as a token",
            "name": "token",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateLicenseRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UpdateLicenseRequest"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/auth/users": {
      "get": {
        "description": "Retrieves all users from the database and returns them as a JSON response.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "users"
        ],
        "summary": "Fetch all users",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "security": [],
        "description": "Creates a new user in the system",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "users"
        ],
        "summary": "Create a new user",
        "parameters": [
          {
            "description": "User data",
            "name": "user",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/auth/users/{id}": {
      "put": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Updates an existing user with the provided JSON payload",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "users"
        ],
        "summary": "Update user",
        "parameters": [
          {
            "type": "integer",
            "description": "User ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "User data",
            "name": "user",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Deletes a user by its ID",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "users"
        ],
        "summary": "Delete user",
        "parameters": [
          {
            "type": "integer",
            "description": "User ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MessageResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/bfd": {
      "post": {
        "description": "Create vlan interface in the device",
        "summary": "Create vlan interface in the device",
        "parameters": [
          {
            "description": "Attributes for Vlan Interface",
            "name": "attr",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BfdEntry"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Capacity insufficient",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict. BFD session not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/bfd/all": {
      "get": {
        "description": "Get BFD session inforrmation",
        "summary": "Get BFD session inforrmation in the device",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "Attr": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/BfdGetEntry"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/bfd/remoteIP/{remote_ip}": {
      "delete": {
        "description": "Delete a BFD session",
        "summary": "Delete a BFD session",
        "parameters": [
          {
            "type": "string",
            "description": "Remote IP address",
            "name": "remote_ip",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Cluster instance name",
            "name": "instance",
            "in": "query"
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Capacity insufficient",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict. BFD session already exists",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/bgp/global": {
      "post": {
        "description": "Adds a BGP global config",
        "summary": "Adds a BGP global config",
        "parameters": [
          {
            "description": "Attributes of bgp global config",
            "name": "attr",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BGPGlobalConfig"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Capacity insufficient",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/bgp/neigh": {
      "post": {
        "description": "Adds a BGP Neighbor",
        "summary": "Adds a BGP Neighbor",
        "parameters": [
          {
            "description": "Attributes of bgp neighbor",
            "name": "attr",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BGPNeigh"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Capacity insufficient",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/bgp/neigh/all": {
      "get": {
        "description": "Get the all of BGP Neighbor",
        "summary": "Get the all of BGP Neighbor",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "bgpNeiAttr": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/BGPNeighGetEntry"
                  }
                }
              }
            }
          },
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Capacity insufficient",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict. VLAN already exists OR dependency VRF/VNET not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/bgp/neigh/{ip_address}": {
      "delete": {
        "description": "Delete a BGP Neighbor",
        "summary": "Delete a BGP neighbor",
        "parameters": [
          {
            "type": "string",
            "description": "Neighbor IP address",
            "name": "ip_address",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "Remote ASN number",
            "name": "remoteAs",
            "in": "query"
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Capacity insufficient",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict. Neigh already exists",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/bgp/policy/apply": {
      "post": {
        "description": "Apply BGP Policy in neighbor",
        "summary": "Apply BGP Policy in neighbor",
        "parameters": [
          {
            "description": "Attributes of bgp neighbor",
            "name": "attr",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BGPApplyPolicyToNeighborMod"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Capacity insufficient",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "description": "Delete BGP Policy in neighbor. It don't need \"routeAction\" in the attr body",
        "summary": "Delete BGP Policy in neighbor",
        "parameters": [
          {
            "description": "Attributes of bgp neighbor",
            "name": "attr",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BGPApplyPolicyToNeighborMod"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Capacity insufficient",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict. Neigh already exists",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/bgp/policy/definedsets/{defineset_type}": {
      "post": {
        "description": "Adds a BGP definedsets for making Policy",
        "summary": "Adds a BGP  definedsets for making Policy",
        "parameters": [
          {
            "type": "string",
            "description": "defineset type one of prefix/neighbor/community/extcommunity/aspath/largecommunity",
            "name": "defineset_type",
            "in": "path",
            "required": true
          },
          {
            "description": "Attributes of bgp neighbor",
            "name": "attr",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BGPPolicyDefinedSetsMod"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Capacity insufficient",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/bgp/policy/definedsets/{defineset_type}/{type_name}": {
      "get": {
        "description": "Get the all of BGP, prefix/neighbor/community/extcommunity/aspath/largecommunity",
        "summary": "Get the all of BGP definedsets",
        "parameters": [
          {
            "type": "string",
            "description": "defineset type one of prefix/neighbor/community/extcommunity/aspath/largecommunity",
            "name": "defineset_type",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "type name",
            "name": "type_name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "definedsetsAttr": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/BGPPolicyDefinedSetGetEntry"
                  }
                }
              }
            }
          },
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Capacity insufficient",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict. VLAN already exists OR dependency VRF/VNET not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "description": "Delete a BGP definedsets",
        "summary": "Delete a BGP definedsets",
        "parameters": [
          {
            "type": "string",
            "description": "defineset type one of prefix/neighbor/community/extcommunity/aspath/largecommunity",
            "name": "defineset_type",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "type name",
            "name": "type_name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Capacity insufficient",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict. Neigh already exists",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/bgp/policy/definitions": {
      "post": {
        "description": "Adds a BGP Policy",
        "summary": "Adds a BGP Policy",
        "parameters": [
          {
            "description": "Attributes of bgp neighbor",
            "name": "attr",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BGPPolicyDefinitionsMod"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Capacity insufficient",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/bgp/policy/definitions/all": {
      "get": {
        "description": "Get BGP Policy definitions",
        "summary": "Get BGP Policy definitions",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "bgpPolicyAttr": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/BGPPolicyDefinitionsMod"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/bgp/policy/definitions/{policy_name}": {
      "delete": {
        "description": "Delete a BGP Policy",
        "summary": "Delete a BGP policy",
        "parameters": [
          {
            "type": "string",
            "description": "The name of the community",
            "name": "policy_name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Capacity insufficient",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict. Neigh already exists",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/cistate": {
      "post": {
        "description": "Informs Current Cluster Instance state in the device",
        "summary": "Informs Current Cluster Instance state in the device",
        "parameters": [
          {
            "description": "Attributes for CI State",
            "name": "attr",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CIStatusEntry"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Capacity insufficient",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/cistate/all": {
      "get": {
        "description": "Get Cluster Instance State in the device",
        "summary": "Get Cluster Instance State in the device",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "Attr": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/CIStatusGetEntry"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/conntrack/all": {
      "get": {
        "description": "Get all of the conntrack infomation for all of the service.",
        "summary": "Get all of the conntrack entries.",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "ctAttr": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ConntrackEntry"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/cors": {
      "post": {
        "description": "Post full K8s metadata set (Pod, Service, Endpoint, Node, Namespace)",
        "summary": "Post full K8s metadata set (Pod, Service, Endpoint, Node, Namespace)",
        "parameters": [
          {
            "description": "Attributes for Vlan Interface",
            "name": "attr",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CorsEntry"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Capacity insufficient",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict. BFD session not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/cors/all": {
      "get": {
        "produces": [
          "application/json"
        ],
        "summary": "Get all related K8s metadata (Pod, Service, Endpoint, Node, Namespace)",
        "responses": {
          "200": {
            "description": "get cors list",
            "schema": {
              "properties": {
                "corsAttr": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/config/cors/{cors_url}": {
      "delete": {
        "description": "Delete a BFD session",
        "summary": "Delete a BFD session",
        "parameters": [
          {
            "type": "string",
            "description": "cors url ex) http://localhost:3000",
            "name": "cors_url",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Capacity insufficient",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict. BFD session already exists",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/endpoint": {
      "post": {
        "description": "Adds a LB endpoint for monitoring",
        "summary": "Adds a LB endpoint for monitoring",
        "parameters": [
          {
            "description": "Attributes of end point",
            "name": "attr",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EndPoint"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Capacity insufficient",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/endpoint/all": {
      "get": {
        "description": "Get End-Points State in loxilb",
        "summary": "Get End-Points State in loxilb",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "Attr": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/EndPointGetEntry"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/endpoint/epipaddress/{ip_address}": {
      "delete": {
        "description": "Delete an LB end-point from monitoring",
        "summary": "Delete an LB end-point from monitoring",
        "parameters": [
          {
            "type": "string",
            "description": "Attributes of end point",
            "name": "ip_address",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Endpoint Identifier",
            "name": "name",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Probe type",
            "name": "probe_type",
            "in": "query"
          },
          {
            "type": "number",
            "description": "Probe port",
            "name": "probe_port",
            "in": "query"
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Capacity insufficient",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict. VLAN already exists OR dependency VRF/VNET not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/endpointhoststate": {
      "post": {
        "description": "Sets the state of a host which can have multiple endpoints",
        "summary": "Sets the state of a host",
        "parameters": [
          {
            "description": "Attributes of end point",
            "name": "attr",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EndPointHostState"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Capacity insufficient",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/export": {
      "get": {
        "description": "Export cluster, endpoint, firewall, loadbalancer, mirror, and policy configurations as a JSON file.",
        "produces": [
          "application/json"
        ],
        "summary": "Export all configurations",
        "parameters": [
          {
            "type": "string",
            "description": "Comma-separated list of components to export (cluster, endpoint, firewall, loadbalancer, mirror, policy). If not specified, all components are exported.",
            "name": "components",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Configuration JSON file download",
            "schema": {
              "type": "file"
            }
          },
          "400": {
            "description": "Invalid parameters",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/fdb": {
      "post": {
        "description": "Assign FDB in the device",
        "summary": "Assign FDB in the device",
        "parameters": [
          {
            "description": "Attributes for IPv4 address",
            "name": "attr",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FDBEntry"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Capacity insufficient",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict. VLAN already exists OR dependency VRF/VNET not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/fdb/all": {
      "get": {
        "description": "Get FDB in the device(interface).",
        "summary": "Get FDB in the device(interface)",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "fdbAttr": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/FDBEntry"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/fdb/{mac_address}/dev/{if_name}": {
      "delete": {
        "description": "Delete FDB in the device",
        "summary": "Delete FDB in the device",
        "parameters": [
          {
            "type": "string",
            "description": "Attributes IPv4 Address in the device",
            "name": "mac_address",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Attributes of the target device",
            "name": "if_name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Capacity insufficient",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict. VLAN already exists OR dependency VRF/VNET not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/firewall": {
      "post": {
        "description": "Create a new firewall config for security.",
        "summary": "Create a new firewall config",
        "parameters": [
          {
            "description": "Attributes for  firewall sevice",
            "name": "attr",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FirewallEntry"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Capacity insufficient",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict. VLAN already exists OR dependency VRF/VNET not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "description": "Delete of the firewall service.",
        "summary": "Delete of the firewall service",
        "parameters": [
          {
            "type": "string",
            "description": "Source IP address",
            "name": "sourceIP",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Destination IP in CIDR notation",
            "name": "destinationIP",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Minimum source port range",
            "name": "minSourcePort",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Maximum source port range",
            "name": "maxSourcePort",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Minimum destination port range",
            "name": "minDestinationPort",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Maximum destination port range",
            "name": "maxDestinationPort",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "the protocol",
            "name": "protocol",
            "in": "query"
          },
          {
            "type": "string",
            "description": "the incoming port",
            "name": "portName",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "User preference for ordering",
            "name": "preference",
            "in": "query"
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Capacity insufficient",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict. VLAN already exists OR dependency VRF/VNET not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/firewall/all": {
      "get": {
        "description": "Get all of the firewall configuration.",
        "summary": "Get all of the firewall config",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "fwAttr": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/FirewallEntry"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/import": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "summary": "Import configurations",
        "parameters": [
          {
            "type": "file",
            "description": "The configuration file to upload.",
            "name": "configuration",
            "in": "formData"
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          }
        }
      }
    },
    "/config/ipv4address": {
      "post": {
        "description": "Assign IPv4 addresses in the device",
        "summary": "Assign IPv4 addresses in the device",
        "parameters": [
          {
            "description": "Attributes for IPv4 address",
            "name": "attr",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IPv4AddressEntry"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Capacity insufficient",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict. VLAN already exists OR dependency VRF/VNET not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/ipv4address/all": {
      "get": {
        "description": "Get IPv4 addresses in the device(interface)",
        "summary": "Get IPv4 addresses in the device(interface)",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "ipAttr": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/IPv4AddressGetEntry"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/ipv4address/{ip_address}/{mask}/dev/{if_name}": {
      "delete": {
        "description": "Delete IPv4 addresses in the device",
        "summary": "Delete IPv4 addresses in the device",
        "parameters": [
          {
            "type": "string",
            "description": "Attributes IPv4 Address in the device",
            "name": "ip_address",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Attributes IPv4 mask in the device",
            "name": "mask",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Attributes of the target device",
            "name": "if_name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Capacity insufficient",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict. VLAN already exists OR dependency VRF/VNET not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/loadbalancer": {
      "post": {
        "description": "Create a new load balancer service with .",
        "summary": "Create a new Load balancer service",
        "parameters": [
          {
            "description": "Attributes for load balance service",
            "name": "attr",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LoadbalanceEntry"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PostSuccess"
            }
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Capacity insufficient",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict. VLAN already exists OR dependency VRF/VNET not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/loadbalancer/all": {
      "get": {
        "description": "Get all of the load balancer services with conntrack infomation.",
        "summary": "Get all of the load balancer services",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "lbAttr": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/LoadbalanceEntry"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "description": "Delete all load balancer services.",
        "summary": "Delete all Load balancer services",
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Capacity insufficient",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict. VLAN already exists OR dependency VRF/VNET not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/loadbalancer/externalipaddress/{ip_address}/port/{port}/portmax/{portmax}/protocol/{proto}": {
      "delete": {
        "description": "Delete an existing load balancer service with .",
        "summary": "Delete an existing Load balancer service",
        "parameters": [
          {
            "type": "string",
            "description": "Attributes for load balance service",
            "name": "ip_address",
            "in": "path",
            "required": true
          },
          {
            "type": "number",
            "description": "Attributes for load balance service",
            "name": "port",
            "in": "path",
            "required": true
          },
          {
            "type": "number",
            "description": "Attributes for load balance service",
            "name": "portmax",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Attributes for load balance service",
            "name": "proto",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "description": "option for BGP enable",
            "name": "bgp",
            "in": "query"
          },
          {
            "type": "number",
            "description": "block value if any",
            "name": "block",
            "in": "query"
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Capacity insufficient",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict. VLAN already exists OR dependency VRF/VNET not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/loadbalancer/externalipaddress/{ip_address}/port/{port}/protocol/{proto}": {
      "delete": {
        "description": "Delete an existing load balancer service with .",
        "summary": "Delete an existing Load balancer service",
        "parameters": [
          {
            "type": "string",
            "description": "Attributes for load balance service",
            "name": "ip_address",
            "in": "path",
            "required": true
          },
          {
            "type": "number",
            "description": "Attributes for load balance service",
            "name": "port",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Attributes for load balance service",
            "name": "proto",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "description": "option for BGP enable",
            "name": "bgp",
            "in": "query"
          },
          {
            "type": "number",
            "description": "block value if any",
            "name": "block",
            "in": "query"
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Capacity insufficient",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict. VLAN already exists OR dependency VRF/VNET not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/loadbalancer/hosturl/{hosturl}/externalipaddress/{ip_address}/port/{port}/portmax/{portmax}/protocol/{proto}": {
      "delete": {
        "description": "Delete an existing load balancer service with .",
        "summary": "Delete an existing Load balancer service",
        "parameters": [
          {
            "type": "string",
            "description": "Attributes for load balance service",
            "name": "hosturl",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Attributes for load balance service",
            "name": "ip_address",
            "in": "path",
            "required": true
          },
          {
            "type": "number",
            "description": "Attributes for load balance service",
            "name": "port",
            "in": "path",
            "required": true
          },
          {
            "type": "number",
            "description": "Attributes for load balance service",
            "name": "portmax",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Attributes for load balance service",
            "name": "proto",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "description": "option for BGP enable",
            "name": "bgp",
            "in": "query"
          },
          {
            "type": "number",
            "description": "block value if any",
            "name": "block",
            "in": "query"
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Capacity insufficient",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict. VLAN already exists OR dependency VRF/VNET not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/loadbalancer/hosturl/{hosturl}/externalipaddress/{ip_address}/port/{port}/protocol/{proto}": {
      "delete": {
        "description": "Delete an existing load balancer service with .",
        "summary": "Delete an existing Load balancer service",
        "parameters": [
          {
            "type": "string",
            "description": "Attributes for load balance service",
            "name": "hosturl",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Attributes for load balance service",
            "name": "ip_address",
            "in": "path",
            "required": true
          },
          {
            "type": "number",
            "description": "Attributes for load balance service",
            "name": "port",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Attributes for load balance service",
            "name": "proto",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "description": "option for BGP enable",
            "name": "bgp",
            "in": "query"
          },
          {
            "type": "number",
            "description": "block value if any",
            "name": "block",
            "in": "query"
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Capacity insufficient",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict. VLAN already exists OR dependency VRF/VNET not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/loadbalancer/name/{lb_name}": {
      "delete": {
        "description": "Delete an existing load balancer service with name.",
        "summary": "Delete an existing Load balancer service",
        "parameters": [
          {
            "type": "string",
            "description": "Attributes for load balance service name",
            "name": "lb_name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Capacity insufficient",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict. VLAN already exists OR dependency VRF/VNET not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/metrics": {
      "get": {
        "summary": "Get prometheus config value",
        "responses": {
          "200": {
            "description": "prometheus config value",
            "schema": {
              "$ref": "#/definitions/MetricsConfig"
            }
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "summary": "turn on prometheus option",
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "turn off prometheus option",
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/mirror": {
      "post": {
        "description": "Create a new Mirror config.",
        "summary": "Create a new Mirror config",
        "parameters": [
          {
            "description": "Attributes for Mirror",
            "name": "attr",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MirrorEntry"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Capacity insufficient",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict. VLAN already exists OR dependency VRF/VNET not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/mirror/all": {
      "get": {
        "description": "Get",
        "summary": "Get",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "mirrAttr": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/MirrorGetEntry"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/mirror/ident/{ident}": {
      "delete": {
        "description": "Delete a new Create a Mirror service.",
        "summary": "Delete a Mirror service",
        "parameters": [
          {
            "type": "string",
            "description": "Attributes of Mirror Ident.",
            "name": "ident",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Capacity insufficient",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict. VLAN already exists OR dependency VRF/VNET not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/neighbor": {
      "post": {
        "description": "Assign IPv4 neighbor in the device",
        "summary": "Assign IPv4 neighbor in the device",
        "parameters": [
          {
            "description": "Attributes for IPv4 address",
            "name": "attr",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NeighborEntry"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Capacity insufficient",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict. VLAN already exists OR dependency VRF/VNET not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/neighbor/all": {
      "get": {
        "description": "Get IPv4 neighbor in the device(interface)",
        "summary": "Get IPv4 neighbor in the device(interface)",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "neighborAttr": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/NeighborEntry"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/neighbor/{ip_address}/dev/{if_name}": {
      "delete": {
        "description": "Delete IPv4 neighbor in the device",
        "summary": "Delete IPv4 neighbor in the device",
        "parameters": [
          {
            "type": "string",
            "description": "Attributes IPv4 Address in the device",
            "name": "ip_address",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Attributes of the target device",
            "name": "if_name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Capacity insufficient",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict. VLAN already exists OR dependency VRF/VNET not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/params": {
      "get": {
        "description": "Get Operational params of LoxiLB",
        "summary": "Get Operational params of LoxiLB",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/OperParams"
            }
          },
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Capacity insufficient",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict. VLAN already exists OR dependency VRF/VNET not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "description": "Set Operational parameters of LoxiLB",
        "summary": "Set Operational parameters of LoxiLB",
        "parameters": [
          {
            "description": "Attributes for setting state",
            "name": "attr",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperParams"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Capacity insufficient",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict. VLAN already exists OR dependency VRF/VNET not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/policy": {
      "post": {
        "description": "Create a new Policy QoS config.",
        "summary": "Create a new Policy QoS config",
        "parameters": [
          {
            "description": "Attributes for Policy",
            "name": "attr",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PolicyEntry"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Capacity insufficient",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict. VLAN already exists OR dependency VRF/VNET not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/policy/all": {
      "get": {
        "description": "Get",
        "summary": "Get",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "polAttr": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/PolicyEntry"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/policy/ident/{ident}": {
      "delete": {
        "description": "Delete a new Create a Policy QoS service.",
        "summary": "Delete a Policy QoS service",
        "parameters": [
          {
            "type": "string",
            "description": "Attributes of Policy Ident.",
            "name": "ident",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Capacity insufficient",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict. VLAN already exists OR dependency VRF/VNET not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/port/all": {
      "get": {
        "description": "Get all of the port interfaces.",
        "summary": "Get all of the port interfaces",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "portAttr": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/PortEntry"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/route": {
      "post": {
        "description": "Create a new route config .",
        "summary": "Create a new route config",
        "parameters": [
          {
            "description": "Attributes for load balance service",
            "name": "attr",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RouteEntry"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Capacity insufficient",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict. VLAN already exists OR dependency VRF/VNET not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/route/all": {
      "get": {
        "description": "Get all route table",
        "summary": "Get all route table",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "routeAttr": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/RouteGetEntry"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Capacity insufficient",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict. VLAN already exists OR dependency VRF/VNET not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/route/destinationIPNet/{ip_address}/{mask}": {
      "delete": {
        "description": "Create a new load balancer service with .",
        "summary": "Create a new Load balancer service",
        "parameters": [
          {
            "type": "string",
            "description": "Attributes for destinaion route address",
            "name": "ip_address",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Attributes for destination route",
            "name": "mask",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Capacity insufficient",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict. VLAN already exists OR dependency VRF/VNET not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/session": {
      "post": {
        "description": "Create a new session config for 5G.",
        "summary": "Create a new session config",
        "parameters": [
          {
            "description": "Attributes for 5G service session",
            "name": "attr",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SessionEntry"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Capacity insufficient",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict. VLAN already exists OR dependency VRF/VNET not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/session/all": {
      "get": {
        "description": "Get all of the port interfaces.",
        "summary": "Get all of the port interfaces",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "sessionAttr": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/SessionEntry"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/session/ident/{ident}": {
      "delete": {
        "description": "Create a new load balancer service with .",
        "summary": "Create a new Load balancer service",
        "parameters": [
          {
            "type": "string",
            "description": "Attributes 5G session Ident.",
            "name": "ident",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Capacity insufficient",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict. VLAN already exists OR dependency VRF/VNET not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/sessionulcl": {
      "post": {
        "description": "Create a new session config for 5G.",
        "summary": "Create a new session config",
        "parameters": [
          {
            "description": "Attributes for 5G service session",
            "name": "attr",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SessionUlClEntry"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Capacity insufficient",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict. VLAN already exists OR dependency VRF/VNET not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/sessionulcl/all": {
      "get": {
        "description": "Get",
        "summary": "Get",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "ulclAttr": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/SessionUlClEntry"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/sessionulcl/ident/{ident}/ulclAddress/{ip_address}": {
      "delete": {
        "description": "Create a new load balancer service with .",
        "summary": "Create a new Load balancer service",
        "parameters": [
          {
            "type": "string",
            "description": "Attributes 5G session Ident.",
            "name": "ident",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Attributes for session ulcl address",
            "name": "ip_address",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Capacity insufficient",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict. VLAN already exists OR dependency VRF/VNET not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/tunnel/vxlan": {
      "post": {
        "description": "Return a list of existing tunnels of a type. If there're no tunnels to return, empty list will be returned.",
        "summary": "Add a one of vxlan configuration",
        "parameters": [
          {
            "description": "attributes for vxlan member interface",
            "name": "attr",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VxlanBridgeEntry"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict. VxLAN already exists OR dependency VRF/VNET not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/tunnel/vxlan/all": {
      "get": {
        "description": "Return a list of existing tunnels of a type. If there're no tunnels to return, empty list will be returned.",
        "summary": "Get a list of vxlan configurations",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "vxlanAttr": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/VxlanEntry"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/tunnel/vxlan/{vxlanID}": {
      "delete": {
        "description": "Return a list of existing tunnels of a type. If there're no tunnels to return, empty list will be returned.",
        "summary": "Delete a one of vxlan configuration",
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "vxlan id (24-bit). Allows to remove routes with defined vnid only. Applicable for routes with nexthop_type 'vxlan-tunnel'. Otherwise '400' error will be returned",
            "name": "vxlanID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/tunnel/vxlan/{vxlanID}/peer": {
      "post": {
        "description": "Return a list of existing tunnels of a type. If there're no tunnels to return, empty list will be returned.",
        "summary": "Add a one of vxlan remote(peer) ip address configuration",
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "vxlan id (24-bit). Allows to remove routes with defined vnid only. Applicable for routes with nexthop_type 'vxlan-tunnel'. Otherwise '400' error will be returned",
            "name": "vxlanID",
            "in": "path",
            "required": true
          },
          {
            "description": "attributes for vxlan Peer interface",
            "name": "attr",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VxlanPeerEntry"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/VxlanPeerEntry"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/tunnel/vxlan/{vxlanID}/peer/{PeerIP}": {
      "delete": {
        "description": "Return a list of existing tunnels of a type. If there're no tunnels to return, empty list will be returned.",
        "summary": "Remove a one of vxlan remote(peer) ip address configuration",
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "vxlan id (24-bit). Allows to remove routes with defined vnid only. Applicable for routes with nexthop_type 'vxlan-tunnel'. Otherwise '400' error will be returned",
            "name": "vxlanID",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "attributes for vxlan Peer IP address",
            "name": "PeerIP",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/VxlanEntry"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/vlan": {
      "post": {
        "description": "Create vlan interface in the device",
        "summary": "Create vlan interface in the device",
        "parameters": [
          {
            "description": "Attributes for Vlan Interface",
            "name": "attr",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VlanBridgeEntry"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Capacity insufficient",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict. VLAN already exists OR dependency VRF/VNET not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/vlan/all": {
      "get": {
        "description": "Get vlan in the device",
        "summary": "Get vlan in the device",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "vlanAttr": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/VlanGetEntry"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/vlan/{vlan_id}": {
      "delete": {
        "description": "Delete vlan in the device",
        "summary": "Delete vlan in the device",
        "parameters": [
          {
            "type": "integer",
            "description": "Attributes IPv4 Address in the device",
            "name": "vlan_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Capacity insufficient",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict. VLAN already exists OR dependency VRF/VNET not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/vlan/{vlan_id}/member": {
      "post": {
        "description": "Add a member to interface Vlan{vlan_id}. If the vlan interface does not exist on LoxiLB it returns a '404' error. If such a member is already present on this Vlan interface the API returns '409' sub-code 0. If the vlan_id passed is less than 2 or greater than 4094 the API will respond with error '400'. If attr with tagging mode is provided it will be honored in config, if not, the default tagging mode will be set to 'untagged'. Vlan members may be tagged or untagged, but, the Vlan member port may be untagged in only one Vlan interface, deviations from this will cause the API to return '409' sub-code 0.",
        "summary": "Add a physical port to a vlan interface",
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "12 bit vlan_id",
            "name": "vlan_id",
            "in": "path",
            "required": true
          },
          {
            "description": "Attributes for Vlan Interface",
            "name": "attr",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VlanMemberEntry"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Capacity insufficient",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Vlan interface is not defined",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict. VLAN member already exists on this VLAN interface OR Vlan member is being added to 2nd Vlan inteface as an untagged member.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/vlan/{vlan_id}/member/{if_name}/tagged/{tagged}": {
      "delete": {
        "description": "Remove a vlan member from a vlan interface which is defined by vlan_id. If the Vlan interface does not exist on LoxiLB OR a vlan member 'if_name' is not present on the interface the API will return '404'. If the vlan_id passed is less than 2 or greater than 4094 the API will respond with error '400'.",
        "summary": "Remove a vlan member from a vlan interface",
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "12 bit vlan_id",
            "name": "vlan_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Physical port name",
            "name": "if_name",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "description": "Tagged status",
            "name": "tagged",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Vlan interface is not defined/Vlan member is not found on this Vlan interface",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/log-archives": {
      "get": {
        "description": "Retrieve a list of all rotated log archive files available for download.",
        "summary": "List available log archives",
        "responses": {
          "200": {
            "description": "List of log archive files",
            "schema": {
              "$ref": "#/definitions/LogArchives"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/log-archives/{filename}": {
      "get": {
        "description": "Download a log archive file by its name.",
        "summary": "Download a specific log archive",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the log archive file to download.",
            "name": "filename",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Log archive file download",
            "schema": {
              "type": "file"
            }
          },
          "400": {
            "description": "Missing or invalid filename",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "File not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/logs": {
      "get": {
        "description": "Fetch the latest logs from the system with optional filtering by number of lines, log level, or keyword.",
        "summary": "Fetch logs with optional filtering",
        "parameters": [
          {
            "type": "string",
            "description": "Number of log lines to fetch (default is 100).",
            "name": "lines",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filter logs by level (e.g., INFO, ERROR, DEBUG).",
            "name": "level",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filter logs containing a specific keyword or phrase.",
            "name": "keyword",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Logs fetched successfully",
            "schema": {
              "$ref": "#/definitions/Logs"
            }
          },
          "400": {
            "description": "Invalid query parameters",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/meta": {
      "get": {
        "security": [],
        "description": "Returns metadata about required fields for each POST API.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Metadata"
        ],
        "summary": "Get metadata for all POST APIs",
        "operationId": "getMeta",
        "responses": {
          "200": {
            "description": "Successfully retrieved metadata",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/metrics": {
      "get": {
        "summary": "Scrape metrics from the cache",
        "responses": {
          "200": {
            "description": "Metrics in prometheus text format",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/metrics/epdisttraffic": {
      "get": {
        "description": "Get metrics related to endpoint distribution traffic per service. The additionalProp is service name.",
        "summary": "Get endpoint distribution traffic metrics",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/EpDistTrafficMetrics"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/metrics/errorcount": {
      "get": {
        "description": "Get metrics related to error counts.",
        "summary": "Get error count metrics",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ErrorCountMetrics"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/metrics/flowcount": {
      "get": {
        "description": "Get metrics related to flow counts.",
        "summary": "Get flow count metrics",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FlowCountMetrics"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/metrics/fwdrops": {
      "get": {
        "description": "Get metrics related to firewall drops.",
        "summary": "Get firewall drops metrics",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FwDropsMetrics"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/metrics/hostcount": {
      "get": {
        "description": "Get metrics related to host counts.",
        "summary": "Get host count metrics",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/HostCountMetrics"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/metrics/lbprocessedtraffic": {
      "get": {
        "description": "Get metrics related to load balancer processed traffic.",
        "summary": "Get load balancer processed traffic metrics",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/LbProcessedTrafficMetrics"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/metrics/lbrulecount": {
      "get": {
        "description": "Get metrics related to load balancer rule counts.",
        "summary": "Get load balancer rule count metrics",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/LbRuleCountMetrics"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/metrics/newflowcount": {
      "get": {
        "description": "Get metrics related to new flow counts.",
        "summary": "Get new flow count metrics",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/NewFlowCountMetrics"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/metrics/processedtraffic": {
      "get": {
        "description": "Get metrics related to processed traffic.",
        "summary": "Get processed traffic metrics",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ProcessedTrafficMetrics"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/metrics/reqcountperclient": {
      "get": {
        "description": "Get metrics related to request counts per client. The additionalProp is client IP address.",
        "summary": "Get request count per client metrics",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ReqCountPerClientMetrics"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/metrics/requestcount": {
      "get": {
        "description": "Get metrics related to request counts.",
        "summary": "Get request count metrics",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RequestCountMetrics"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/metrics/servicedisttraffic": {
      "get": {
        "description": "Get metrics related to service distribution traffic. The additionalProp is service name.",
        "summary": "Get service distribution traffic metrics",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ServiceDistTrafficMetrics"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/nodegraph/all": {
      "get": {
        "description": "Retrieve a list of all nodes and edges in the current topology.",
        "summary": "List current topology",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/NodeGraphShcmea"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/nodegraph/{service}": {
      "get": {
        "description": "Retrieve a list of all nodes and edges in the current topology for a specific service.",
        "summary": "List current topology for a specific service",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the service to filter the topology by.",
            "name": "service",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/NodeGraphShcmea"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/oauth/{provider}": {
      "get": {
        "security": [],
        "description": "Initiates the OAuth login flow for the specified provider.",
        "tags": [
          "auth"
        ],
        "summary": "OAuth login",
        "parameters": [
          {
            "type": "string",
            "description": "OAuth provider",
            "name": "provider",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "302": {
            "description": "Found",
            "schema": {
              "$ref": "#/definitions/OauthMessageResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/OauthErrorResponse"
            }
          }
        }
      }
    },
    "/oauth/{provider}/callback": {
      "get": {
        "security": [],
        "description": "Handles the OAuth callback flow for the specified provider.",
        "tags": [
          "auth"
        ],
        "summary": "OAuth callback",
        "parameters": [
          {
            "type": "string",
            "description": "OAuth provider",
            "name": "provider",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "OAuth code",
            "name": "code",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "OAuth state",
            "name": "state",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/OauthLoginResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/OauthErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/OauthErrorResponse"
            }
          }
        }
      }
    },
    "/oauth/{provider}/token": {
      "get": {
        "security": [],
        "description": "Handles the OAuth token refresh workflow for the specified provider.",
        "tags": [
          "auth"
        ],
        "summary": "OAuth callback",
        "parameters": [
          {
            "type": "string",
            "description": "OAuth provider",
            "name": "provider",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "OAuth access token",
            "name": "token",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "OAuth refresh token",
            "name": "refreshtoken",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/OauthTokenResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/OauthErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/OauthErrorResponse"
            }
          }
        }
      }
    },
    "/status/device": {
      "get": {
        "description": "Get a basic info (linux command \"uptime, hostnamectl\") in the device or system.",
        "summary": "Get a basic info in the device",
        "responses": {
          "200": {
            "description": "Device unique informations",
            "schema": {
              "$ref": "#/definitions/DeviceInfoEntry"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/status/filesystem": {
      "get": {
        "description": "Get a File system infomation (linux command \"df\") in the device or system.",
        "summary": "Get a File System info in the device",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "filesystemAttr": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/FileSystemInfoEntry"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/status/process": {
      "get": {
        "description": "Get a process based on high usage CPU(linux command \"top\") in the device or system.",
        "summary": "Get a process based on CPU usage info in the device",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "processAttr": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ProcessInfoEntry"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/version": {
      "get": {
        "security": [],
        "description": "Get version information",
        "summary": "Get version information in the device",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/VersionGetEntry"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "BGPApplyPolicyToNeighborMod": {
      "type": "object",
      "required": [
        "ipAddress",
        "policyType",
        "routeAction"
      ],
      "properties": {
        "ipAddress": {
          "description": "BGP Neighbor IP address",
          "type": "string"
        },
        "policies": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "policyType": {
          "type": "string",
          "enum": [
            "import",
            "export"
          ]
        },
        "routeAction": {
          "type": "string",
          "enum": [
            "accept",
            "reject"
          ]
        }
      }
    },
    "BGPGlobalConfig": {
      "type": "object",
      "required": [
        "routerId",
        "localAs"
      ],
      "properties": {
        "SetNextHopSelf": {
          "description": "Adds policy to set next hop as self, if enabled",
          "type": "boolean"
        },
        "listenPort": {
          "description": "Listen port (default 179)",
          "type": "integer"
        },
        "localAs": {
          "description": "Local AS number",
          "type": "integer"
        },
        "routerId": {
          "description": "BGP Router ID",
          "type": "string"
        }
      }
    },
    "BGPNeigh": {
      "type": "object",
      "required": [
        "ipAddress",
        "remoteAs"
      ],
      "properties": {
        "ipAddress": {
          "description": "BGP Neighbor IP address",
          "type": "string"
        },
        "remoteAs": {
          "description": "Remote AS number",
          "type": "integer"
        },
        "remotePort": {
          "description": "Remote Connect Port (default 179)",
          "type": "integer"
        },
        "setMultiHop": {
          "description": "Enable multi-hop peering (if needed)",
          "type": "boolean"
        }
      }
    },
    "BGPNeighGetEntry": {
      "type": "object",
      "properties": {
        "ipAddress": {
          "description": "BGP Neighbor IP address",
          "type": "string"
        },
        "remoteAs": {
          "description": "Remote AS number",
          "type": "integer"
        },
        "state": {
          "description": "Current state",
          "type": "string"
        },
        "updowntime": {
          "description": "Current uptime",
          "type": "string"
        }
      }
    },
    "BGPPolicyDefinedSetGetEntry": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "list": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "name": {
          "description": "BGP Defined set Entries",
          "type": "string"
        },
        "prefixList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BGPPolicyPrefix"
          }
        }
      }
    },
    "BGPPolicyDefinedSetsMod": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "List": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "name": {
          "description": "BGP Neighbor IP address",
          "type": "string"
        },
        "prefixList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BGPPolicyPrefix"
          }
        }
      }
    },
    "BGPPolicyDefinitionsMod": {
      "type": "object",
      "properties": {
        "name": {
          "description": "BGP Neighbor IP address",
          "type": "string"
        },
        "statements": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BGPPolicyDefinitionsStatement"
          }
        }
      }
    },
    "BGPPolicyDefinitionsStatement": {
      "type": "object",
      "properties": {
        "actions": {
          "type": "object",
          "properties": {
            "bgpActions": {
              "type": "object",
              "properties": {
                "setAsPathPrepend": {
                  "type": "object",
                  "properties": {
                    "as": {
                      "type": "string"
                    },
                    "repeatN": {
                      "type": "integer"
                    }
                  }
                },
                "setCommunity": {
                  "type": "object",
                  "properties": {
                    "options": {
                      "type": "string"
                    },
                    "setCommunityMethod": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                },
                "setExtCommunity": {
                  "type": "object",
                  "properties": {
                    "options": {
                      "type": "string"
                    },
                    "setCommunityMethod": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                },
                "setLargeCommunity": {
                  "type": "object",
                  "properties": {
                    "options": {
                      "type": "string"
                    },
                    "setCommunityMethod": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                },
                "setLocalPerf": {
                  "type": "integer"
                },
                "setMed": {
                  "type": "string"
                },
                "setNextHop": {
                  "type": "string"
                }
              }
            },
            "routeDisposition": {
              "type": "string"
            }
          }
        },
        "conditions": {
          "type": "object",
          "properties": {
            "bgpConditions": {
              "type": "object",
              "properties": {
                "afiSafiIn": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "asPathLength": {
                  "type": "object",
                  "properties": {
                    "operator": {
                      "type": "string"
                    },
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                "matchAsPathSet": {
                  "type": "object",
                  "properties": {
                    "asPathSet": {
                      "type": "string"
                    },
                    "matchSetOptions": {
                      "type": "string"
                    }
                  }
                },
                "matchCommunitySet": {
                  "type": "object",
                  "properties": {
                    "communitySet": {
                      "type": "string"
                    },
                    "matchSetOptions": {
                      "type": "string"
                    }
                  }
                },
                "matchExtCommunitySet": {
                  "type": "object",
                  "properties": {
                    "communitySet": {
                      "type": "string"
                    },
                    "matchSetOptions": {
                      "type": "string"
                    }
                  }
                },
                "matchLargeCommunitySet": {
                  "type": "object",
                  "properties": {
                    "communitySet": {
                      "type": "string"
                    },
                    "matchSetOptions": {
                      "type": "string"
                    }
                  }
                },
                "nextHopInList": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "routeType": {
                  "type": "string"
                },
                "rpki": {
                  "type": "string"
                }
              }
            },
            "matchNeighborSet": {
              "type": "object",
              "properties": {
                "matchSetOption": {
                  "type": "string"
                },
                "neighborSet": {
                  "type": "string"
                }
              }
            },
            "matchPrefixSet": {
              "type": "object",
              "properties": {
                "matchSetOption": {
                  "type": "string"
                },
                "prefixSet": {
                  "type": "string"
                }
              }
            }
          }
        },
        "name": {
          "type": "string"
        }
      }
    },
    "BGPPolicyPrefix": {
      "type": "object",
      "properties": {
        "ipPrefix": {
          "description": "BGP Neighbor IP address",
          "type": "string"
        },
        "masklengthRange": {
          "description": "Remote AS number",
          "type": "string"
        }
      }
    },
    "BfdEntry": {
      "type": "object",
      "properties": {
        "instance": {
          "description": "Instance name running BFD session",
          "type": "string"
        },
        "interval": {
          "description": "Tx interval between BFD packets(in microseconds)",
          "type": "integer",
          "format": "uint64"
        },
        "remoteIp": {
          "description": "Remote IP",
          "type": "string"
        },
        "retryCount": {
          "description": "Retry Count to detect failure",
          "type": "integer",
          "format": "uint8"
        },
        "sourceIp": {
          "description": "Remote IP",
          "type": "string"
        }
      }
    },
    "BfdGetEntry": {
      "type": "object",
      "properties": {
        "instance": {
          "description": "Instance name",
          "type": "string"
        },
        "interval": {
          "description": "Tx interval between BFD packets(in microseconds)",
          "type": "integer",
          "format": "uint64"
        },
        "port": {
          "description": "port number to be used for BFD session",
          "type": "integer",
          "format": "uint16"
        },
        "remoteIp": {
          "description": "Remote IP",
          "type": "string"
        },
        "retryCount": {
          "description": "Retry Count to detect failure",
          "type": "integer",
          "format": "uint8"
        },
        "sourceIP": {
          "description": "Source IP to be used for BFD session",
          "type": "string"
        },
        "state": {
          "description": "Current state for BFD session",
          "type": "string"
        }
      }
    },
    "CIStatusEntry": {
      "type": "object",
      "properties": {
        "instance": {
          "description": "Instance name",
          "type": "string"
        },
        "state": {
          "description": "Current Cluster Instance State",
          "type": "string"
        },
        "vip": {
          "description": "Instance Virtual IP address",
          "type": "string"
        }
      }
    },
    "CIStatusGetEntry": {
      "type": "object",
      "required": [
        "sync"
      ],
      "properties": {
        "instance": {
          "description": "Instance name",
          "type": "string"
        },
        "state": {
          "description": "Current Cluster Instance State",
          "type": "string"
        },
        "sync": {
          "description": "Sync - sync state",
          "type": "integer"
        },
        "vip": {
          "description": "Instance Virtual IP address",
          "type": "string"
        }
      }
    },
    "ConntrackEntry": {
      "type": "object",
      "properties": {
        "bytes": {
          "description": "Packet bytes of the conntrack",
          "type": "integer"
        },
        "conntrackAct": {
          "description": "value for Conntrack Act",
          "type": "string"
        },
        "conntrackState": {
          "description": "value for Conntrack state",
          "type": "string"
        },
        "destinationIP": {
          "description": "IP address for externel access",
          "type": "string"
        },
        "destinationPort": {
          "description": "port number for the access",
          "type": "integer"
        },
        "ident": {
          "description": "value for Conntrack ident",
          "type": "string"
        },
        "packets": {
          "description": "Packet counts of the conntrack",
          "type": "integer"
        },
        "protocol": {
          "description": "value for access protocol",
          "type": "string"
        },
        "servName": {
          "description": "Connection's Service Name",
          "type": "string"
        },
        "sourceIP": {
          "description": "IP address for externel access",
          "type": "string"
        },
        "sourcePort": {
          "description": "port number for the access",
          "type": "integer"
        }
      }
    },
    "CorsEntry": {
      "type": "object",
      "properties": {
        "cors": {
          "description": "Interface device name",
          "type": "array",
          "items": {
            "description": "cors list",
            "type": "string"
          }
        }
      }
    },
    "DeviceInfoEntry": {
      "type": "object",
      "properties": {
        "OS": {
          "description": "Operation System of the device",
          "type": "string"
        },
        "architecture": {
          "description": "CPU architecture of the device",
          "type": "string"
        },
        "bootID": {
          "description": "Boot ID in the linux",
          "type": "string"
        },
        "hostName": {
          "description": "Device host name",
          "type": "string"
        },
        "kernel": {
          "description": "Kernel version of the device",
          "type": "string"
        },
        "machineID": {
          "description": "Device machine ID",
          "type": "string"
        },
        "uptime": {
          "description": "system uptime",
          "type": "string"
        }
      }
    },
    "Edge": {
      "type": "object",
      "properties": {
        "color": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "mainstat": {
          "type": "number"
        },
        "secondarystat": {
          "type": "number"
        },
        "source": {
          "type": "string"
        },
        "target": {
          "type": "string"
        },
        "thickness": {
          "type": "integer"
        }
      }
    },
    "EndPoint": {
      "type": "object",
      "required": [
        "hostName"
      ],
      "properties": {
        "hostName": {
          "description": "Host name in CIDR",
          "type": "string"
        },
        "inactiveReTries": {
          "description": "Number of inactive retries",
          "type": "integer"
        },
        "name": {
          "description": "Endpoint Identifier",
          "type": "string"
        },
        "probeDuration": {
          "description": "How frequently to probe in seconds",
          "type": "integer"
        },
        "probePort": {
          "description": "The l4port to probe on",
          "type": "integer"
        },
        "probeReq": {
          "description": "URI for http/https probes",
          "type": "string"
        },
        "probeResp": {
          "description": "Response for http/https probes",
          "type": "string"
        },
        "probeType": {
          "description": "Type of probe used",
          "type": "string",
          "enum": [
            "tcp",
            "udp",
            "sctp",
            "ping",
            "http",
            "https",
            "none"
          ]
        }
      }
    },
    "EndPointGetEntry": {
      "type": "object",
      "properties": {
        "avgDelay": {
          "description": "Average delay seen for endpoint",
          "type": "string"
        },
        "currState": {
          "description": "Current state of this endpoint",
          "type": "string"
        },
        "hostName": {
          "description": "Host name",
          "type": "string"
        },
        "inactiveReTries": {
          "description": "Number of inactive retries",
          "type": "integer"
        },
        "maxDelay": {
          "description": "Maximum delay seen for endpoint",
          "type": "string"
        },
        "minDelay": {
          "description": "Minimum delay seen for endpoint",
          "type": "string"
        },
        "name": {
          "description": "Endpoint Identifier",
          "type": "string"
        },
        "probeDuration": {
          "description": "How frequently to probe in seconds",
          "type": "integer"
        },
        "probePort": {
          "description": "The l4port to probe on",
          "type": "integer"
        },
        "probeReq": {
          "description": "URI for http/https probes",
          "type": "string"
        },
        "probeResp": {
          "description": "Response for http/https probes",
          "type": "string"
        },
        "probeType": {
          "description": "Type of probe used",
          "type": "string"
        }
      }
    },
    "EndPointHostState": {
      "type": "object",
      "properties": {
        "epPort": {
          "description": "The end-point port (0 if not applicable)",
          "type": "integer"
        },
        "epProto": {
          "description": "The end-point prototype (tcp,udp,sctp,icmp,http(s), empty if not applicable)",
          "type": "string"
        },
        "hostName": {
          "description": "Host name in CIDR",
          "type": "string"
        },
        "state": {
          "description": "Host state string (\"green\", \"yellow\", \"red\" )",
          "type": "string"
        }
      }
    },
    "EpDistTrafficMetrics": {
      "type": "object",
      "additionalProperties": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "dip": {
              "type": "string"
            },
            "ratio": {
              "type": "number"
            },
            "value": {
              "type": "number"
            }
          }
        }
      }
    },
    "Error": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "details": {
          "type": "string"
        },
        "fields": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "message": {
          "type": "string"
        },
        "result": {
          "type": "string"
        },
        "sub-code": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ErrorCountMetrics": {
      "type": "object",
      "properties": {
        "total_errors": {
          "type": "number"
        },
        "total_errors_per_service": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "value": {
                "type": "number"
              }
            }
          }
        }
      }
    },
    "FDBEntry": {
      "type": "object",
      "required": [
        "dev",
        "macAddress"
      ],
      "properties": {
        "dev": {
          "description": "Name of the interface device to which you want to modify FDB",
          "type": "string"
        },
        "macAddress": {
          "description": "MAC address to FDB",
          "type": "string"
        }
      }
    },
    "FileSystemInfoEntry": {
      "type": "object",
      "properties": {
        "avail": {
          "description": "size of remain the disk",
          "type": "string"
        },
        "fileSystem": {
          "description": "File system name mounted on this device",
          "type": "string"
        },
        "mountedOn": {
          "description": "path of the mounted on",
          "type": "string"
        },
        "size": {
          "description": "Boot ID in the linux",
          "type": "string"
        },
        "type": {
          "description": "File type (ex. nfs, ext4..)",
          "type": "string"
        },
        "usePercent": {
          "description": "usage per total size",
          "type": "string"
        },
        "used": {
          "description": "size of used the disk",
          "type": "string"
        }
      }
    },
    "FirewallEntry": {
      "type": "object",
      "required": [
        "ruleArguments",
        "opts"
      ],
      "properties": {
        "opts": {
          "$ref": "#/definitions/FirewallOptionEntry"
        },
        "ruleArguments": {
          "$ref": "#/definitions/FirewallRuleEntry"
        }
      }
    },
    "FirewallOptionEntry": {
      "type": "object",
      "properties": {
        "allow": {
          "description": "Allow any matching rule",
          "type": "boolean"
        },
        "counter": {
          "description": "traffic counters",
          "type": "string"
        },
        "doSnat": {
          "description": "Do SNAT on matching rule",
          "type": "boolean"
        },
        "drop": {
          "description": "Drop any matching rule",
          "type": "boolean"
        },
        "fwMark": {
          "description": "Set a fwmark for any matching rule",
          "type": "integer"
        },
        "onDefault": {
          "description": "Trigger only on default cases",
          "type": "boolean"
        },
        "record": {
          "description": "Record or dump for matching rule",
          "type": "boolean"
        },
        "redirect": {
          "description": "Redirect any matching rule",
          "type": "boolean"
        },
        "redirectPortName": {
          "description": "Redirect any matching rule",
          "type": "string"
        },
        "toIP": {
          "description": "Modify to given IP in CIDR notation",
          "type": "string"
        },
        "toPort": {
          "description": "Modify to given Port (Zero if port is not to be modified)",
          "type": "integer"
        },
        "trap": {
          "description": "Trap anything matching rule",
          "type": "boolean"
        }
      }
    },
    "FirewallRuleEntry": {
      "type": "object",
      "properties": {
        "destinationIP": {
          "description": "Destination IP in CIDR notation",
          "type": "string"
        },
        "maxDestinationPort": {
          "description": "Maximum  destination port range",
          "type": "integer"
        },
        "maxSourcePort": {
          "description": "Maximum  source port range",
          "type": "integer"
        },
        "minDestinationPort": {
          "description": "Minimum destination port range",
          "type": "integer"
        },
        "minSourcePort": {
          "description": "Minimum source port range",
          "type": "integer"
        },
        "portName": {
          "description": "the incoming port",
          "type": "string"
        },
        "preference": {
          "description": "User preference for ordering",
          "type": "integer"
        },
        "protocol": {
          "description": "the protocol",
          "type": "integer"
        },
        "sourceIP": {
          "description": "Source IP in CIDR notation",
          "type": "string"
        }
      }
    },
    "FlowCountMetrics": {
      "type": "object",
      "properties": {
        "active_conntrack_count": {
          "type": "number"
        },
        "active_flow_count_sctp": {
          "type": "number"
        },
        "active_flow_count_tcp": {
          "type": "number"
        },
        "active_flow_count_udp": {
          "type": "number"
        },
        "inactive_flow_count": {
          "type": "number"
        }
      }
    },
    "FwDropsMetrics": {
      "type": "object",
      "properties": {
        "total_fw_drops": {
          "type": "number"
        },
        "total_fw_drops_per_rule": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "fw_rule": {
                "type": "string"
              },
              "value": {
                "type": "number"
              }
            }
          }
        }
      }
    },
    "HealthCheckResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string"
        }
      }
    },
    "HostCountMetrics": {
      "type": "object",
      "properties": {
        "healthy_host_count": {
          "type": "number"
        },
        "unhealthy_host_count": {
          "type": "number"
        }
      }
    },
    "IPv4AddressEntry": {
      "type": "object",
      "required": [
        "dev",
        "ipAddress"
      ],
      "properties": {
        "dev": {
          "description": "Name of the interface device to which you want to modify the IP address",
          "type": "string"
        },
        "ipAddress": {
          "description": "IP address to modify.",
          "type": "string"
        }
      }
    },
    "IPv4AddressGetEntry": {
      "type": "object",
      "required": [
        "sync"
      ],
      "properties": {
        "dev": {
          "description": "Name of the interface device to which you want to modify the IP address",
          "type": "string"
        },
        "ipAddress": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "sync": {
          "description": "Sync - sync state",
          "type": "integer"
        }
      }
    },
    "K8sConntrackEntry": {
      "type": "object",
      "properties": {
        "bytes": {
          "description": "Packet bytes of the conntrack",
          "type": "integer"
        },
        "conntrackAct": {
          "description": "value for Conntrack Act",
          "type": "string"
        },
        "conntrackState": {
          "description": "value for Conntrack state",
          "type": "string"
        },
        "destinationIP": {
          "description": "IP address for externel access",
          "type": "string"
        },
        "destinationNamespace": {
          "description": "Namespace of the destination",
          "type": "string"
        },
        "destinationNode": {
          "description": "Node of the destination",
          "type": "string"
        },
        "destinationPod": {
          "description": "Pod name of the destination",
          "type": "string"
        },
        "destinationPort": {
          "description": "port number for the access",
          "type": "integer"
        },
        "ident": {
          "description": "value for Conntrack ident",
          "type": "string"
        },
        "k8sservName": {
          "description": "K8s service name",
          "type": "string"
        },
        "packets": {
          "description": "Packet counts of the conntrack",
          "type": "integer"
        },
        "protocol": {
          "description": "value for access protocol",
          "type": "string"
        },
        "servName": {
          "description": "Connection's Service Name",
          "type": "string"
        },
        "sourceIP": {
          "description": "IP address for externel access",
          "type": "string"
        },
        "sourceNamespace": {
          "description": "Namespace of the source",
          "type": "string"
        },
        "sourceNode": {
          "description": "Node of the source",
          "type": "string"
        },
        "sourcePod": {
          "description": "Pod name of the soruce",
          "type": "string"
        },
        "sourcePort": {
          "description": "port number for the access",
          "type": "integer"
        }
      }
    },
    "LbProcessedTrafficMetrics": {
      "type": "object",
      "properties": {
        "lb_rule_interaction_bytes": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "dip": {
                "type": "string"
              },
              "service": {
                "type": "string"
              },
              "sip": {
                "type": "string"
              },
              "value": {
                "type": "number"
              }
            }
          }
        },
        "lb_rule_interaction_packets": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "dip": {
                "type": "string"
              },
              "service": {
                "type": "string"
              },
              "sip": {
                "type": "string"
              },
              "value": {
                "type": "number"
              }
            }
          }
        }
      }
    },
    "LbRuleCountMetrics": {
      "type": "object",
      "properties": {
        "lb_rule_count": {
          "type": "number"
        }
      }
    },
    "LoadbalanceEntry": {
      "type": "object",
      "required": [
        "serviceArguments",
        "endpoints"
      ],
      "properties": {
        "allowedSources": {
          "description": "values of allowed source IP",
          "type": "array",
          "items": {
            "properties": {
              "prefix": {
                "description": "IP address for allowed source access",
                "type": "string"
              }
            }
          }
        },
        "endpoints": {
          "description": "values of End point servers",
          "type": "array",
          "items": {
            "required": [
              "endpointIP",
              "weight",
              "targetPort"
            ],
            "properties": {
              "counter": {
                "description": "traffic counters of the endpoint",
                "type": "string"
              },
              "endpointIP": {
                "description": "IP address for external access",
                "type": "string"
              },
              "state": {
                "description": "state of the endpoint",
                "type": "string"
              },
              "targetPort": {
                "description": "port number for access service",
                "type": "integer"
              },
              "weight": {
                "description": "Weight for the load balancing",
                "type": "integer"
              }
            }
          }
        },
        "secondaryIPs": {
          "description": "values of Secondary IPs",
          "type": "array",
          "items": {
            "properties": {
              "secondaryIP": {
                "description": "IP address for secondary access",
                "type": "string"
              }
            }
          }
        },
        "serviceArguments": {
          "type": "object",
          "required": [
            "externalIP",
            "port"
          ],
          "properties": {
            "bgp": {
              "description": "value for BGP enable or not",
              "type": "boolean"
            },
            "block": {
              "description": "block-number if any of this LB entry",
              "type": "integer",
              "format": "uint32"
            },
            "egress": {
              "description": "flag to indicate an egress rule",
              "type": "boolean"
            },
            "externalIP": {
              "description": "IP address for external access",
              "type": "string"
            },
            "host": {
              "description": "Ingress specific host URL path",
              "type": "string"
            },
            "inactiveTimeOut": {
              "description": "value for inactivity timeout (in seconds)",
              "type": "integer",
              "format": "int32"
            },
            "managed": {
              "description": "externally managed rule or not",
              "type": "boolean"
            },
            "mode": {
              "description": "value for NAT mode (0-DNAT,1-onearm, 2-fullnat, 3-dsr, 4-fullproxy, 5-hostonearm, 0-default)",
              "type": "integer",
              "format": "int32",
              "enum": [
                0,
                1,
                2,
                3,
                4,
                5
              ]
            },
            "monitor": {
              "description": "value for monitoring enabled or not",
              "type": "boolean"
            },
            "name": {
              "description": "service name",
              "type": "string"
            },
            "oper": {
              "description": "end-point specific op (0-create, 1-attachEP, 2-detachEP)",
              "type": "integer",
              "format": "int32",
              "enum": [
                0,
                1,
                2
              ]
            },
            "port": {
              "description": "(Min) port number for the access",
              "type": "integer"
            },
            "portMax": {
              "description": "Max port number(range) for the access",
              "type": "integer"
            },
            "privateIP": {
              "description": "private IP (NAT'd) address for external access",
              "type": "string"
            },
            "probeRetries": {
              "description": "value for probe retries",
              "type": "integer",
              "format": "int32"
            },
            "probeTimeout": {
              "description": "value for probe timer (in seconds)",
              "type": "integer",
              "format": "uint32"
            },
            "probeport": {
              "description": "probe port if probetype is tcp/udp/sctp",
              "type": "integer",
              "format": "uint16"
            },
            "probereq": {
              "description": "probe request string",
              "type": "string"
            },
            "proberesp": {
              "description": "probe response string",
              "type": "string"
            },
            "probetype": {
              "description": "probe type for any end-point of this entry",
              "type": "string",
              "enum": [
                "tcp",
                "udp",
                "sctp",
                "http",
                "https",
                "ping",
                "none"
              ]
            },
            "protocol": {
              "description": "value for access protocol",
              "type": "string",
              "enum": [
                "tcp",
                "udp",
                "sctp",
                "icmp"
              ]
            },
            "proxyprotocolv2": {
              "description": "flag to enable proxy protocol v2",
              "type": "boolean"
            },
            "security": {
              "description": "value for Security mode (0-Plain, 1-https, 1-tls, 2-e2ehttps, 0-default)",
              "type": "integer",
              "format": "int32",
              "enum": [
                0,
                1,
                2
              ]
            },
            "sel": {
              "description": "value for load balance algorithim(0-rr, 1-hash, 2-priority, 3-persist, 4-lc, 5-n2, 6-n3, 0-default)",
              "type": "integer",
              "enum": [
                0,
                1,
                2,
                3,
                4,
                5,
                6
              ]
            },
            "snat": {
              "description": "snat rule",
              "type": "boolean"
            }
          }
        }
      }
    },
    "LogArchives": {
      "type": "object",
      "properties": {
        "archives": {
          "description": "List of log archive filenames.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "LoginResponse": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string"
        }
      }
    },
    "Logs": {
      "type": "object",
      "properties": {
        "logs": {
          "description": "List of filtered logs.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "MessageResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        }
      }
    },
    "MetricEntity": {
      "type": "object",
      "properties": {
        "name": {
          "description": "Metric Name",
          "type": "string"
        },
        "service": {
          "description": "Load Balancer Service Name",
          "type": "string"
        },
        "value": {
          "description": "Metric Value",
          "type": "integer",
          "format": "uint64"
        }
      }
    },
    "MetricsConfig": {
      "type": "object",
      "required": [
        "prometheus"
      ],
      "properties": {
        "prometheus": {
          "description": "value for prometheus enable or not",
          "type": "boolean"
        }
      }
    },
    "MirrorEntry": {
      "type": "object",
      "required": [
        "mirrorIdent",
        "targetObject"
      ],
      "properties": {
        "mirrorIdent": {
          "description": "Mirror name",
          "type": "string"
        },
        "mirrorInfo": {
          "type": "object",
          "properties": {
            "port": {
              "description": "Port where mirrored traffic needs to be sent",
              "type": "string"
            },
            "remoteIP": {
              "description": "For ERSPAN we may need to send tunnelled mirror traffic",
              "type": "string"
            },
            "sourceIP": {
              "description": "For ERSPAN we may need to send tunnelled mirror traffic",
              "type": "string"
            },
            "tunnelID": {
              "description": "mirror tunnel-id. For ERSPAN we may need to send tunnelled mirror traffic",
              "type": "integer"
            },
            "type": {
              "description": "One of MirrTypeSpan, MirrTypeRspan or MirrTypeErspan(0-MirrTypeSpan, 1-MirrTypeRspan, 2-MirrTypeErspan)",
              "type": "integer",
              "enum": [
                0,
                1,
                2
              ]
            },
            "vlan": {
              "description": "For RSPAN we may need to send tagged mirror traffic",
              "type": "integer"
            }
          }
        },
        "targetObject": {
          "type": "object",
          "required": [
            "attachment",
            "mirrObjName"
          ],
          "properties": {
            "attachment": {
              "description": "Target Attachment(0-RuleName, 1-PortName)",
              "type": "integer",
              "enum": [
                0,
                1
              ]
            },
            "mirrObjName": {
              "description": "Target Names",
              "type": "string"
            }
          }
        }
      }
    },
    "MirrorGetEntry": {
      "type": "object",
      "required": [
        "sync"
      ],
      "properties": {
        "mirrorIdent": {
          "description": "Mirror name",
          "type": "string"
        },
        "mirrorInfo": {
          "type": "object",
          "properties": {
            "port": {
              "description": "Port where mirrored traffic needs to be sent",
              "type": "string"
            },
            "remoteIP": {
              "description": "For ERSPAN we may need to send tunnelled mirror traffic",
              "type": "string"
            },
            "sourceIP": {
              "description": "For ERSPAN we may need to send tunnelled mirror traffic",
              "type": "string"
            },
            "tunnelID": {
              "description": "mirror tunnel-id. For ERSPAN we may need to send tunnelled mirror traffic",
              "type": "integer"
            },
            "type": {
              "description": "One of MirrTypeSpan, MirrTypeRspan or MirrTypeErspan",
              "type": "integer"
            },
            "vlan": {
              "description": "For RSPAN we may need to send tagged mirror traffic",
              "type": "integer"
            }
          }
        },
        "sync": {
          "description": "Sync - sync state",
          "type": "integer"
        },
        "targetObject": {
          "type": "object",
          "properties": {
            "attachment": {
              "description": "Target Attachment",
              "type": "integer"
            },
            "mirrObjName": {
              "description": "Target Names",
              "type": "string"
            }
          }
        }
      }
    },
    "NeighborEntry": {
      "type": "object",
      "required": [
        "dev",
        "ipAddress",
        "macAddress"
      ],
      "properties": {
        "dev": {
          "description": "Name of the interface device to which you want to add neighbor",
          "type": "string"
        },
        "ipAddress": {
          "description": "IP address to neighbor",
          "type": "string"
        },
        "macAddress": {
          "description": "MAC address to neighbor",
          "type": "string"
        }
      }
    },
    "NewFlowCountMetrics": {
      "type": "object",
      "properties": {
        "new_flow_count": {
          "type": "number"
        }
      }
    },
    "Node": {
      "type": "object",
      "properties": {
        "color": {
          "type": "string"
        },
        "icon": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "mainstat": {
          "type": "number"
        },
        "nodeRadius": {
          "type": "integer"
        },
        "secondarystat": {
          "type": "number"
        },
        "subtitle": {
          "type": "string"
        },
        "title": {
          "type": "string"
        }
      }
    },
    "NodeGraphShcmea": {
      "type": "object",
      "properties": {
        "edges": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Edge"
          }
        },
        "meta": {
          "type": "object",
          "properties": {
            "preferredVisualisationType": {
              "type": "string"
            }
          }
        },
        "nodes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Node"
          }
        },
        "schemaVersion": {
          "type": "integer"
        }
      }
    },
    "OauthErrorResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        }
      }
    },
    "OauthLoginResponse": {
      "type": "object",
      "properties": {
        "expiresin": {
          "description": "The duration in seconds that the access token is valid for.",
          "type": "integer"
        },
        "id": {
          "description": "The unique identifier for the authenticated user (e.g., Google user ID).",
          "type": "string"
        },
        "refreshtoken": {
          "description": "The refresh token used to obtain new access tokens once the current one expires.",
          "type": "string"
        },
        "token": {
          "description": "The access token used for API requests. Typically expires after a short duration.",
          "type": "string"
        }
      }
    },
    "OauthMessageResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        }
      }
    },
    "OauthTokenResponse": {
      "type": "object",
      "properties": {
        "expiresin": {
          "description": "The duration in seconds that the access token is valid for.",
          "type": "integer"
        },
        "token": {
          "description": "The access token used for API requests. Typically expires after a short duration.",
          "type": "string"
        }
      }
    },
    "OperParams": {
      "type": "object",
      "required": [
        "logLevel"
      ],
      "properties": {
        "logLevel": {
          "description": "Set level to trace,debug,info,error,warning,notice,critical,emergency,alert",
          "type": "string",
          "enum": [
            "trace",
            "debug",
            "info",
            "error",
            "warning",
            "notice",
            "critical",
            "emergency",
            "alert"
          ]
        }
      }
    },
    "PolicyEntry": {
      "type": "object",
      "required": [
        "policyIdent",
        "targetObject"
      ],
      "properties": {
        "policyIdent": {
          "description": "Policy name",
          "type": "string"
        },
        "policyInfo": {
          "type": "object",
          "properties": {
            "colorAware": {
              "description": "Policy color for QoS",
              "type": "boolean"
            },
            "committedBlkSize": {
              "description": "policy type",
              "type": "integer"
            },
            "committedInfoRate": {
              "description": "policy type",
              "type": "integer"
            },
            "excessBlkSize": {
              "description": "policy type",
              "type": "integer"
            },
            "peakInfoRate": {
              "description": "policy type",
              "type": "integer"
            },
            "type": {
              "description": "policy type(0-TrTCM, 1-SrTCM)",
              "type": "integer",
              "enum": [
                0,
                1
              ]
            }
          }
        },
        "targetObject": {
          "type": "object",
          "required": [
            "attachment",
            "polObjName"
          ],
          "properties": {
            "attachment": {
              "description": "Target Attachment(0-RuleName, 1-PortName)",
              "type": "integer",
              "enum": [
                0,
                1
              ]
            },
            "polObjName": {
              "description": "Target Names",
              "type": "string"
            }
          }
        }
      }
    },
    "PortEntry": {
      "type": "object",
      "properties": {
        "DataplaneSync": {
          "description": "Dataplan Sync check",
          "type": "integer"
        },
        "portHardwareInformation": {
          "type": "object",
          "properties": {
            "link": {
              "description": "link status",
              "type": "boolean"
            },
            "macAddress": {
              "description": "MAC address of the port",
              "type": "string"
            },
            "master": {
              "description": "Port's mater",
              "type": "string"
            },
            "mtu": {
              "description": "MTU of the port",
              "type": "integer"
            },
            "rawMacAddress": {
              "description": "MAC address written by byte array",
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "real": {
              "description": "real port..",
              "type": "string"
            },
            "state": {
              "description": "state...",
              "type": "boolean"
            },
            "tunnelId": {
              "description": "Tunnel Id such as VxLAN.",
              "type": "integer"
            }
          }
        },
        "portL2Information": {
          "type": "object",
          "properties": {
            "isPvid": {
              "description": "Is PVID config or not",
              "type": "boolean"
            },
            "vid": {
              "description": "virtual lan id(VLAN ID)",
              "type": "integer"
            }
          }
        },
        "portL3Information": {
          "type": "object",
          "properties": {
            "IPv4Address": {
              "description": "List of IP address v4",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "IPv6Address": {
              "description": "List of the IP address v6",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "routed": {
              "description": "Is routed or not",
              "type": "boolean"
            }
          }
        },
        "portName": {
          "description": "The name of the Port interface",
          "type": "string"
        },
        "portNo": {
          "description": "Index of the Port",
          "type": "integer"
        },
        "portSoftwareInformation": {
          "type": "object",
          "properties": {
            "bpfLoaded": {
              "description": "The status of the eBPF loaded",
              "type": "boolean"
            },
            "osId": {
              "description": "The ID of the Port in the software(OS)",
              "type": "integer"
            },
            "portActive": {
              "description": "Activation status of the port",
              "type": "boolean"
            },
            "portProp": {
              "description": "Priority of the port",
              "type": "integer"
            },
            "portType": {
              "description": "port type",
              "type": "integer"
            }
          }
        },
        "portStatisticInformation": {
          "type": "object",
          "properties": {
            "rxBytes": {
              "description": "Statistic of the ingress port bytes.",
              "type": "integer"
            },
            "rxErrors": {
              "description": "Statistic of the number of ingress Error packets.",
              "type": "integer"
            },
            "rxPackets": {
              "description": "Statistic of the number of ingress packets.",
              "type": "integer"
            },
            "txBytes": {
              "description": "Statistic of the egress port bytes.",
              "type": "integer"
            },
            "txErrors": {
              "description": "Statistic of the number of egress Error packets.",
              "type": "integer"
            },
            "txPackets": {
              "description": "Statistic of the number of egress packets.",
              "type": "integer"
            }
          }
        },
        "zone": {
          "description": "network zone",
          "type": "string"
        }
      }
    },
    "PostSuccess": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "ProcessInfoEntry": {
      "type": "object",
      "properties": {
        "CPUUsage": {
          "description": "CPU usage of the process",
          "type": "string"
        },
        "MemoryUsage": {
          "description": "Memory usage of the process",
          "type": "string"
        },
        "command": {
          "description": "process command",
          "type": "string"
        },
        "nice": {
          "description": "process nice value",
          "type": "string"
        },
        "pid": {
          "description": "process ID",
          "type": "string"
        },
        "priority": {
          "description": "process priority",
          "type": "string"
        },
        "residentSize": {
          "description": "Physical memory usage",
          "type": "string"
        },
        "sharedMemory": {
          "description": "Shared memory usage",
          "type": "string"
        },
        "status": {
          "description": "process status",
          "type": "string"
        },
        "time": {
          "description": "Executation time",
          "type": "string"
        },
        "user": {
          "description": "User name that start the process",
          "type": "string"
        },
        "virtMemory": {
          "description": "virtual memory usage",
          "type": "string"
        }
      }
    },
    "ProcessedTrafficMetrics": {
      "type": "object",
      "properties": {
        "processed_bytes": {
          "type": "number"
        },
        "processed_packets": {
          "type": "number"
        },
        "processed_sctp_bytes": {
          "type": "number"
        },
        "processed_tcp_bytes": {
          "type": "number"
        },
        "processed_udp_bytes": {
          "type": "number"
        }
      }
    },
    "ReqCountPerClientMetrics": {
      "type": "object",
      "additionalProperties": {
        "type": "number"
      }
    },
    "RequestCountMetrics": {
      "type": "object",
      "properties": {
        "total_requests": {
          "type": "number"
        },
        "total_requests_per_service": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "value": {
                "type": "number"
              }
            }
          }
        }
      }
    },
    "RouteEntry": {
      "type": "object",
      "required": [
        "destinationIPNet",
        "gateway"
      ],
      "properties": {
        "destinationIPNet": {
          "description": "IP address and netmask",
          "type": "string"
        },
        "gateway": {
          "description": "IP address for nexthop",
          "type": "string"
        },
        "protocol": {
          "description": "Protocol type of the route like \"static\"",
          "type": "string"
        }
      }
    },
    "RouteGetEntry": {
      "type": "object",
      "properties": {
        "destinationIPNet": {
          "description": "IP address and netmask",
          "type": "string"
        },
        "flags": {
          "description": "Route flags",
          "type": "string"
        },
        "gateway": {
          "description": "IP address for nexthop",
          "type": "string"
        },
        "hardwareMark": {
          "description": "index of the route",
          "type": "integer"
        },
        "protocol": {
          "description": "Route protocol",
          "type": "string"
        },
        "statistic": {
          "type": "object",
          "required": [
            "bytes",
            "packets"
          ],
          "properties": {
            "bytes": {
              "description": "Statistic of the ingress port bytes.",
              "type": "integer"
            },
            "packets": {
              "description": "Statistic of the egress port bytes.",
              "type": "integer"
            }
          }
        },
        "sync": {
          "type": "integer"
        }
      }
    },
    "ServiceDistTrafficMetrics": {
      "type": "object",
      "additionalProperties": {
        "type": "object",
        "properties": {
          "ratio": {
            "type": "number"
          },
          "value": {
            "type": "number"
          }
        }
      }
    },
    "SessionEntry": {
      "type": "object",
      "required": [
        "ident"
      ],
      "properties": {
        "accessNetworkTunnel": {
          "type": "object",
          "properties": {
            "TeID": {
              "description": "ID of the tunnel",
              "type": "integer"
            },
            "tunnelIP": {
              "description": "Access network IP address",
              "type": "string"
            }
          }
        },
        "coreNetworkTunnel": {
          "type": "object",
          "properties": {
            "teID": {
              "description": "ID of the tunnel",
              "type": "integer"
            },
            "tunnelIP": {
              "description": "Connection network IP address",
              "type": "string"
            }
          }
        },
        "ident": {
          "description": "IP address and netmask",
          "type": "string"
        },
        "sessionIP": {
          "description": "IP address for nexthop",
          "type": "string"
        }
      }
    },
    "SessionUlClEntry": {
      "type": "object",
      "required": [
        "ulclIdent"
      ],
      "properties": {
        "ulclArgument": {
          "type": "object",
          "properties": {
            "qfi": {
              "description": "QFI number",
              "type": "integer"
            },
            "ulclIP": {
              "description": "Access network IP address",
              "type": "string"
            }
          }
        },
        "ulclIdent": {
          "description": "IP address and netmask",
          "type": "string"
        }
      }
    },
    "SuccessResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        }
      }
    },
    "UpdateLicenseRequest": {
      "type": "object",
      "required": [
        "license_key"
      ],
      "properties": {
        "license_key": {
          "type": "string"
        }
      }
    },
    "User": {
      "type": "object",
      "required": [
        "username",
        "password"
      ],
      "properties": {
        "created_at": {
          "type": "string"
        },
        "id": {
          "type": "integer"
        },
        "password": {
          "type": "string"
        },
        "role": {
          "type": "string",
          "enum": [
            "admin",
            "viewer"
          ]
        },
        "username": {
          "type": "string"
        }
      }
    },
    "VersionGetEntry": {
      "type": "object",
      "properties": {
        "buildInfo": {
          "description": "build info",
          "type": "string"
        },
        "version": {
          "description": "Instance name",
          "type": "string"
        }
      }
    },
    "VlanBridgeEntry": {
      "type": "object",
      "required": [
        "vid"
      ],
      "properties": {
        "vid": {
          "description": "Vlan ID",
          "type": "integer"
        }
      }
    },
    "VlanGetEntry": {
      "type": "object",
      "properties": {
        "dev": {
          "description": "Interface device name",
          "type": "string"
        },
        "member": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VlanMemberEntry"
          }
        },
        "vid": {
          "description": "Vlan ID",
          "type": "integer"
        },
        "vlanStatistic": {
          "type": "object",
          "properties": {
            "inBytes": {
              "type": "integer"
            },
            "inPackets": {
              "type": "integer"
            },
            "outBytes": {
              "type": "integer"
            },
            "outPackets": {
              "type": "integer"
            }
          }
        }
      }
    },
    "VlanMemberEntry": {
      "type": "object",
      "properties": {
        "dev": {
          "description": "Interface device name",
          "type": "string"
        },
        "tagged": {
          "description": "Tagged status added",
          "type": "boolean"
        }
      }
    },
    "VxlanBridgeEntry": {
      "type": "object",
      "required": [
        "epIntf",
        "vxlanID"
      ],
      "properties": {
        "epIntf": {
          "type": "string"
        },
        "vxlanID": {
          "type": "integer"
        }
      }
    },
    "VxlanEntry": {
      "type": "object",
      "required": [
        "vxlanName",
        "epIntf",
        "vxlanID",
        "peerIP"
      ],
      "properties": {
        "epIntf": {
          "type": "string"
        },
        "peerIP": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "vxlanID": {
          "type": "integer"
        },
        "vxlanName": {
          "type": "string"
        }
      }
    },
    "VxlanPeerEntry": {
      "type": "object",
      "required": [
        "peerIP"
      ],
      "properties": {
        "peerIP": {
          "type": "string"
        }
      }
    }
  },
  "securityDefinitions": {
    "BearerAuth": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "security": [
    {
      "BearerAuth": []
    }
  ]
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http",
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Loxilb REST API for Baremetal Scenarios",
    "title": "Loxilb Rest API",
    "version": "0.0.1"
  },
  "host": "0.0.0.0:11111",
  "basePath": "/netlox/v1",
  "paths": {
    "/auth/login": {
      "post": {
        "security": [],
        "description": "Authenticates a user and returns a JWT token if the credentials are valid.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "auth"
        ],
        "summary": "User login",
        "parameters": [
          {
            "description": "User credentials",
            "name": "user",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/LoginResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Invalidates the user's token and logs them out.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "auth"
        ],
        "summary": "User logout",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MessageResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/auth/token/upgrade": {
      "post": {
        "description": "Using manual token, It need to upgrade the token.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "auth"
        ],
        "summary": "Upgrade token",
        "parameters": [
          {
            "description": "license as a token",
            "name": "token",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateLicenseRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UpdateLicenseRequest"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/auth/users": {
      "get": {
        "description": "Retrieves all users from the database and returns them as a JSON response.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "users"
        ],
        "summary": "Fetch all users",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "security": [],
        "description": "Creates a new user in the system",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "users"
        ],
        "summary": "Create a new user",
        "parameters": [
          {
            "description": "User data",
            "name": "user",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/auth/users/{id}": {
      "put": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Updates an existing user with the provided JSON payload",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "users"
        ],
        "summary": "Update user",
        "parameters": [
          {
            "type": "integer",
            "description": "User ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "User data",
            "name": "user",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Deletes a user by its ID",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "users"
        ],
        "summary": "Delete user",
        "parameters": [
          {
            "type": "integer",
            "description": "User ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MessageResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/bfd": {
      "post": {
        "description": "Create vlan interface in the device",
        "summary": "Create vlan interface in the device",
        "parameters": [
          {
            "description": "Attributes for Vlan Interface",
            "name": "attr",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BfdEntry"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Capacity insufficient",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict. BFD session not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/bfd/all": {
      "get": {
        "description": "Get BFD session inforrmation",
        "summary": "Get BFD session inforrmation in the device",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "Attr": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/BfdGetEntry"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/bfd/remoteIP/{remote_ip}": {
      "delete": {
        "description": "Delete a BFD session",
        "summary": "Delete a BFD session",
        "parameters": [
          {
            "type": "string",
            "description": "Remote IP address",
            "name": "remote_ip",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Cluster instance name",
            "name": "instance",
            "in": "query"
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Capacity insufficient",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict. BFD session already exists",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/bgp/global": {
      "post": {
        "description": "Adds a BGP global config",
        "summary": "Adds a BGP global config",
        "parameters": [
          {
            "description": "Attributes of bgp global config",
            "name": "attr",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BGPGlobalConfig"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Capacity insufficient",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/bgp/neigh": {
      "post": {
        "description": "Adds a BGP Neighbor",
        "summary": "Adds a BGP Neighbor",
        "parameters": [
          {
            "description": "Attributes of bgp neighbor",
            "name": "attr",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BGPNeigh"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Capacity insufficient",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/bgp/neigh/all": {
      "get": {
        "description": "Get the all of BGP Neighbor",
        "summary": "Get the all of BGP Neighbor",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "bgpNeiAttr": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/BGPNeighGetEntry"
                  }
                }
              }
            }
          },
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Capacity insufficient",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict. VLAN already exists OR dependency VRF/VNET not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/bgp/neigh/{ip_address}": {
      "delete": {
        "description": "Delete a BGP Neighbor",
        "summary": "Delete a BGP neighbor",
        "parameters": [
          {
            "type": "string",
            "description": "Neighbor IP address",
            "name": "ip_address",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "Remote ASN number",
            "name": "remoteAs",
            "in": "query"
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Capacity insufficient",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict. Neigh already exists",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/bgp/policy/apply": {
      "post": {
        "description": "Apply BGP Policy in neighbor",
        "summary": "Apply BGP Policy in neighbor",
        "parameters": [
          {
            "description": "Attributes of bgp neighbor",
            "name": "attr",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BGPApplyPolicyToNeighborMod"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Capacity insufficient",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "description": "Delete BGP Policy in neighbor. It don't need \"routeAction\" in the attr body",
        "summary": "Delete BGP Policy in neighbor",
        "parameters": [
          {
            "description": "Attributes of bgp neighbor",
            "name": "attr",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BGPApplyPolicyToNeighborMod"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Capacity insufficient",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict. Neigh already exists",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/bgp/policy/definedsets/{defineset_type}": {
      "post": {
        "description": "Adds a BGP definedsets for making Policy",
        "summary": "Adds a BGP  definedsets for making Policy",
        "parameters": [
          {
            "type": "string",
            "description": "defineset type one of prefix/neighbor/community/extcommunity/aspath/largecommunity",
            "name": "defineset_type",
            "in": "path",
            "required": true
          },
          {
            "description": "Attributes of bgp neighbor",
            "name": "attr",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BGPPolicyDefinedSetsMod"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Capacity insufficient",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/bgp/policy/definedsets/{defineset_type}/{type_name}": {
      "get": {
        "description": "Get the all of BGP, prefix/neighbor/community/extcommunity/aspath/largecommunity",
        "summary": "Get the all of BGP definedsets",
        "parameters": [
          {
            "type": "string",
            "description": "defineset type one of prefix/neighbor/community/extcommunity/aspath/largecommunity",
            "name": "defineset_type",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "type name",
            "name": "type_name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "definedsetsAttr": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/BGPPolicyDefinedSetGetEntry"
                  }
                }
              }
            }
          },
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Capacity insufficient",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict. VLAN already exists OR dependency VRF/VNET not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "description": "Delete a BGP definedsets",
        "summary": "Delete a BGP definedsets",
        "parameters": [
          {
            "type": "string",
            "description": "defineset type one of prefix/neighbor/community/extcommunity/aspath/largecommunity",
            "name": "defineset_type",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "type name",
            "name": "type_name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Capacity insufficient",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict. Neigh already exists",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/bgp/policy/definitions": {
      "post": {
        "description": "Adds a BGP Policy",
        "summary": "Adds a BGP Policy",
        "parameters": [
          {
            "description": "Attributes of bgp neighbor",
            "name": "attr",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BGPPolicyDefinitionsMod"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Capacity insufficient",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/bgp/policy/definitions/all": {
      "get": {
        "description": "Get BGP Policy definitions",
        "summary": "Get BGP Policy definitions",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "bgpPolicyAttr": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/BGPPolicyDefinitionsMod"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/bgp/policy/definitions/{policy_name}": {
      "delete": {
        "description": "Delete a BGP Policy",
        "summary": "Delete a BGP policy",
        "parameters": [
          {
            "type": "string",
            "description": "The name of the community",
            "name": "policy_name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Capacity insufficient",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict. Neigh already exists",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/cistate": {
      "post": {
        "description": "Informs Current Cluster Instance state in the device",
        "summary": "Informs Current Cluster Instance state in the device",
        "parameters": [
          {
            "description": "Attributes for CI State",
            "name": "attr",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CIStatusEntry"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Capacity insufficient",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/cistate/all": {
      "get": {
        "description": "Get Cluster Instance State in the device",
        "summary": "Get Cluster Instance State in the device",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "Attr": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/CIStatusGetEntry"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/conntrack/all": {
      "get": {
        "description": "Get all of the conntrack infomation for all of the service.",
        "summary": "Get all of the conntrack entries.",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "ctAttr": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ConntrackEntry"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/cors": {
      "post": {
        "description": "Post full K8s metadata set (Pod, Service, Endpoint, Node, Namespace)",
        "summary": "Post full K8s metadata set (Pod, Service, Endpoint, Node, Namespace)",
        "parameters": [
          {
            "description": "Attributes for Vlan Interface",
            "name": "attr",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CorsEntry"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Capacity insufficient",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict. BFD session not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/cors/all": {
      "get": {
        "produces": [
          "application/json"
        ],
        "summary": "Get all related K8s metadata (Pod, Service, Endpoint, Node, Namespace)",
        "responses": {
          "200": {
            "description": "get cors list",
            "schema": {
              "properties": {
                "corsAttr": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/config/cors/{cors_url}": {
      "delete": {
        "description": "Delete a BFD session",
        "summary": "Delete a BFD session",
        "parameters": [
          {
            "type": "string",
            "description": "cors url ex) http://localhost:3000",
            "name": "cors_url",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Capacity insufficient",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict. BFD session already exists",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/endpoint": {
      "post": {
        "description": "Adds a LB endpoint for monitoring",
        "summary": "Adds a LB endpoint for monitoring",
        "parameters": [
          {
            "description": "Attributes of end point",
            "name": "attr",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EndPoint"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Capacity insufficient",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/endpoint/all": {
      "get": {
        "description": "Get End-Points State in loxilb",
        "summary": "Get End-Points State in loxilb",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "Attr": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/EndPointGetEntry"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/endpoint/epipaddress/{ip_address}": {
      "delete": {
        "description": "Delete an LB end-point from monitoring",
        "summary": "Delete an LB end-point from monitoring",
        "parameters": [
          {
            "type": "string",
            "description": "Attributes of end point",
            "name": "ip_address",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Endpoint Identifier",
            "name": "name",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Probe type",
            "name": "probe_type",
            "in": "query"
          },
          {
            "type": "number",
            "description": "Probe port",
            "name": "probe_port",
            "in": "query"
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Capacity insufficient",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict. VLAN already exists OR dependency VRF/VNET not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/endpointhoststate": {
      "post": {
        "description": "Sets the state of a host which can have multiple endpoints",
        "summary": "Sets the state of a host",
        "parameters": [
          {
            "description": "Attributes of end point",
            "name": "attr",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EndPointHostState"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Capacity insufficient",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/export": {
      "get": {
        "description": "Export cluster, endpoint, firewall, loadbalancer, mirror, and policy configurations as a JSON file.",
        "produces": [
          "application/json"
        ],
        "summary": "Export all configurations",
        "parameters": [
          {
            "type": "string",
            "description": "Comma-separated list of components to export (cluster, endpoint, firewall, loadbalancer, mirror, policy). If not specified, all components are exported.",
            "name": "components",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Configuration JSON file download",
            "schema": {
              "type": "file"
            }
          },
          "400": {
            "description": "Invalid parameters",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/fdb": {
      "post": {
        "description": "Assign FDB in the device",
        "summary": "Assign FDB in the device",
        "parameters": [
          {
            "description": "Attributes for IPv4 address",
            "name": "attr",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FDBEntry"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Capacity insufficient",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict. VLAN already exists OR dependency VRF/VNET not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/fdb/all": {
      "get": {
        "description": "Get FDB in the device(interface).",
        "summary": "Get FDB in the device(interface)",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "fdbAttr": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/FDBEntry"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/fdb/{mac_address}/dev/{if_name}": {
      "delete": {
        "description": "Delete FDB in the device",
        "summary": "Delete FDB in the device",
        "parameters": [
          {
            "type": "string",
            "description": "Attributes IPv4 Address in the device",
            "name": "mac_address",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Attributes of the target device",
            "name": "if_name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Capacity insufficient",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict. VLAN already exists OR dependency VRF/VNET not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/firewall": {
      "post": {
        "description": "Create a new firewall config for security.",
        "summary": "Create a new firewall config",
        "parameters": [
          {
            "description": "Attributes for  firewall sevice",
            "name": "attr",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FirewallEntry"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Capacity insufficient",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict. VLAN already exists OR dependency VRF/VNET not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "description": "Delete of the firewall service.",
        "summary": "Delete of the firewall service",
        "parameters": [
          {
            "type": "string",
            "description": "Source IP address",
            "name": "sourceIP",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Destination IP in CIDR notation",
            "name": "destinationIP",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Minimum source port range",
            "name": "minSourcePort",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Maximum source port range",
            "name": "maxSourcePort",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Minimum destination port range",
            "name": "minDestinationPort",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Maximum destination port range",
            "name": "maxDestinationPort",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "the protocol",
            "name": "protocol",
            "in": "query"
          },
          {
            "type": "string",
            "description": "the incoming port",
            "name": "portName",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "User preference for ordering",
            "name": "preference",
            "in": "query"
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Capacity insufficient",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict. VLAN already exists OR dependency VRF/VNET not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/firewall/all": {
      "get": {
        "description": "Get all of the firewall configuration.",
        "summary": "Get all of the firewall config",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "fwAttr": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/FirewallEntry"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/import": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "summary": "Import configurations",
        "parameters": [
          {
            "type": "file",
            "description": "The configuration file to upload.",
            "name": "configuration",
            "in": "formData"
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          }
        }
      }
    },
    "/config/ipv4address": {
      "post": {
        "description": "Assign IPv4 addresses in the device",
        "summary": "Assign IPv4 addresses in the device",
        "parameters": [
          {
            "description": "Attributes for IPv4 address",
            "name": "attr",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IPv4AddressEntry"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Capacity insufficient",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict. VLAN already exists OR dependency VRF/VNET not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/ipv4address/all": {
      "get": {
        "description": "Get IPv4 addresses in the device(interface)",
        "summary": "Get IPv4 addresses in the device(interface)",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "ipAttr": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/IPv4AddressGetEntry"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/ipv4address/{ip_address}/{mask}/dev/{if_name}": {
      "delete": {
        "description": "Delete IPv4 addresses in the device",
        "summary": "Delete IPv4 addresses in the device",
        "parameters": [
          {
            "type": "string",
            "description": "Attributes IPv4 Address in the device",
            "name": "ip_address",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Attributes IPv4 mask in the device",
            "name": "mask",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Attributes of the target device",
            "name": "if_name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Capacity insufficient",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict. VLAN already exists OR dependency VRF/VNET not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/loadbalancer": {
      "post": {
        "description": "Create a new load balancer service with .",
        "summary": "Create a new Load balancer service",
        "parameters": [
          {
            "description": "Attributes for load balance service",
            "name": "attr",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LoadbalanceEntry"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PostSuccess"
            }
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Capacity insufficient",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict. VLAN already exists OR dependency VRF/VNET not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/loadbalancer/all": {
      "get": {
        "description": "Get all of the load balancer services with conntrack infomation.",
        "summary": "Get all of the load balancer services",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "lbAttr": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/LoadbalanceEntry"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "description": "Delete all load balancer services.",
        "summary": "Delete all Load balancer services",
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Capacity insufficient",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict. VLAN already exists OR dependency VRF/VNET not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/loadbalancer/externalipaddress/{ip_address}/port/{port}/portmax/{portmax}/protocol/{proto}": {
      "delete": {
        "description": "Delete an existing load balancer service with .",
        "summary": "Delete an existing Load balancer service",
        "parameters": [
          {
            "type": "string",
            "description": "Attributes for load balance service",
            "name": "ip_address",
            "in": "path",
            "required": true
          },
          {
            "type": "number",
            "description": "Attributes for load balance service",
            "name": "port",
            "in": "path",
            "required": true
          },
          {
            "type": "number",
            "description": "Attributes for load balance service",
            "name": "portmax",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Attributes for load balance service",
            "name": "proto",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "description": "option for BGP enable",
            "name": "bgp",
            "in": "query"
          },
          {
            "type": "number",
            "description": "block value if any",
            "name": "block",
            "in": "query"
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Capacity insufficient",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict. VLAN already exists OR dependency VRF/VNET not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/loadbalancer/externalipaddress/{ip_address}/port/{port}/protocol/{proto}": {
      "delete": {
        "description": "Delete an existing load balancer service with .",
        "summary": "Delete an existing Load balancer service",
        "parameters": [
          {
            "type": "string",
            "description": "Attributes for load balance service",
            "name": "ip_address",
            "in": "path",
            "required": true
          },
          {
            "type": "number",
            "description": "Attributes for load balance service",
            "name": "port",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Attributes for load balance service",
            "name": "proto",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "description": "option for BGP enable",
            "name": "bgp",
            "in": "query"
          },
          {
            "type": "number",
            "description": "block value if any",
            "name": "block",
            "in": "query"
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Capacity insufficient",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict. VLAN already exists OR dependency VRF/VNET not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/loadbalancer/hosturl/{hosturl}/externalipaddress/{ip_address}/port/{port}/portmax/{portmax}/protocol/{proto}": {
      "delete": {
        "description": "Delete an existing load balancer service with .",
        "summary": "Delete an existing Load balancer service",
        "parameters": [
          {
            "type": "string",
            "description": "Attributes for load balance service",
            "name": "hosturl",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Attributes for load balance service",
            "name": "ip_address",
            "in": "path",
            "required": true
          },
          {
            "type": "number",
            "description": "Attributes for load balance service",
            "name": "port",
            "in": "path",
            "required": true
          },
          {
            "type": "number",
            "description": "Attributes for load balance service",
            "name": "portmax",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Attributes for load balance service",
            "name": "proto",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "description": "option for BGP enable",
            "name": "bgp",
            "in": "query"
          },
          {
            "type": "number",
            "description": "block value if any",
            "name": "block",
            "in": "query"
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Capacity insufficient",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict. VLAN already exists OR dependency VRF/VNET not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/loadbalancer/hosturl/{hosturl}/externalipaddress/{ip_address}/port/{port}/protocol/{proto}": {
      "delete": {
        "description": "Delete an existing load balancer service with .",
        "summary": "Delete an existing Load balancer service",
        "parameters": [
          {
            "type": "string",
            "description": "Attributes for load balance service",
            "name": "hosturl",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Attributes for load balance service",
            "name": "ip_address",
            "in": "path",
            "required": true
          },
          {
            "type": "number",
            "description": "Attributes for load balance service",
            "name": "port",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Attributes for load balance service",
            "name": "proto",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "description": "option for BGP enable",
            "name": "bgp",
            "in": "query"
          },
          {
            "type": "number",
            "description": "block value if any",
            "name": "block",
            "in": "query"
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Capacity insufficient",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict. VLAN already exists OR dependency VRF/VNET not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/loadbalancer/name/{lb_name}": {
      "delete": {
        "description": "Delete an existing load balancer service with name.",
        "summary": "Delete an existing Load balancer service",
        "parameters": [
          {
            "type": "string",
            "description": "Attributes for load balance service name",
            "name": "lb_name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Capacity insufficient",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict. VLAN already exists OR dependency VRF/VNET not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/metrics": {
      "get": {
        "summary": "Get prometheus config value",
        "responses": {
          "200": {
            "description": "prometheus config value",
            "schema": {
              "$ref": "#/definitions/MetricsConfig"
            }
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "summary": "turn on prometheus option",
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "turn off prometheus option",
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/mirror": {
      "post": {
        "description": "Create a new Mirror config.",
        "summary": "Create a new Mirror config",
        "parameters": [
          {
            "description": "Attributes for Mirror",
            "name": "attr",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MirrorEntry"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Capacity insufficient",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict. VLAN already exists OR dependency VRF/VNET not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/mirror/all": {
      "get": {
        "description": "Get",
        "summary": "Get",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "mirrAttr": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/MirrorGetEntry"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/mirror/ident/{ident}": {
      "delete": {
        "description": "Delete a new Create a Mirror service.",
        "summary": "Delete a Mirror service",
        "parameters": [
          {
            "type": "string",
            "description": "Attributes of Mirror Ident.",
            "name": "ident",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Capacity insufficient",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict. VLAN already exists OR dependency VRF/VNET not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/neighbor": {
      "post": {
        "description": "Assign IPv4 neighbor in the device",
        "summary": "Assign IPv4 neighbor in the device",
        "parameters": [
          {
            "description": "Attributes for IPv4 address",
            "name": "attr",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NeighborEntry"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Capacity insufficient",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict. VLAN already exists OR dependency VRF/VNET not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/neighbor/all": {
      "get": {
        "description": "Get IPv4 neighbor in the device(interface)",
        "summary": "Get IPv4 neighbor in the device(interface)",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "neighborAttr": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/NeighborEntry"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/neighbor/{ip_address}/dev/{if_name}": {
      "delete": {
        "description": "Delete IPv4 neighbor in the device",
        "summary": "Delete IPv4 neighbor in the device",
        "parameters": [
          {
            "type": "string",
            "description": "Attributes IPv4 Address in the device",
            "name": "ip_address",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Attributes of the target device",
            "name": "if_name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Capacity insufficient",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict. VLAN already exists OR dependency VRF/VNET not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/params": {
      "get": {
        "description": "Get Operational params of LoxiLB",
        "summary": "Get Operational params of LoxiLB",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/OperParams"
            }
          },
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Capacity insufficient",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict. VLAN already exists OR dependency VRF/VNET not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "description": "Set Operational parameters of LoxiLB",
        "summary": "Set Operational parameters of LoxiLB",
        "parameters": [
          {
            "description": "Attributes for setting state",
            "name": "attr",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperParams"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Capacity insufficient",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict. VLAN already exists OR dependency VRF/VNET not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/policy": {
      "post": {
        "description": "Create a new Policy QoS config.",
        "summary": "Create a new Policy QoS config",
        "parameters": [
          {
            "description": "Attributes for Policy",
            "name": "attr",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PolicyEntry"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Capacity insufficient",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict. VLAN already exists OR dependency VRF/VNET not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/policy/all": {
      "get": {
        "description": "Get",
        "summary": "Get",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "polAttr": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/PolicyEntry"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/policy/ident/{ident}": {
      "delete": {
        "description": "Delete a new Create a Policy QoS service.",
        "summary": "Delete a Policy QoS service",
        "parameters": [
          {
            "type": "string",
            "description": "Attributes of Policy Ident.",
            "name": "ident",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Capacity insufficient",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict. VLAN already exists OR dependency VRF/VNET not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/port/all": {
      "get": {
        "description": "Get all of the port interfaces.",
        "summary": "Get all of the port interfaces",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "portAttr": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/PortEntry"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/route": {
      "post": {
        "description": "Create a new route config .",
        "summary": "Create a new route config",
        "parameters": [
          {
            "description": "Attributes for load balance service",
            "name": "attr",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RouteEntry"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Capacity insufficient",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict. VLAN already exists OR dependency VRF/VNET not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/route/all": {
      "get": {
        "description": "Get all route table",
        "summary": "Get all route table",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "routeAttr": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/RouteGetEntry"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Capacity insufficient",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict. VLAN already exists OR dependency VRF/VNET not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/route/destinationIPNet/{ip_address}/{mask}": {
      "delete": {
        "description": "Create a new load balancer service with .",
        "summary": "Create a new Load balancer service",
        "parameters": [
          {
            "type": "string",
            "description": "Attributes for destinaion route address",
            "name": "ip_address",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Attributes for destination route",
            "name": "mask",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Capacity insufficient",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict. VLAN already exists OR dependency VRF/VNET not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/session": {
      "post": {
        "description": "Create a new session config for 5G.",
        "summary": "Create a new session config",
        "parameters": [
          {
            "description": "Attributes for 5G service session",
            "name": "attr",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SessionEntry"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Capacity insufficient",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict. VLAN already exists OR dependency VRF/VNET not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/session/all": {
      "get": {
        "description": "Get all of the port interfaces.",
        "summary": "Get all of the port interfaces",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "sessionAttr": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/SessionEntry"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/session/ident/{ident}": {
      "delete": {
        "description": "Create a new load balancer service with .",
        "summary": "Create a new Load balancer service",
        "parameters": [
          {
            "type": "string",
            "description": "Attributes 5G session Ident.",
            "name": "ident",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Capacity insufficient",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict. VLAN already exists OR dependency VRF/VNET not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/sessionulcl": {
      "post": {
        "description": "Create a new session config for 5G.",
        "summary": "Create a new session config",
        "parameters": [
          {
            "description": "Attributes for 5G service session",
            "name": "attr",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SessionUlClEntry"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Capacity insufficient",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict. VLAN already exists OR dependency VRF/VNET not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/sessionulcl/all": {
      "get": {
        "description": "Get",
        "summary": "Get",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "ulclAttr": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/SessionUlClEntry"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/sessionulcl/ident/{ident}/ulclAddress/{ip_address}": {
      "delete": {
        "description": "Create a new load balancer service with .",
        "summary": "Create a new Load balancer service",
        "parameters": [
          {
            "type": "string",
            "description": "Attributes 5G session Ident.",
            "name": "ident",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Attributes for session ulcl address",
            "name": "ip_address",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Capacity insufficient",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict. VLAN already exists OR dependency VRF/VNET not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/tunnel/vxlan": {
      "post": {
        "description": "Return a list of existing tunnels of a type. If there're no tunnels to return, empty list will be returned.",
        "summary": "Add a one of vxlan configuration",
        "parameters": [
          {
            "description": "attributes for vxlan member interface",
            "name": "attr",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VxlanBridgeEntry"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict. VxLAN already exists OR dependency VRF/VNET not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/tunnel/vxlan/all": {
      "get": {
        "description": "Return a list of existing tunnels of a type. If there're no tunnels to return, empty list will be returned.",
        "summary": "Get a list of vxlan configurations",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "vxlanAttr": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/VxlanEntry"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/tunnel/vxlan/{vxlanID}": {
      "delete": {
        "description": "Return a list of existing tunnels of a type. If there're no tunnels to return, empty list will be returned.",
        "summary": "Delete a one of vxlan configuration",
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "vxlan id (24-bit). Allows to remove routes with defined vnid only. Applicable for routes with nexthop_type 'vxlan-tunnel'. Otherwise '400' error will be returned",
            "name": "vxlanID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/tunnel/vxlan/{vxlanID}/peer": {
      "post": {
        "description": "Return a list of existing tunnels of a type. If there're no tunnels to return, empty list will be returned.",
        "summary": "Add a one of vxlan remote(peer) ip address configuration",
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "vxlan id (24-bit). Allows to remove routes with defined vnid only. Applicable for routes with nexthop_type 'vxlan-tunnel'. Otherwise '400' error will be returned",
            "name": "vxlanID",
            "in": "path",
            "required": true
          },
          {
            "description": "attributes for vxlan Peer interface",
            "name": "attr",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VxlanPeerEntry"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/VxlanPeerEntry"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/tunnel/vxlan/{vxlanID}/peer/{PeerIP}": {
      "delete": {
        "description": "Return a list of existing tunnels of a type. If there're no tunnels to return, empty list will be returned.",
        "summary": "Remove a one of vxlan remote(peer) ip address configuration",
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "vxlan id (24-bit). Allows to remove routes with defined vnid only. Applicable for routes with nexthop_type 'vxlan-tunnel'. Otherwise '400' error will be returned",
            "name": "vxlanID",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "attributes for vxlan Peer IP address",
            "name": "PeerIP",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/VxlanEntry"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/vlan": {
      "post": {
        "description": "Create vlan interface in the device",
        "summary": "Create vlan interface in the device",
        "parameters": [
          {
            "description": "Attributes for Vlan Interface",
            "name": "attr",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VlanBridgeEntry"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Capacity insufficient",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict. VLAN already exists OR dependency VRF/VNET not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/vlan/all": {
      "get": {
        "description": "Get vlan in the device",
        "summary": "Get vlan in the device",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "vlanAttr": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/VlanGetEntry"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/vlan/{vlan_id}": {
      "delete": {
        "description": "Delete vlan in the device",
        "summary": "Delete vlan in the device",
        "parameters": [
          {
            "type": "integer",
            "description": "Attributes IPv4 Address in the device",
            "name": "vlan_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Capacity insufficient",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict. VLAN already exists OR dependency VRF/VNET not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/vlan/{vlan_id}/member": {
      "post": {
        "description": "Add a member to interface Vlan{vlan_id}. If the vlan interface does not exist on LoxiLB it returns a '404' error. If such a member is already present on this Vlan interface the API returns '409' sub-code 0. If the vlan_id passed is less than 2 or greater than 4094 the API will respond with error '400'. If attr with tagging mode is provided it will be honored in config, if not, the default tagging mode will be set to 'untagged'. Vlan members may be tagged or untagged, but, the Vlan member port may be untagged in only one Vlan interface, deviations from this will cause the API to return '409' sub-code 0.",
        "summary": "Add a physical port to a vlan interface",
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "12 bit vlan_id",
            "name": "vlan_id",
            "in": "path",
            "required": true
          },
          {
            "description": "Attributes for Vlan Interface",
            "name": "attr",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VlanMemberEntry"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Capacity insufficient",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Vlan interface is not defined",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict. VLAN member already exists on this VLAN interface OR Vlan member is being added to 2nd Vlan inteface as an untagged member.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/vlan/{vlan_id}/member/{if_name}/tagged/{tagged}": {
      "delete": {
        "description": "Remove a vlan member from a vlan interface which is defined by vlan_id. If the Vlan interface does not exist on LoxiLB OR a vlan member 'if_name' is not present on the interface the API will return '404'. If the vlan_id passed is less than 2 or greater than 4094 the API will respond with error '400'.",
        "summary": "Remove a vlan member from a vlan interface",
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "12 bit vlan_id",
            "name": "vlan_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Physical port name",
            "name": "if_name",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "description": "Tagged status",
            "name": "tagged",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Vlan interface is not defined/Vlan member is not found on this Vlan interface",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/log-archives": {
      "get": {
        "description": "Retrieve a list of all rotated log archive files available for download.",
        "summary": "List available log archives",
        "responses": {
          "200": {
            "description": "List of log archive files",
            "schema": {
              "$ref": "#/definitions/LogArchives"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/log-archives/{filename}": {
      "get": {
        "description": "Download a log archive file by its name.",
        "summary": "Download a specific log archive",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the log archive file to download.",
            "name": "filename",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Log archive file download",
            "schema": {
              "type": "file"
            }
          },
          "400": {
            "description": "Missing or invalid filename",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "File not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/logs": {
      "get": {
        "description": "Fetch the latest logs from the system with optional filtering by number of lines, log level, or keyword.",
        "summary": "Fetch logs with optional filtering",
        "parameters": [
          {
            "type": "string",
            "description": "Number of log lines to fetch (default is 100).",
            "name": "lines",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filter logs by level (e.g., INFO, ERROR, DEBUG).",
            "name": "level",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filter logs containing a specific keyword or phrase.",
            "name": "keyword",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Logs fetched successfully",
            "schema": {
              "$ref": "#/definitions/Logs"
            }
          },
          "400": {
            "description": "Invalid query parameters",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/meta": {
      "get": {
        "security": [],
        "description": "Returns metadata about required fields for each POST API.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Metadata"
        ],
        "summary": "Get metadata for all POST APIs",
        "operationId": "getMeta",
        "responses": {
          "200": {
            "description": "Successfully retrieved metadata",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/metrics": {
      "get": {
        "summary": "Scrape metrics from the cache",
        "responses": {
          "200": {
            "description": "Metrics in prometheus text format",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/metrics/epdisttraffic": {
      "get": {
        "description": "Get metrics related to endpoint distribution traffic per service. The additionalProp is service name.",
        "summary": "Get endpoint distribution traffic metrics",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/EpDistTrafficMetrics"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/metrics/errorcount": {
      "get": {
        "description": "Get metrics related to error counts.",
        "summary": "Get error count metrics",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ErrorCountMetrics"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/metrics/flowcount": {
      "get": {
        "description": "Get metrics related to flow counts.",
        "summary": "Get flow count metrics",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FlowCountMetrics"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/metrics/fwdrops": {
      "get": {
        "description": "Get metrics related to firewall drops.",
        "summary": "Get firewall drops metrics",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FwDropsMetrics"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/metrics/hostcount": {
      "get": {
        "description": "Get metrics related to host counts.",
        "summary": "Get host count metrics",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/HostCountMetrics"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/metrics/lbprocessedtraffic": {
      "get": {
        "description": "Get metrics related to load balancer processed traffic.",
        "summary": "Get load balancer processed traffic metrics",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/LbProcessedTrafficMetrics"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/metrics/lbrulecount": {
      "get": {
        "description": "Get metrics related to load balancer rule counts.",
        "summary": "Get load balancer rule count metrics",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/LbRuleCountMetrics"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/metrics/newflowcount": {
      "get": {
        "description": "Get metrics related to new flow counts.",
        "summary": "Get new flow count metrics",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/NewFlowCountMetrics"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/metrics/processedtraffic": {
      "get": {
        "description": "Get metrics related to processed traffic.",
        "summary": "Get processed traffic metrics",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ProcessedTrafficMetrics"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/metrics/reqcountperclient": {
      "get": {
        "description": "Get metrics related to request counts per client. The additionalProp is client IP address.",
        "summary": "Get request count per client metrics",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ReqCountPerClientMetrics"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/metrics/requestcount": {
      "get": {
        "description": "Get metrics related to request counts.",
        "summary": "Get request count metrics",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RequestCountMetrics"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/metrics/servicedisttraffic": {
      "get": {
        "description": "Get metrics related to service distribution traffic. The additionalProp is service name.",
        "summary": "Get service distribution traffic metrics",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ServiceDistTrafficMetrics"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/nodegraph/all": {
      "get": {
        "description": "Retrieve a list of all nodes and edges in the current topology.",
        "summary": "List current topology",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/NodeGraphShcmea"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/nodegraph/{service}": {
      "get": {
        "description": "Retrieve a list of all nodes and edges in the current topology for a specific service.",
        "summary": "List current topology for a specific service",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the service to filter the topology by.",
            "name": "service",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/NodeGraphShcmea"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/oauth/{provider}": {
      "get": {
        "security": [],
        "description": "Initiates the OAuth login flow for the specified provider.",
        "tags": [
          "auth"
        ],
        "summary": "OAuth login",
        "parameters": [
          {
            "type": "string",
            "description": "OAuth provider",
            "name": "provider",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "302": {
            "description": "Found",
            "schema": {
              "$ref": "#/definitions/OauthMessageResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/OauthErrorResponse"
            }
          }
        }
      }
    },
    "/oauth/{provider}/callback": {
      "get": {
        "security": [],
        "description": "Handles the OAuth callback flow for the specified provider.",
        "tags": [
          "auth"
        ],
        "summary": "OAuth callback",
        "parameters": [
          {
            "type": "string",
            "description": "OAuth provider",
            "name": "provider",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "OAuth code",
            "name": "code",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "OAuth state",
            "name": "state",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/OauthLoginResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/OauthErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/OauthErrorResponse"
            }
          }
        }
      }
    },
    "/oauth/{provider}/token": {
      "get": {
        "security": [],
        "description": "Handles the OAuth token refresh workflow for the specified provider.",
        "tags": [
          "auth"
        ],
        "summary": "OAuth callback",
        "parameters": [
          {
            "type": "string",
            "description": "OAuth provider",
            "name": "provider",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "OAuth access token",
            "name": "token",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "OAuth refresh token",
            "name": "refreshtoken",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/OauthTokenResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/OauthErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/OauthErrorResponse"
            }
          }
        }
      }
    },
    "/status/device": {
      "get": {
        "description": "Get a basic info (linux command \"uptime, hostnamectl\") in the device or system.",
        "summary": "Get a basic info in the device",
        "responses": {
          "200": {
            "description": "Device unique informations",
            "schema": {
              "$ref": "#/definitions/DeviceInfoEntry"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/status/filesystem": {
      "get": {
        "description": "Get a File system infomation (linux command \"df\") in the device or system.",
        "summary": "Get a File System info in the device",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "filesystemAttr": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/FileSystemInfoEntry"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/status/process": {
      "get": {
        "description": "Get a process based on high usage CPU(linux command \"top\") in the device or system.",
        "summary": "Get a process based on CPU usage info in the device",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "processAttr": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ProcessInfoEntry"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/version": {
      "get": {
        "security": [],
        "description": "Get version information",
        "summary": "Get version information in the device",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/VersionGetEntry"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintenance mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "BGPApplyPolicyToNeighborMod": {
      "type": "object",
      "required": [
        "ipAddress",
        "policyType",
        "routeAction"
      ],
      "properties": {
        "ipAddress": {
          "description": "BGP Neighbor IP address",
          "type": "string"
        },
        "policies": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "policyType": {
          "type": "string",
          "enum": [
            "import",
            "export"
          ]
        },
        "routeAction": {
          "type": "string",
          "enum": [
            "accept",
            "reject"
          ]
        }
      }
    },
    "BGPGlobalConfig": {
      "type": "object",
      "required": [
        "routerId",
        "localAs"
      ],
      "properties": {
        "SetNextHopSelf": {
          "description": "Adds policy to set next hop as self, if enabled",
          "type": "boolean"
        },
        "listenPort": {
          "description": "Listen port (default 179)",
          "type": "integer"
        },
        "localAs": {
          "description": "Local AS number",
          "type": "integer"
        },
        "routerId": {
          "description": "BGP Router ID",
          "type": "string"
        }
      }
    },
    "BGPNeigh": {
      "type": "object",
      "required": [
        "ipAddress",
        "remoteAs"
      ],
      "properties": {
        "ipAddress": {
          "description": "BGP Neighbor IP address",
          "type": "string"
        },
        "remoteAs": {
          "description": "Remote AS number",
          "type": "integer"
        },
        "remotePort": {
          "description": "Remote Connect Port (default 179)",
          "type": "integer"
        },
        "setMultiHop": {
          "description": "Enable multi-hop peering (if needed)",
          "type": "boolean"
        }
      }
    },
    "BGPNeighGetEntry": {
      "type": "object",
      "properties": {
        "ipAddress": {
          "description": "BGP Neighbor IP address",
          "type": "string"
        },
        "remoteAs": {
          "description": "Remote AS number",
          "type": "integer"
        },
        "state": {
          "description": "Current state",
          "type": "string"
        },
        "updowntime": {
          "description": "Current uptime",
          "type": "string"
        }
      }
    },
    "BGPPolicyDefinedSetGetEntry": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "list": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "name": {
          "description": "BGP Defined set Entries",
          "type": "string"
        },
        "prefixList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BGPPolicyPrefix"
          }
        }
      }
    },
    "BGPPolicyDefinedSetsMod": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "List": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "name": {
          "description": "BGP Neighbor IP address",
          "type": "string"
        },
        "prefixList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BGPPolicyPrefix"
          }
        }
      }
    },
    "BGPPolicyDefinitionsMod": {
      "type": "object",
      "properties": {
        "name": {
          "description": "BGP Neighbor IP address",
          "type": "string"
        },
        "statements": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BGPPolicyDefinitionsStatement"
          }
        }
      }
    },
    "BGPPolicyDefinitionsStatement": {
      "type": "object",
      "properties": {
        "actions": {
          "type": "object",
          "properties": {
            "bgpActions": {
              "type": "object",
              "properties": {
                "setAsPathPrepend": {
                  "type": "object",
                  "properties": {
                    "as": {
                      "type": "string"
                    },
                    "repeatN": {
                      "type": "integer"
                    }
                  }
                },
                "setCommunity": {
                  "type": "object",
                  "properties": {
                    "options": {
                      "type": "string"
                    },
                    "setCommunityMethod": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                },
                "setExtCommunity": {
                  "type": "object",
                  "properties": {
                    "options": {
                      "type": "string"
                    },
                    "setCommunityMethod": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                },
                "setLargeCommunity": {
                  "type": "object",
                  "properties": {
                    "options": {
                      "type": "string"
                    },
                    "setCommunityMethod": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                },
                "setLocalPerf": {
                  "type": "integer"
                },
                "setMed": {
                  "type": "string"
                },
                "setNextHop": {
                  "type": "string"
                }
              }
            },
            "routeDisposition": {
              "type": "string"
            }
          }
        },
        "conditions": {
          "type": "object",
          "properties": {
            "bgpConditions": {
              "type": "object",
              "properties": {
                "afiSafiIn": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "asPathLength": {
                  "type": "object",
                  "properties": {
                    "operator": {
                      "type": "string"
                    },
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                "matchAsPathSet": {
                  "type": "object",
                  "properties": {
                    "asPathSet": {
                      "type": "string"
                    },
                    "matchSetOptions": {
                      "type": "string"
                    }
                  }
                },
                "matchCommunitySet": {
                  "type": "object",
                  "properties": {
                    "communitySet": {
                      "type": "string"
                    },
                    "matchSetOptions": {
                      "type": "string"
                    }
                  }
                },
                "matchExtCommunitySet": {
                  "type": "object",
                  "properties": {
                    "communitySet": {
                      "type": "string"
                    },
                    "matchSetOptions": {
                      "type": "string"
                    }
                  }
                },
                "matchLargeCommunitySet": {
                  "type": "object",
                  "properties": {
                    "communitySet": {
                      "type": "string"
                    },
                    "matchSetOptions": {
                      "type": "string"
                    }
                  }
                },
                "nextHopInList": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "routeType": {
                  "type": "string"
                },
                "rpki": {
                  "type": "string"
                }
              }
            },
            "matchNeighborSet": {
              "type": "object",
              "properties": {
                "matchSetOption": {
                  "type": "string"
                },
                "neighborSet": {
                  "type": "string"
                }
              }
            },
            "matchPrefixSet": {
              "type": "object",
              "properties": {
                "matchSetOption": {
                  "type": "string"
                },
                "prefixSet": {
                  "type": "string"
                }
              }
            }
          }
        },
        "name": {
          "type": "string"
        }
      }
    },
    "BGPPolicyDefinitionsStatementActions": {
      "type": "object",
      "properties": {
        "bgpActions": {
          "type": "object",
          "properties": {
            "setAsPathPrepend": {
              "type": "object",
              "properties": {
                "as": {
                  "type": "string"
                },
                "repeatN": {
                  "type": "integer"
                }
              }
            },
            "setCommunity": {
              "type": "object",
              "properties": {
                "options": {
                  "type": "string"
                },
                "setCommunityMethod": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            },
            "setExtCommunity": {
              "type": "object",
              "properties": {
                "options": {
                  "type": "string"
                },
                "setCommunityMethod": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            },
            "setLargeCommunity": {
              "type": "object",
              "properties": {
                "options": {
                  "type": "string"
                },
                "setCommunityMethod": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            },
            "setLocalPerf": {
              "type": "integer"
            },
            "setMed": {
              "type": "string"
            },
            "setNextHop": {
              "type": "string"
            }
          }
        },
        "routeDisposition": {
          "type": "string"
        }
      }
    },
    "BGPPolicyDefinitionsStatementActionsBgpActions": {
      "type": "object",
      "properties": {
        "setAsPathPrepend": {
          "type": "object",
          "properties": {
            "as": {
              "type": "string"
            },
            "repeatN": {
              "type": "integer"
            }
          }
        },
        "setCommunity": {
          "type": "object",
          "properties": {
            "options": {
              "type": "string"
            },
            "setCommunityMethod": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "setExtCommunity": {
          "type": "object",
          "properties": {
            "options": {
              "type": "string"
            },
            "setCommunityMethod": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "setLargeCommunity": {
          "type": "object",
          "properties": {
            "options": {
              "type": "string"
            },
            "setCommunityMethod": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "setLocalPerf": {
          "type": "integer"
        },
        "setMed": {
          "type": "string"
        },
        "setNextHop": {
          "type": "string"
        }
      }
    },
    "BGPPolicyDefinitionsStatementActionsBgpActionsSetAsPathPrepend": {
      "type": "object",
      "properties": {
        "as": {
          "type": "string"
        },
        "repeatN": {
          "type": "integer"
        }
      }
    },
    "BGPPolicyDefinitionsStatementActionsBgpActionsSetCommunity": {
      "type": "object",
      "properties": {
        "options": {
          "type": "string"
        },
        "setCommunityMethod": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "BGPPolicyDefinitionsStatementActionsBgpActionsSetExtCommunity": {
      "type": "object",
      "properties": {
        "options": {
          "type": "string"
        },
        "setCommunityMethod": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "BGPPolicyDefinitionsStatementActionsBgpActionsSetLargeCommunity": {
      "type": "object",
      "properties": {
        "options": {
          "type": "string"
        },
        "setCommunityMethod": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "BGPPolicyDefinitionsStatementConditions": {
      "type": "object",
      "properties": {
        "bgpConditions": {
          "type": "object",
          "properties": {
            "afiSafiIn": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "asPathLength": {
              "type": "object",
              "properties": {
                "operator": {
                  "type": "string"
                },
                "value": {
                  "type": "integer"
                }
              }
            },
            "matchAsPathSet": {
              "type": "object",
              "properties": {
                "asPathSet": {
                  "type": "string"
                },
                "matchSetOptions": {
                  "type": "string"
                }
              }
            },
            "matchCommunitySet": {
              "type": "object",
              "properties": {
                "communitySet": {
                  "type": "string"
                },
                "matchSetOptions": {
                  "type": "string"
                }
              }
            },
            "matchExtCommunitySet": {
              "type": "object",
              "properties": {
                "communitySet": {
                  "type": "string"
                },
                "matchSetOptions": {
                  "type": "string"
                }
              }
            },
            "matchLargeCommunitySet": {
              "type": "object",
              "properties": {
                "communitySet": {
                  "type": "string"
                },
                "matchSetOptions": {
                  "type": "string"
                }
              }
            },
            "nextHopInList": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "routeType": {
              "type": "string"
            },
            "rpki": {
              "type": "string"
            }
          }
        },
        "matchNeighborSet": {
          "type": "object",
          "properties": {
            "matchSetOption": {
              "type": "string"
            },
            "neighborSet": {
              "type": "string"
            }
          }
        },
        "matchPrefixSet": {
          "type": "object",
          "properties": {
            "matchSetOption": {
              "type": "string"
            },
            "prefixSet": {
              "type": "string"
            }
          }
        }
      }
    },
    "BGPPolicyDefinitionsStatementConditionsBgpConditions": {
      "type": "object",
      "properties": {
        "afiSafiIn": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "asPathLength": {
          "type": "object",
          "properties": {
            "operator": {
              "type": "string"
            },
            "value": {
              "type": "integer"
            }
          }
        },
        "matchAsPathSet": {
          "type": "object",
          "properties": {
            "asPathSet": {
              "type": "string"
            },
            "matchSetOptions": {
              "type": "string"
            }
          }
        },
        "matchCommunitySet": {
          "type": "object",
          "properties": {
            "communitySet": {
              "type": "string"
            },
            "matchSetOptions": {
              "type": "string"
            }
          }
        },
        "matchExtCommunitySet": {
          "type": "object",
          "properties": {
            "communitySet": {
              "type": "string"
            },
            "matchSetOptions": {
              "type": "string"
            }
          }
        },
        "matchLargeCommunitySet": {
          "type": "object",
          "properties": {
            "communitySet": {
              "type": "string"
            },
            "matchSetOptions": {
              "type": "string"
            }
          }
        },
        "nextHopInList": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "routeType": {
          "type": "string"
        },
        "rpki": {
          "type": "string"
        }
      }
    },
    "BGPPolicyDefinitionsStatementConditionsBgpConditionsAsPathLength": {
      "type": "object",
      "properties": {
        "operator": {
          "type": "string"
        },
        "value": {
          "type": "integer"
        }
      }
    },
    "BGPPolicyDefinitionsStatementConditionsBgpConditionsMatchAsPathSet": {
      "type": "object",
      "properties": {
        "asPathSet": {
          "type": "string"
        },
        "matchSetOptions": {
          "type": "string"
        }
      }
    },
    "BGPPolicyDefinitionsStatementConditionsBgpConditionsMatchCommunitySet": {
      "type": "object",
      "properties": {
        "communitySet": {
          "type": "string"
        },
        "matchSetOptions": {
          "type": "string"
        }
      }
    },
    "BGPPolicyDefinitionsStatementConditionsBgpConditionsMatchExtCommunitySet": {
      "type": "object",
      "properties": {
        "communitySet": {
          "type": "string"
        },
        "matchSetOptions": {
          "type": "string"
        }
      }
    },
    "BGPPolicyDefinitionsStatementConditionsBgpConditionsMatchLargeCommunitySet": {
      "type": "object",
      "properties": {
        "communitySet": {
          "type": "string"
        },
        "matchSetOptions": {
          "type": "string"
        }
      }
    },
    "BGPPolicyDefinitionsStatementConditionsMatchNeighborSet": {
      "type": "object",
      "properties": {
        "matchSetOption": {
          "type": "string"
        },
        "neighborSet": {
          "type": "string"
        }
      }
    },
    "BGPPolicyDefinitionsStatementConditionsMatchPrefixSet": {
      "type": "object",
      "properties": {
        "matchSetOption": {
          "type": "string"
        },
        "prefixSet": {
          "type": "string"
        }
      }
    },
    "BGPPolicyPrefix": {
      "type": "object",
      "properties": {
        "ipPrefix": {
          "description": "BGP Neighbor IP address",
          "type": "string"
        },
        "masklengthRange": {
          "description": "Remote AS number",
          "type": "string"
        }
      }
    },
    "BfdEntry": {
      "type": "object",
      "properties": {
        "instance": {
          "description": "Instance name running BFD session",
          "type": "string"
        },
        "interval": {
          "description": "Tx interval between BFD packets(in microseconds)",
          "type": "integer",
          "format": "uint64"
        },
        "remoteIp": {
          "description": "Remote IP",
          "type": "string"
        },
        "retryCount": {
          "description": "Retry Count to detect failure",
          "type": "integer",
          "format": "uint8"
        },
        "sourceIp": {
          "description": "Remote IP",
          "type": "string"
        }
      }
    },
    "BfdGetEntry": {
      "type": "object",
      "properties": {
        "instance": {
          "description": "Instance name",
          "type": "string"
        },
        "interval": {
          "description": "Tx interval between BFD packets(in microseconds)",
          "type": "integer",
          "format": "uint64"
        },
        "port": {
          "description": "port number to be used for BFD session",
          "type": "integer",
          "format": "uint16"
        },
        "remoteIp": {
          "description": "Remote IP",
          "type": "string"
        },
        "retryCount": {
          "description": "Retry Count to detect failure",
          "type": "integer",
          "format": "uint8"
        },
        "sourceIP": {
          "description": "Source IP to be used for BFD session",
          "type": "string"
        },
        "state": {
          "description": "Current state for BFD session",
          "type": "string"
        }
      }
    },
    "CIStatusEntry": {
      "type": "object",
      "properties": {
        "instance": {
          "description": "Instance name",
          "type": "string"
        },
        "state": {
          "description": "Current Cluster Instance State",
          "type": "string"
        },
        "vip": {
          "description": "Instance Virtual IP address",
          "type": "string"
        }
      }
    },
    "CIStatusGetEntry": {
      "type": "object",
      "required": [
        "sync"
      ],
      "properties": {
        "instance": {
          "description": "Instance name",
          "type": "string"
        },
        "state": {
          "description": "Current Cluster Instance State",
          "type": "string"
        },
        "sync": {
          "description": "Sync - sync state",
          "type": "integer"
        },
        "vip": {
          "description": "Instance Virtual IP address",
          "type": "string"
        }
      }
    },
    "ConntrackEntry": {
      "type": "object",
      "properties": {
        "bytes": {
          "description": "Packet bytes of the conntrack",
          "type": "integer"
        },
        "conntrackAct": {
          "description": "value for Conntrack Act",
          "type": "string"
        },
        "conntrackState": {
          "description": "value for Conntrack state",
          "type": "string"
        },
        "destinationIP": {
          "description": "IP address for externel access",
          "type": "string"
        },
        "destinationPort": {
          "description": "port number for the access",
          "type": "integer"
        },
        "ident": {
          "description": "value for Conntrack ident",
          "type": "string"
        },
        "packets": {
          "description": "Packet counts of the conntrack",
          "type": "integer"
        },
        "protocol": {
          "description": "value for access protocol",
          "type": "string"
        },
        "servName": {
          "description": "Connection's Service Name",
          "type": "string"
        },
        "sourceIP": {
          "description": "IP address for externel access",
          "type": "string"
        },
        "sourcePort": {
          "description": "port number for the access",
          "type": "integer"
        }
      }
    },
    "CorsEntry": {
      "type": "object",
      "properties": {
        "cors": {
          "description": "Interface device name",
          "type": "array",
          "items": {
            "description": "cors list",
            "type": "string"
          }
        }
      }
    },
    "DeviceInfoEntry": {
      "type": "object",
      "properties": {
        "OS": {
          "description": "Operation System of the device",
          "type": "string"
        },
        "architecture": {
          "description": "CPU architecture of the device",
          "type": "string"
        },
        "bootID": {
          "description": "Boot ID in the linux",
          "type": "string"
        },
        "hostName": {
          "description": "Device host name",
          "type": "string"
        },
        "kernel": {
          "description": "Kernel version of the device",
          "type": "string"
        },
        "machineID": {
          "description": "Device machine ID",
          "type": "string"
        },
        "uptime": {
          "description": "system uptime",
          "type": "string"
        }
      }
    },
    "Edge": {
      "type": "object",
      "properties": {
        "color": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "mainstat": {
          "type": "number"
        },
        "secondarystat": {
          "type": "number"
        },
        "source": {
          "type": "string"
        },
        "target": {
          "type": "string"
        },
        "thickness": {
          "type": "integer"
        }
      }
    },
    "EndPoint": {
      "type": "object",
      "required": [
        "hostName"
      ],
      "properties": {
        "hostName": {
          "description": "Host name in CIDR",
          "type": "string"
        },
        "inactiveReTries": {
          "description": "Number of inactive retries",
          "type": "integer"
        },
        "name": {
          "description": "Endpoint Identifier",
          "type": "string"
        },
        "probeDuration": {
          "description": "How frequently to probe in seconds",
          "type": "integer"
        },
        "probePort": {
          "description": "The l4port to probe on",
          "type": "integer"
        },
        "probeReq": {
          "description": "URI for http/https probes",
          "type": "string"
        },
        "probeResp": {
          "description": "Response for http/https probes",
          "type": "string"
        },
        "probeType": {
          "description": "Type of probe used",
          "type": "string",
          "enum": [
            "tcp",
            "udp",
            "sctp",
            "ping",
            "http",
            "https",
            "none"
          ]
        }
      }
    },
    "EndPointGetEntry": {
      "type": "object",
      "properties": {
        "avgDelay": {
          "description": "Average delay seen for endpoint",
          "type": "string"
        },
        "currState": {
          "description": "Current state of this endpoint",
          "type": "string"
        },
        "hostName": {
          "description": "Host name",
          "type": "string"
        },
        "inactiveReTries": {
          "description": "Number of inactive retries",
          "type": "integer"
        },
        "maxDelay": {
          "description": "Maximum delay seen for endpoint",
          "type": "string"
        },
        "minDelay": {
          "description": "Minimum delay seen for endpoint",
          "type": "string"
        },
        "name": {
          "description": "Endpoint Identifier",
          "type": "string"
        },
        "probeDuration": {
          "description": "How frequently to probe in seconds",
          "type": "integer"
        },
        "probePort": {
          "description": "The l4port to probe on",
          "type": "integer"
        },
        "probeReq": {
          "description": "URI for http/https probes",
          "type": "string"
        },
        "probeResp": {
          "description": "Response for http/https probes",
          "type": "string"
        },
        "probeType": {
          "description": "Type of probe used",
          "type": "string"
        }
      }
    },
    "EndPointHostState": {
      "type": "object",
      "properties": {
        "epPort": {
          "description": "The end-point port (0 if not applicable)",
          "type": "integer"
        },
        "epProto": {
          "description": "The end-point prototype (tcp,udp,sctp,icmp,http(s), empty if not applicable)",
          "type": "string"
        },
        "hostName": {
          "description": "Host name in CIDR",
          "type": "string"
        },
        "state": {
          "description": "Host state string (\"green\", \"yellow\", \"red\" )",
          "type": "string"
        }
      }
    },
    "EpDistTrafficMetrics": {
      "type": "object",
      "additionalProperties": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/EpDistTrafficMetricsItems0"
        }
      }
    },
    "EpDistTrafficMetricsItems0": {
      "type": "object",
      "properties": {
        "dip": {
          "type": "string"
        },
        "ratio": {
          "type": "number"
        },
        "value": {
          "type": "number"
        }
      }
    },
    "Error": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "details": {
          "type": "string"
        },
        "fields": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "message": {
          "type": "string"
        },
        "result": {
          "type": "string"
        },
        "sub-code": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ErrorCountMetrics": {
      "type": "object",
      "properties": {
        "total_errors": {
          "type": "number"
        },
        "total_errors_per_service": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ErrorCountMetricsTotalErrorsPerServiceItems0"
          }
        }
      }
    },
    "ErrorCountMetricsTotalErrorsPerServiceItems0": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "type": "number"
        }
      }
    },
    "FDBEntry": {
      "type": "object",
      "required": [
        "dev",
        "macAddress"
      ],
      "properties": {
        "dev": {
          "description": "Name of the interface device to which you want to modify FDB",
          "type": "string"
        },
        "macAddress": {
          "description": "MAC address to FDB",
          "type": "string"
        }
      }
    },
    "FileSystemInfoEntry": {
      "type": "object",
      "properties": {
        "avail": {
          "description": "size of remain the disk",
          "type": "string"
        },
        "fileSystem": {
          "description": "File system name mounted on this device",
          "type": "string"
        },
        "mountedOn": {
          "description": "path of the mounted on",
          "type": "string"
        },
        "size": {
          "description": "Boot ID in the linux",
          "type": "string"
        },
        "type": {
          "description": "File type (ex. nfs, ext4..)",
          "type": "string"
        },
        "usePercent": {
          "description": "usage per total size",
          "type": "string"
        },
        "used": {
          "description": "size of used the disk",
          "type": "string"
        }
      }
    },
    "FirewallEntry": {
      "type": "object",
      "required": [
        "ruleArguments",
        "opts"
      ],
      "properties": {
        "opts": {
          "$ref": "#/definitions/FirewallOptionEntry"
        },
        "ruleArguments": {
          "$ref": "#/definitions/FirewallRuleEntry"
        }
      }
    },
    "FirewallOptionEntry": {
      "type": "object",
      "properties": {
        "allow": {
          "description": "Allow any matching rule",
          "type": "boolean"
        },
        "counter": {
          "description": "traffic counters",
          "type": "string"
        },
        "doSnat": {
          "description": "Do SNAT on matching rule",
          "type": "boolean"
        },
        "drop": {
          "description": "Drop any matching rule",
          "type": "boolean"
        },
        "fwMark": {
          "description": "Set a fwmark for any matching rule",
          "type": "integer"
        },
        "onDefault": {
          "description": "Trigger only on default cases",
          "type": "boolean"
        },
        "record": {
          "description": "Record or dump for matching rule",
          "type": "boolean"
        },
        "redirect": {
          "description": "Redirect any matching rule",
          "type": "boolean"
        },
        "redirectPortName": {
          "description": "Redirect any matching rule",
          "type": "string"
        },
        "toIP": {
          "description": "Modify to given IP in CIDR notation",
          "type": "string"
        },
        "toPort": {
          "description": "Modify to given Port (Zero if port is not to be modified)",
          "type": "integer"
        },
        "trap": {
          "description": "Trap anything matching rule",
          "type": "boolean"
        }
      }
    },
    "FirewallRuleEntry": {
      "type": "object",
      "properties": {
        "destinationIP": {
          "description": "Destination IP in CIDR notation",
          "type": "string"
        },
        "maxDestinationPort": {
          "description": "Maximum  destination port range",
          "type": "integer"
        },
        "maxSourcePort": {
          "description": "Maximum  source port range",
          "type": "integer"
        },
        "minDestinationPort": {
          "description": "Minimum destination port range",
          "type": "integer"
        },
        "minSourcePort": {
          "description": "Minimum source port range",
          "type": "integer"
        },
        "portName": {
          "description": "the incoming port",
          "type": "string"
        },
        "preference": {
          "description": "User preference for ordering",
          "type": "integer"
        },
        "protocol": {
          "description": "the protocol",
          "type": "integer"
        },
        "sourceIP": {
          "description": "Source IP in CIDR notation",
          "type": "string"
        }
      }
    },
    "FlowCountMetrics": {
      "type": "object",
      "properties": {
        "active_conntrack_count": {
          "type": "number"
        },
        "active_flow_count_sctp": {
          "type": "number"
        },
        "active_flow_count_tcp": {
          "type": "number"
        },
        "active_flow_count_udp": {
          "type": "number"
        },
        "inactive_flow_count": {
          "type": "number"
        }
      }
    },
    "FwDropsMetrics": {
      "type": "object",
      "properties": {
        "total_fw_drops": {
          "type": "number"
        },
        "total_fw_drops_per_rule": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FwDropsMetricsTotalFwDropsPerRuleItems0"
          }
        }
      }
    },
    "FwDropsMetricsTotalFwDropsPerRuleItems0": {
      "type": "object",
      "properties": {
        "fw_rule": {
          "type": "string"
        },
        "value": {
          "type": "number"
        }
      }
    },
    "HealthCheckResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string"
        }
      }
    },
    "HostCountMetrics": {
      "type": "object",
      "properties": {
        "healthy_host_count": {
          "type": "number"
        },
        "unhealthy_host_count": {
          "type": "number"
        }
      }
    },
    "IPv4AddressEntry": {
      "type": "object",
      "required": [
        "dev",
        "ipAddress"
      ],
      "properties": {
        "dev": {
          "description": "Name of the interface device to which you want to modify the IP address",
          "type": "string"
        },
        "ipAddress": {
          "description": "IP address to modify.",
          "type": "string"
        }
      }
    },
    "IPv4AddressGetEntry": {
      "type": "object",
      "required": [
        "sync"
      ],
      "properties": {
        "dev": {
          "description": "Name of the interface device to which you want to modify the IP address",
          "type": "string"
        },
        "ipAddress": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "sync": {
          "description": "Sync - sync state",
          "type": "integer"
        }
      }
    },
    "K8sConntrackEntry": {
      "type": "object",
      "properties": {
        "bytes": {
          "description": "Packet bytes of the conntrack",
          "type": "integer"
        },
        "conntrackAct": {
          "description": "value for Conntrack Act",
          "type": "string"
        },
        "conntrackState": {
          "description": "value for Conntrack state",
          "type": "string"
        },
        "destinationIP": {
          "description": "IP address for externel access",
          "type": "string"
        },
        "destinationNamespace": {
          "description": "Namespace of the destination",
          "type": "string"
        },
        "destinationNode": {
          "description": "Node of the destination",
          "type": "string"
        },
        "destinationPod": {
          "description": "Pod name of the destination",
          "type": "string"
        },
        "destinationPort": {
          "description": "port number for the access",
          "type": "integer"
        },
        "ident": {
          "description": "value for Conntrack ident",
          "type": "string"
        },
        "k8sservName": {
          "description": "K8s service name",
          "type": "string"
        },
        "packets": {
          "description": "Packet counts of the conntrack",
          "type": "integer"
        },
        "protocol": {
          "description": "value for access protocol",
          "type": "string"
        },
        "servName": {
          "description": "Connection's Service Name",
          "type": "string"
        },
        "sourceIP": {
          "description": "IP address for externel access",
          "type": "string"
        },
        "sourceNamespace": {
          "description": "Namespace of the source",
          "type": "string"
        },
        "sourceNode": {
          "description": "Node of the source",
          "type": "string"
        },
        "sourcePod": {
          "description": "Pod name of the soruce",
          "type": "string"
        },
        "sourcePort": {
          "description": "port number for the access",
          "type": "integer"
        }
      }
    },
    "LbProcessedTrafficMetrics": {
      "type": "object",
      "properties": {
        "lb_rule_interaction_bytes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LbProcessedTrafficMetricsLbRuleInteractionBytesItems0"
          }
        },
        "lb_rule_interaction_packets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LbProcessedTrafficMetricsLbRuleInteractionPacketsItems0"
          }
        }
      }
    },
    "LbProcessedTrafficMetricsLbRuleInteractionBytesItems0": {
      "type": "object",
      "properties": {
        "dip": {
          "type": "string"
        },
        "service": {
          "type": "string"
        },
        "sip": {
          "type": "string"
        },
        "value": {
          "type": "number"
        }
      }
    },
    "LbProcessedTrafficMetricsLbRuleInteractionPacketsItems0": {
      "type": "object",
      "properties": {
        "dip": {
          "type": "string"
        },
        "service": {
          "type": "string"
        },
        "sip": {
          "type": "string"
        },
        "value": {
          "type": "number"
        }
      }
    },
    "LbRuleCountMetrics": {
      "type": "object",
      "properties": {
        "lb_rule_count": {
          "type": "number"
        }
      }
    },
    "LoadbalanceEntry": {
      "type": "object",
      "required": [
        "serviceArguments",
        "endpoints"
      ],
      "properties": {
        "allowedSources": {
          "description": "values of allowed source IP",
          "type": "array",
          "items": {
            "$ref": "#/definitions/LoadbalanceEntryAllowedSourcesItems0"
          }
        },
        "endpoints": {
          "description": "values of End point servers",
          "type": "array",
          "items": {
            "$ref": "#/definitions/LoadbalanceEntryEndpointsItems0"
          }
        },
        "secondaryIPs": {
          "description": "values of Secondary IPs",
          "type": "array",
          "items": {
            "$ref": "#/definitions/LoadbalanceEntrySecondaryIPsItems0"
          }
        },
        "serviceArguments": {
          "type": "object",
          "required": [
            "externalIP",
            "port"
          ],
          "properties": {
            "bgp": {
              "description": "value for BGP enable or not",
              "type": "boolean"
            },
            "block": {
              "description": "block-number if any of this LB entry",
              "type": "integer",
              "format": "uint32"
            },
            "egress": {
              "description": "flag to indicate an egress rule",
              "type": "boolean"
            },
            "externalIP": {
              "description": "IP address for external access",
              "type": "string"
            },
            "host": {
              "description": "Ingress specific host URL path",
              "type": "string"
            },
            "inactiveTimeOut": {
              "description": "value for inactivity timeout (in seconds)",
              "type": "integer",
              "format": "int32"
            },
            "managed": {
              "description": "externally managed rule or not",
              "type": "boolean"
            },
            "mode": {
              "description": "value for NAT mode (0-DNAT,1-onearm, 2-fullnat, 3-dsr, 4-fullproxy, 5-hostonearm, 0-default)",
              "type": "integer",
              "format": "int32",
              "enum": [
                0,
                1,
                2,
                3,
                4,
                5
              ]
            },
            "monitor": {
              "description": "value for monitoring enabled or not",
              "type": "boolean"
            },
            "name": {
              "description": "service name",
              "type": "string"
            },
            "oper": {
              "description": "end-point specific op (0-create, 1-attachEP, 2-detachEP)",
              "type": "integer",
              "format": "int32",
              "enum": [
                0,
                1,
                2
              ]
            },
            "port": {
              "description": "(Min) port number for the access",
              "type": "integer"
            },
            "portMax": {
              "description": "Max port number(range) for the access",
              "type": "integer"
            },
            "privateIP": {
              "description": "private IP (NAT'd) address for external access",
              "type": "string"
            },
            "probeRetries": {
              "description": "value for probe retries",
              "type": "integer",
              "format": "int32"
            },
            "probeTimeout": {
              "description": "value for probe timer (in seconds)",
              "type": "integer",
              "format": "uint32"
            },
            "probeport": {
              "description": "probe port if probetype is tcp/udp/sctp",
              "type": "integer",
              "format": "uint16"
            },
            "probereq": {
              "description": "probe request string",
              "type": "string"
            },
            "proberesp": {
              "description": "probe response string",
              "type": "string"
            },
            "probetype": {
              "description": "probe type for any end-point of this entry",
              "type": "string",
              "enum": [
                "tcp",
                "udp",
                "sctp",
                "http",
                "https",
                "ping",
                "none"
              ]
            },
            "protocol": {
              "description": "value for access protocol",
              "type": "string",
              "enum": [
                "tcp",
                "udp",
                "sctp",
                "icmp"
              ]
            },
            "proxyprotocolv2": {
              "description": "flag to enable proxy protocol v2",
              "type": "boolean"
            },
            "security": {
              "description": "value for Security mode (0-Plain, 1-https, 1-tls, 2-e2ehttps, 0-default)",
              "type": "integer",
              "format": "int32",
              "enum": [
                0,
                1,
                2
              ]
            },
            "sel": {
              "description": "value for load balance algorithim(0-rr, 1-hash, 2-priority, 3-persist, 4-lc, 5-n2, 6-n3, 0-default)",
              "type": "integer",
              "enum": [
                0,
                1,
                2,
                3,
                4,
                5,
                6
              ]
            },
            "snat": {
              "description": "snat rule",
              "type": "boolean"
            }
          }
        }
      }
    },
    "LoadbalanceEntryAllowedSourcesItems0": {
      "properties": {
        "prefix": {
          "description": "IP address for allowed source access",
          "type": "string"
        }
      }
    },
    "LoadbalanceEntryEndpointsItems0": {
      "required": [
        "endpointIP",
        "weight",
        "targetPort"
      ],
      "properties": {
        "counter": {
          "description": "traffic counters of the endpoint",
          "type": "string"
        },
        "endpointIP": {
          "description": "IP address for external access",
          "type": "string"
        },
        "state": {
          "description": "state of the endpoint",
          "type": "string"
        },
        "targetPort": {
          "description": "port number for access service",
          "type": "integer"
        },
        "weight": {
          "description": "Weight for the load balancing",
          "type": "integer"
        }
      }
    },
    "LoadbalanceEntrySecondaryIPsItems0": {
      "properties": {
        "secondaryIP": {
          "description": "IP address for secondary access",
          "type": "string"
        }
      }
    },
    "LoadbalanceEntryServiceArguments": {
      "type": "object",
      "required": [
        "externalIP",
        "port"
      ],
      "properties": {
        "bgp": {
          "description": "value for BGP enable or not",
          "type": "boolean"
        },
        "block": {
          "description": "block-number if any of this LB entry",
          "type": "integer",
          "format": "uint32"
        },
        "egress": {
          "description": "flag to indicate an egress rule",
          "type": "boolean"
        },
        "externalIP": {
          "description": "IP address for external access",
          "type": "string"
        },
        "host": {
          "description": "Ingress specific host URL path",
          "type": "string"
        },
        "inactiveTimeOut": {
          "description": "value for inactivity timeout (in seconds)",
          "type": "integer",
          "format": "int32"
        },
        "managed": {
          "description": "externally managed rule or not",
          "type": "boolean"
        },
        "mode": {
          "description": "value for NAT mode (0-DNAT,1-onearm, 2-fullnat, 3-dsr, 4-fullproxy, 5-hostonearm, 0-default)",
          "type": "integer",
          "format": "int32",
          "enum": [
            0,
            1,
            2,
            3,
            4,
            5
          ]
        },
        "monitor": {
          "description": "value for monitoring enabled or not",
          "type": "boolean"
        },
        "name": {
          "description": "service name",
          "type": "string"
        },
        "oper": {
          "description": "end-point specific op (0-create, 1-attachEP, 2-detachEP)",
          "type": "integer",
          "format": "int32",
          "enum": [
            0,
            1,
            2
          ]
        },
        "port": {
          "description": "(Min) port number for the access",
          "type": "integer"
        },
        "portMax": {
          "description": "Max port number(range) for the access",
          "type": "integer"
        },
        "privateIP": {
          "description": "private IP (NAT'd) address for external access",
          "type": "string"
        },
        "probeRetries": {
          "description": "value for probe retries",
          "type": "integer",
          "format": "int32"
        },
        "probeTimeout": {
          "description": "value for probe timer (in seconds)",
          "type": "integer",
          "format": "uint32"
        },
        "probeport": {
          "description": "probe port if probetype is tcp/udp/sctp",
          "type": "integer",
          "format": "uint16"
        },
        "probereq": {
          "description": "probe request string",
          "type": "string"
        },
        "proberesp": {
          "description": "probe response string",
          "type": "string"
        },
        "probetype": {
          "description": "probe type for any end-point of this entry",
          "type": "string",
          "enum": [
            "tcp",
            "udp",
            "sctp",
            "http",
            "https",
            "ping",
            "none"
          ]
        },
        "protocol": {
          "description": "value for access protocol",
          "type": "string",
          "enum": [
            "tcp",
            "udp",
            "sctp",
            "icmp"
          ]
        },
        "proxyprotocolv2": {
          "description": "flag to enable proxy protocol v2",
          "type": "boolean"
        },
        "security": {
          "description": "value for Security mode (0-Plain, 1-https, 1-tls, 2-e2ehttps, 0-default)",
          "type": "integer",
          "format": "int32",
          "enum": [
            0,
            1,
            2
          ]
        },
        "sel": {
          "description": "value for load balance algorithim(0-rr, 1-hash, 2-priority, 3-persist, 4-lc, 5-n2, 6-n3, 0-default)",
          "type": "integer",
          "enum": [
            0,
            1,
            2,
            3,
            4,
            5,
            6
          ]
        },
        "snat": {
          "description": "snat rule",
          "type": "boolean"
        }
      }
    },
    "LogArchives": {
      "type": "object",
      "properties": {
        "archives": {
          "description": "List of log archive filenames.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "LoginResponse": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string"
        }
      }
    },
    "Logs": {
      "type": "object",
      "properties": {
        "logs": {
          "description": "List of filtered logs.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "MessageResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        }
      }
    },
    "MetricEntity": {
      "type": "object",
      "properties": {
        "name": {
          "description": "Metric Name",
          "type": "string"
        },
        "service": {
          "description": "Load Balancer Service Name",
          "type": "string"
        },
        "value": {
          "description": "Metric Value",
          "type": "integer",
          "format": "uint64"
        }
      }
    },
    "MetricsConfig": {
      "type": "object",
      "required": [
        "prometheus"
      ],
      "properties": {
        "prometheus": {
          "description": "value for prometheus enable or not",
          "type": "boolean"
        }
      }
    },
    "MirrorEntry": {
      "type": "object",
      "required": [
        "mirrorIdent",
        "targetObject"
      ],
      "properties": {
        "mirrorIdent": {
          "description": "Mirror name",
          "type": "string"
        },
        "mirrorInfo": {
          "type": "object",
          "properties": {
            "port": {
              "description": "Port where mirrored traffic needs to be sent",
              "type": "string"
            },
            "remoteIP": {
              "description": "For ERSPAN we may need to send tunnelled mirror traffic",
              "type": "string"
            },
            "sourceIP": {
              "description": "For ERSPAN we may need to send tunnelled mirror traffic",
              "type": "string"
            },
            "tunnelID": {
              "description": "mirror tunnel-id. For ERSPAN we may need to send tunnelled mirror traffic",
              "type": "integer"
            },
            "type": {
              "description": "One of MirrTypeSpan, MirrTypeRspan or MirrTypeErspan(0-MirrTypeSpan, 1-MirrTypeRspan, 2-MirrTypeErspan)",
              "type": "integer",
              "enum": [
                0,
                1,
                2
              ]
            },
            "vlan": {
              "description": "For RSPAN we may need to send tagged mirror traffic",
              "type": "integer"
            }
          }
        },
        "targetObject": {
          "type": "object",
          "required": [
            "attachment",
            "mirrObjName"
          ],
          "properties": {
            "attachment": {
              "description": "Target Attachment(0-RuleName, 1-PortName)",
              "type": "integer",
              "enum": [
                0,
                1
              ]
            },
            "mirrObjName": {
              "description": "Target Names",
              "type": "string"
            }
          }
        }
      }
    },
    "MirrorEntryMirrorInfo": {
      "type": "object",
      "properties": {
        "port": {
          "description": "Port where mirrored traffic needs to be sent",
          "type": "string"
        },
        "remoteIP": {
          "description": "For ERSPAN we may need to send tunnelled mirror traffic",
          "type": "string"
        },
        "sourceIP": {
          "description": "For ERSPAN we may need to send tunnelled mirror traffic",
          "type": "string"
        },
        "tunnelID": {
          "description": "mirror tunnel-id. For ERSPAN we may need to send tunnelled mirror traffic",
          "type": "integer"
        },
        "type": {
          "description": "One of MirrTypeSpan, MirrTypeRspan or MirrTypeErspan(0-MirrTypeSpan, 1-MirrTypeRspan, 2-MirrTypeErspan)",
          "type": "integer",
          "enum": [
            0,
            1,
            2
          ]
        },
        "vlan": {
          "description": "For RSPAN we may need to send tagged mirror traffic",
          "type": "integer"
        }
      }
    },
    "MirrorEntryTargetObject": {
      "type": "object",
      "required": [
        "attachment",
        "mirrObjName"
      ],
      "properties": {
        "attachment": {
          "description": "Target Attachment(0-RuleName, 1-PortName)",
          "type": "integer",
          "enum": [
            0,
            1
          ]
        },
        "mirrObjName": {
          "description": "Target Names",
          "type": "string"
        }
      }
    },
    "MirrorGetEntry": {
      "type": "object",
      "required": [
        "sync"
      ],
      "properties": {
        "mirrorIdent": {
          "description": "Mirror name",
          "type": "string"
        },
        "mirrorInfo": {
          "type": "object",
          "properties": {
            "port": {
              "description": "Port where mirrored traffic needs to be sent",
              "type": "string"
            },
            "remoteIP": {
              "description": "For ERSPAN we may need to send tunnelled mirror traffic",
              "type": "string"
            },
            "sourceIP": {
              "description": "For ERSPAN we may need to send tunnelled mirror traffic",
              "type": "string"
            },
            "tunnelID": {
              "description": "mirror tunnel-id. For ERSPAN we may need to send tunnelled mirror traffic",
              "type": "integer"
            },
            "type": {
              "description": "One of MirrTypeSpan, MirrTypeRspan or MirrTypeErspan",
              "type": "integer"
            },
            "vlan": {
              "description": "For RSPAN we may need to send tagged mirror traffic",
              "type": "integer"
            }
          }
        },
        "sync": {
          "description": "Sync - sync state",
          "type": "integer"
        },
        "targetObject": {
          "type": "object",
          "properties": {
            "attachment": {
              "description": "Target Attachment",
              "type": "integer"
            },
            "mirrObjName": {
              "description": "Target Names",
              "type": "string"
            }
          }
        }
      }
    },
    "MirrorGetEntryMirrorInfo": {
      "type": "object",
      "properties": {
        "port": {
          "description": "Port where mirrored traffic needs to be sent",
          "type": "string"
        },
        "remoteIP": {
          "description": "For ERSPAN we may need to send tunnelled mirror traffic",
          "type": "string"
        },
        "sourceIP": {
          "description": "For ERSPAN we may need to send tunnelled mirror traffic",
          "type": "string"
        },
        "tunnelID": {
          "description": "mirror tunnel-id. For ERSPAN we may need to send tunnelled mirror traffic",
          "type": "integer"
        },
        "type": {
          "description": "One of MirrTypeSpan, MirrTypeRspan or MirrTypeErspan",
          "type": "integer"
        },
        "vlan": {
          "description": "For RSPAN we may need to send tagged mirror traffic",
          "type": "integer"
        }
      }
    },
    "MirrorGetEntryTargetObject": {
      "type": "object",
      "properties": {
        "attachment": {
          "description": "Target Attachment",
          "type": "integer"
        },
        "mirrObjName": {
          "description": "Target Names",
          "type": "string"
        }
      }
    },
    "NeighborEntry": {
      "type": "object",
      "required": [
        "dev",
        "ipAddress",
        "macAddress"
      ],
      "properties": {
        "dev": {
          "description": "Name of the interface device to which you want to add neighbor",
          "type": "string"
        },
        "ipAddress": {
          "description": "IP address to neighbor",
          "type": "string"
        },
        "macAddress": {
          "description": "MAC address to neighbor",
          "type": "string"
        }
      }
    },
    "NewFlowCountMetrics": {
      "type": "object",
      "properties": {
        "new_flow_count": {
          "type": "number"
        }
      }
    },
    "Node": {
      "type": "object",
      "properties": {
        "color": {
          "type": "string"
        },
        "icon": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "mainstat": {
          "type": "number"
        },
        "nodeRadius": {
          "type": "integer"
        },
        "secondarystat": {
          "type": "number"
        },
        "subtitle": {
          "type": "string"
        },
        "title": {
          "type": "string"
        }
      }
    },
    "NodeGraphShcmea": {
      "type": "object",
      "properties": {
        "edges": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Edge"
          }
        },
        "meta": {
          "type": "object",
          "properties": {
            "preferredVisualisationType": {
              "type": "string"
            }
          }
        },
        "nodes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Node"
          }
        },
        "schemaVersion": {
          "type": "integer"
        }
      }
    },
    "NodeGraphShcmeaMeta": {
      "type": "object",
      "properties": {
        "preferredVisualisationType": {
          "type": "string"
        }
      }
    },
    "OauthErrorResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        }
      }
    },
    "OauthLoginResponse": {
      "type": "object",
      "properties": {
        "expiresin": {
          "description": "The duration in seconds that the access token is valid for.",
          "type": "integer"
        },
        "id": {
          "description": "The unique identifier for the authenticated user (e.g., Google user ID).",
          "type": "string"
        },
        "refreshtoken": {
          "description": "The refresh token used to obtain new access tokens once the current one expires.",
          "type": "string"
        },
        "token": {
          "description": "The access token used for API requests. Typically expires after a short duration.",
          "type": "string"
        }
      }
    },
    "OauthMessageResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        }
      }
    },
    "OauthTokenResponse": {
      "type": "object",
      "properties": {
        "expiresin": {
          "description": "The duration in seconds that the access token is valid for.",
          "type": "integer"
        },
        "token": {
          "description": "The access token used for API requests. Typically expires after a short duration.",
          "type": "string"
        }
      }
    },
    "OperParams": {
      "type": "object",
      "required": [
        "logLevel"
      ],
      "properties": {
        "logLevel": {
          "description": "Set level to trace,debug,info,error,warning,notice,critical,emergency,alert",
          "type": "string",
          "enum": [
            "trace",
            "debug",
            "info",
            "error",
            "warning",
            "notice",
            "critical",
            "emergency",
            "alert"
          ]
        }
      }
    },
    "PolicyEntry": {
      "type": "object",
      "required": [
        "policyIdent",
        "targetObject"
      ],
      "properties": {
        "policyIdent": {
          "description": "Policy name",
          "type": "string"
        },
        "policyInfo": {
          "type": "object",
          "properties": {
            "colorAware": {
              "description": "Policy color for QoS",
              "type": "boolean"
            },
            "committedBlkSize": {
              "description": "policy type",
              "type": "integer"
            },
            "committedInfoRate": {
              "description": "policy type",
              "type": "integer"
            },
            "excessBlkSize": {
              "description": "policy type",
              "type": "integer"
            },
            "peakInfoRate": {
              "description": "policy type",
              "type": "integer"
            },
            "type": {
              "description": "policy type(0-TrTCM, 1-SrTCM)",
              "type": "integer",
              "enum": [
                0,
                1
              ]
            }
          }
        },
        "targetObject": {
          "type": "object",
          "required": [
            "attachment",
            "polObjName"
          ],
          "properties": {
            "attachment": {
              "description": "Target Attachment(0-RuleName, 1-PortName)",
              "type": "integer",
              "enum": [
                0,
                1
              ]
            },
            "polObjName": {
              "description": "Target Names",
              "type": "string"
            }
          }
        }
      }
    },
    "PolicyEntryPolicyInfo": {
      "type": "object",
      "properties": {
        "colorAware": {
          "description": "Policy color for QoS",
          "type": "boolean"
        },
        "committedBlkSize": {
          "description": "policy type",
          "type": "integer"
        },
        "committedInfoRate": {
          "description": "policy type",
          "type": "integer"
        },
        "excessBlkSize": {
          "description": "policy type",
          "type": "integer"
        },
        "peakInfoRate": {
          "description": "policy type",
          "type": "integer"
        },
        "type": {
          "description": "policy type(0-TrTCM, 1-SrTCM)",
          "type": "integer",
          "enum": [
            0,
            1
          ]
        }
      }
    },
    "PolicyEntryTargetObject": {
      "type": "object",
      "required": [
        "attachment",
        "polObjName"
      ],
      "properties": {
        "attachment": {
          "description": "Target Attachment(0-RuleName, 1-PortName)",
          "type": "integer",
          "enum": [
            0,
            1
          ]
        },
        "polObjName": {
          "description": "Target Names",
          "type": "string"
        }
      }
    },
    "PortEntry": {
      "type": "object",
      "properties": {
        "DataplaneSync": {
          "description": "Dataplan Sync check",
          "type": "integer"
        },
        "portHardwareInformation": {
          "type": "object",
          "properties": {
            "link": {
              "description": "link status",
              "type": "boolean"
            },
            "macAddress": {
              "description": "MAC address of the port",
              "type": "string"
            },
            "master": {
              "description": "Port's mater",
              "type": "string"
            },
            "mtu": {
              "description": "MTU of the port",
              "type": "integer"
            },
            "rawMacAddress": {
              "description": "MAC address written by byte array",
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "real": {
              "description": "real port..",
              "type": "string"
            },
            "state": {
              "description": "state...",
              "type": "boolean"
            },
            "tunnelId": {
              "description": "Tunnel Id such as VxLAN.",
              "type": "integer"
            }
          }
        },
        "portL2Information": {
          "type": "object",
          "properties": {
            "isPvid": {
              "description": "Is PVID config or not",
              "type": "boolean"
            },
            "vid": {
              "description": "virtual lan id(VLAN ID)",
              "type": "integer"
            }
          }
        },
        "portL3Information": {
          "type": "object",
          "properties": {
            "IPv4Address": {
              "description": "List of IP address v4",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "IPv6Address": {
              "description": "List of the IP address v6",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "routed": {
              "description": "Is routed or not",
              "type": "boolean"
            }
          }
        },
        "portName": {
          "description": "The name of the Port interface",
          "type": "string"
        },
        "portNo": {
          "description": "Index of the Port",
          "type": "integer"
        },
        "portSoftwareInformation": {
          "type": "object",
          "properties": {
            "bpfLoaded": {
              "description": "The status of the eBPF loaded",
              "type": "boolean"
            },
            "osId": {
              "description": "The ID of the Port in the software(OS)",
              "type": "integer"
            },
            "portActive": {
              "description": "Activation status of the port",
              "type": "boolean"
            },
            "portProp": {
              "description": "Priority of the port",
              "type": "integer"
            },
            "portType": {
              "description": "port type",
              "type": "integer"
            }
          }
        },
        "portStatisticInformation": {
          "type": "object",
          "properties": {
            "rxBytes": {
              "description": "Statistic of the ingress port bytes.",
              "type": "integer"
            },
            "rxErrors": {
              "description": "Statistic of the number of ingress Error packets.",
              "type": "integer"
            },
            "rxPackets": {
              "description": "Statistic of the number of ingress packets.",
              "type": "integer"
            },
            "txBytes": {
              "description": "Statistic of the egress port bytes.",
              "type": "integer"
            },
            "txErrors": {
              "description": "Statistic of the number of egress Error packets.",
              "type": "integer"
            },
            "txPackets": {
              "description": "Statistic of the number of egress packets.",
              "type": "integer"
            }
          }
        },
        "zone": {
          "description": "network zone",
          "type": "string"
        }
      }
    },
    "PortEntryPortHardwareInformation": {
      "type": "object",
      "properties": {
        "link": {
          "description": "link status",
          "type": "boolean"
        },
        "macAddress": {
          "description": "MAC address of the port",
          "type": "string"
        },
        "master": {
          "description": "Port's mater",
          "type": "string"
        },
        "mtu": {
          "description": "MTU of the port",
          "type": "integer"
        },
        "rawMacAddress": {
          "description": "MAC address written by byte array",
          "type": "array",
          "items": {
            "type": "integer"
          }
        },
        "real": {
          "description": "real port..",
          "type": "string"
        },
        "state": {
          "description": "state...",
          "type": "boolean"
        },
        "tunnelId": {
          "description": "Tunnel Id such as VxLAN.",
          "type": "integer"
        }
      }
    },
    "PortEntryPortL2Information": {
      "type": "object",
      "properties": {
        "isPvid": {
          "description": "Is PVID config or not",
          "type": "boolean"
        },
        "vid": {
          "description": "virtual lan id(VLAN ID)",
          "type": "integer"
        }
      }
    },
    "PortEntryPortL3Information": {
      "type": "object",
      "properties": {
        "IPv4Address": {
          "description": "List of IP address v4",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "IPv6Address": {
          "description": "List of the IP address v6",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "routed": {
          "description": "Is routed or not",
          "type": "boolean"
        }
      }
    },
    "PortEntryPortSoftwareInformation": {
      "type": "object",
      "properties": {
        "bpfLoaded": {
          "description": "The status of the eBPF loaded",
          "type": "boolean"
        },
        "osId": {
          "description": "The ID of the Port in the software(OS)",
          "type": "integer"
        },
        "portActive": {
          "description": "Activation status of the port",
          "type": "boolean"
        },
        "portProp": {
          "description": "Priority of the port",
          "type": "integer"
        },
        "portType": {
          "description": "port type",
          "type": "integer"
        }
      }
    },
    "PortEntryPortStatisticInformation": {
      "type": "object",
      "properties": {
        "rxBytes": {
          "description": "Statistic of the ingress port bytes.",
          "type": "integer"
        },
        "rxErrors": {
          "description": "Statistic of the number of ingress Error packets.",
          "type": "integer"
        },
        "rxPackets": {
          "description": "Statistic of the number of ingress packets.",
          "type": "integer"
        },
        "txBytes": {
          "description": "Statistic of the egress port bytes.",
          "type": "integer"
        },
        "txErrors": {
          "description": "Statistic of the number of egress Error packets.",
          "type": "integer"
        },
        "txPackets": {
          "description": "Statistic of the number of egress packets.",
          "type": "integer"
        }
      }
    },
    "PostSuccess": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "ProcessInfoEntry": {
      "type": "object",
      "properties": {
        "CPUUsage": {
          "description": "CPU usage of the process",
          "type": "string"
        },
        "MemoryUsage": {
          "description": "Memory usage of the process",
          "type": "string"
        },
        "command": {
          "description": "process command",
          "type": "string"
        },
        "nice": {
          "description": "process nice value",
          "type": "string"
        },
        "pid": {
          "description": "process ID",
          "type": "string"
        },
        "priority": {
          "description": "process priority",
          "type": "string"
        },
        "residentSize": {
          "description": "Physical memory usage",
          "type": "string"
        },
        "sharedMemory": {
          "description": "Shared memory usage",
          "type": "string"
        },
        "status": {
          "description": "process status",
          "type": "string"
        },
        "time": {
          "description": "Executation time",
          "type": "string"
        },
        "user": {
          "description": "User name that start the process",
          "type": "string"
        },
        "virtMemory": {
          "description": "virtual memory usage",
          "type": "string"
        }
      }
    },
    "ProcessedTrafficMetrics": {
      "type": "object",
      "properties": {
        "processed_bytes": {
          "type": "number"
        },
        "processed_packets": {
          "type": "number"
        },
        "processed_sctp_bytes": {
          "type": "number"
        },
        "processed_tcp_bytes": {
          "type": "number"
        },
        "processed_udp_bytes": {
          "type": "number"
        }
      }
    },
    "ReqCountPerClientMetrics": {
      "type": "object",
      "additionalProperties": {
        "type": "number"
      }
    },
    "RequestCountMetrics": {
      "type": "object",
      "properties": {
        "total_requests": {
          "type": "number"
        },
        "total_requests_per_service": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RequestCountMetricsTotalRequestsPerServiceItems0"
          }
        }
      }
    },
    "RequestCountMetricsTotalRequestsPerServiceItems0": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "type": "number"
        }
      }
    },
    "RouteEntry": {
      "type": "object",
      "required": [
        "destinationIPNet",
        "gateway"
      ],
      "properties": {
        "destinationIPNet": {
          "description": "IP address and netmask",
          "type": "string"
        },
        "gateway": {
          "description": "IP address for nexthop",
          "type": "string"
        },
        "protocol": {
          "description": "Protocol type of the route like \"static\"",
          "type": "string"
        }
      }
    },
    "RouteGetEntry": {
      "type": "object",
      "properties": {
        "destinationIPNet": {
          "description": "IP address and netmask",
          "type": "string"
        },
        "flags": {
          "description": "Route flags",
          "type": "string"
        },
        "gateway": {
          "description": "IP address for nexthop",
          "type": "string"
        },
        "hardwareMark": {
          "description": "index of the route",
          "type": "integer"
        },
        "protocol": {
          "description": "Route protocol",
          "type": "string"
        },
        "statistic": {
          "type": "object",
          "required": [
            "bytes",
            "packets"
          ],
          "properties": {
            "bytes": {
              "description": "Statistic of the ingress port bytes.",
              "type": "integer"
            },
            "packets": {
              "description": "Statistic of the egress port bytes.",
              "type": "integer"
            }
          }
        },
        "sync": {
          "type": "integer"
        }
      }
    },
    "RouteGetEntryStatistic": {
      "type": "object",
      "required": [
        "bytes",
        "packets"
      ],
      "properties": {
        "bytes": {
          "description": "Statistic of the ingress port bytes.",
          "type": "integer"
        },
        "packets": {
          "description": "Statistic of the egress port bytes.",
          "type": "integer"
        }
      }
    },
    "ServiceDistTrafficMetrics": {
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/ServiceDistTrafficMetricsAnon"
      }
    },
    "ServiceDistTrafficMetricsAnon": {
      "type": "object",
      "properties": {
        "ratio": {
          "type": "number"
        },
        "value": {
          "type": "number"
        }
      }
    },
    "SessionEntry": {
      "type": "object",
      "required": [
        "ident"
      ],
      "properties": {
        "accessNetworkTunnel": {
          "type": "object",
          "properties": {
            "TeID": {
              "description": "ID of the tunnel",
              "type": "integer"
            },
            "tunnelIP": {
              "description": "Access network IP address",
              "type": "string"
            }
          }
        },
        "coreNetworkTunnel": {
          "type": "object",
          "properties": {
            "teID": {
              "description": "ID of the tunnel",
              "type": "integer"
            },
            "tunnelIP": {
              "description": "Connection network IP address",
              "type": "string"
            }
          }
        },
        "ident": {
          "description": "IP address and netmask",
          "type": "string"
        },
        "sessionIP": {
          "description": "IP address for nexthop",
          "type": "string"
        }
      }
    },
    "SessionEntryAccessNetworkTunnel": {
      "type": "object",
      "properties": {
        "TeID": {
          "description": "ID of the tunnel",
          "type": "integer"
        },
        "tunnelIP": {
          "description": "Access network IP address",
          "type": "string"
        }
      }
    },
    "SessionEntryCoreNetworkTunnel": {
      "type": "object",
      "properties": {
        "teID": {
          "description": "ID of the tunnel",
          "type": "integer"
        },
        "tunnelIP": {
          "description": "Connection network IP address",
          "type": "string"
        }
      }
    },
    "SessionUlClEntry": {
      "type": "object",
      "required": [
        "ulclIdent"
      ],
      "properties": {
        "ulclArgument": {
          "type": "object",
          "properties": {
            "qfi": {
              "description": "QFI number",
              "type": "integer"
            },
            "ulclIP": {
              "description": "Access network IP address",
              "type": "string"
            }
          }
        },
        "ulclIdent": {
          "description": "IP address and netmask",
          "type": "string"
        }
      }
    },
    "SessionUlClEntryUlclArgument": {
      "type": "object",
      "properties": {
        "qfi": {
          "description": "QFI number",
          "type": "integer"
        },
        "ulclIP": {
          "description": "Access network IP address",
          "type": "string"
        }
      }
    },
    "SuccessResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        }
      }
    },
    "UpdateLicenseRequest": {
      "type": "object",
      "required": [
        "license_key"
      ],
      "properties": {
        "license_key": {
          "type": "string"
        }
      }
    },
    "User": {
      "type": "object",
      "required": [
        "username",
        "password"
      ],
      "properties": {
        "created_at": {
          "type": "string"
        },
        "id": {
          "type": "integer"
        },
        "password": {
          "type": "string"
        },
        "role": {
          "type": "string",
          "enum": [
            "admin",
            "viewer"
          ]
        },
        "username": {
          "type": "string"
        }
      }
    },
    "VersionGetEntry": {
      "type": "object",
      "properties": {
        "buildInfo": {
          "description": "build info",
          "type": "string"
        },
        "version": {
          "description": "Instance name",
          "type": "string"
        }
      }
    },
    "VlanBridgeEntry": {
      "type": "object",
      "required": [
        "vid"
      ],
      "properties": {
        "vid": {
          "description": "Vlan ID",
          "type": "integer"
        }
      }
    },
    "VlanGetEntry": {
      "type": "object",
      "properties": {
        "dev": {
          "description": "Interface device name",
          "type": "string"
        },
        "member": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VlanMemberEntry"
          }
        },
        "vid": {
          "description": "Vlan ID",
          "type": "integer"
        },
        "vlanStatistic": {
          "type": "object",
          "properties": {
            "inBytes": {
              "type": "integer"
            },
            "inPackets": {
              "type": "integer"
            },
            "outBytes": {
              "type": "integer"
            },
            "outPackets": {
              "type": "integer"
            }
          }
        }
      }
    },
    "VlanGetEntryVlanStatistic": {
      "type": "object",
      "properties": {
        "inBytes": {
          "type": "integer"
        },
        "inPackets": {
          "type": "integer"
        },
        "outBytes": {
          "type": "integer"
        },
        "outPackets": {
          "type": "integer"
        }
      }
    },
    "VlanMemberEntry": {
      "type": "object",
      "properties": {
        "dev": {
          "description": "Interface device name",
          "type": "string"
        },
        "tagged": {
          "description": "Tagged status added",
          "type": "boolean"
        }
      }
    },
    "VxlanBridgeEntry": {
      "type": "object",
      "required": [
        "epIntf",
        "vxlanID"
      ],
      "properties": {
        "epIntf": {
          "type": "string"
        },
        "vxlanID": {
          "type": "integer"
        }
      }
    },
    "VxlanEntry": {
      "type": "object",
      "required": [
        "vxlanName",
        "epIntf",
        "vxlanID",
        "peerIP"
      ],
      "properties": {
        "epIntf": {
          "type": "string"
        },
        "peerIP": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "vxlanID": {
          "type": "integer"
        },
        "vxlanName": {
          "type": "string"
        }
      }
    },
    "VxlanPeerEntry": {
      "type": "object",
      "required": [
        "peerIP"
      ],
      "properties": {
        "peerIP": {
          "type": "string"
        }
      }
    }
  },
  "securityDefinitions": {
    "BearerAuth": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "security": [
    {
      "BearerAuth": []
    }
  ]
}`))
}
