// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/loads"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/runtime/security"
	"github.com/go-openapi/spec"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewLoxilbRestAPIAPI creates a new LoxilbRestAPI instance
func NewLoxilbRestAPIAPI(spec *loads.Document) *LoxilbRestAPIAPI {
	return &LoxilbRestAPIAPI{
		handlers:            make(map[string]map[string]http.Handler),
		formats:             strfmt.Default,
		defaultConsumes:     "application/json",
		defaultProduces:     "application/json",
		customConsumers:     make(map[string]runtime.Consumer),
		customProducers:     make(map[string]runtime.Producer),
		PreServerShutdown:   func() {},
		ServerShutdown:      func() {},
		spec:                spec,
		useSwaggerUI:        false,
		ServeError:          errors.ServeError,
		BasicAuthenticator:  security.BasicAuth,
		APIKeyAuthenticator: security.APIKeyAuth,
		BearerAuthenticator: security.BearerAuth,

		JSONConsumer: runtime.JSONConsumer(),

		JSONProducer: runtime.JSONProducer(),

		DeleteConfigBfdRemoteIPRemoteIPHandler: DeleteConfigBfdRemoteIPRemoteIPHandlerFunc(func(params DeleteConfigBfdRemoteIPRemoteIPParams) middleware.Responder {
			return middleware.NotImplemented("operation DeleteConfigBfdRemoteIPRemoteIP has not yet been implemented")
		}),
		DeleteConfigBgpNeighIPAddressHandler: DeleteConfigBgpNeighIPAddressHandlerFunc(func(params DeleteConfigBgpNeighIPAddressParams) middleware.Responder {
			return middleware.NotImplemented("operation DeleteConfigBgpNeighIPAddress has not yet been implemented")
		}),
		DeleteConfigBgpPolicyApplyHandler: DeleteConfigBgpPolicyApplyHandlerFunc(func(params DeleteConfigBgpPolicyApplyParams) middleware.Responder {
			return middleware.NotImplemented("operation DeleteConfigBgpPolicyApply has not yet been implemented")
		}),
		DeleteConfigBgpPolicyDefinedsetsDefinesetTypeTypeNameHandler: DeleteConfigBgpPolicyDefinedsetsDefinesetTypeTypeNameHandlerFunc(func(params DeleteConfigBgpPolicyDefinedsetsDefinesetTypeTypeNameParams) middleware.Responder {
			return middleware.NotImplemented("operation DeleteConfigBgpPolicyDefinedsetsDefinesetTypeTypeName has not yet been implemented")
		}),
		DeleteConfigBgpPolicyDefinitionsPolicyNameHandler: DeleteConfigBgpPolicyDefinitionsPolicyNameHandlerFunc(func(params DeleteConfigBgpPolicyDefinitionsPolicyNameParams) middleware.Responder {
			return middleware.NotImplemented("operation DeleteConfigBgpPolicyDefinitionsPolicyName has not yet been implemented")
		}),
		DeleteConfigEndpointEpipaddressIPAddressHandler: DeleteConfigEndpointEpipaddressIPAddressHandlerFunc(func(params DeleteConfigEndpointEpipaddressIPAddressParams) middleware.Responder {
			return middleware.NotImplemented("operation DeleteConfigEndpointEpipaddressIPAddress has not yet been implemented")
		}),
		DeleteConfigFdbMacAddressDevIfNameHandler: DeleteConfigFdbMacAddressDevIfNameHandlerFunc(func(params DeleteConfigFdbMacAddressDevIfNameParams) middleware.Responder {
			return middleware.NotImplemented("operation DeleteConfigFdbMacAddressDevIfName has not yet been implemented")
		}),
		DeleteConfigFirewallHandler: DeleteConfigFirewallHandlerFunc(func(params DeleteConfigFirewallParams) middleware.Responder {
			return middleware.NotImplemented("operation DeleteConfigFirewall has not yet been implemented")
		}),
		DeleteConfigIpv4addressIPAddressMaskDevIfNameHandler: DeleteConfigIpv4addressIPAddressMaskDevIfNameHandlerFunc(func(params DeleteConfigIpv4addressIPAddressMaskDevIfNameParams) middleware.Responder {
			return middleware.NotImplemented("operation DeleteConfigIpv4addressIPAddressMaskDevIfName has not yet been implemented")
		}),
		DeleteConfigLoadbalancerAllHandler: DeleteConfigLoadbalancerAllHandlerFunc(func(params DeleteConfigLoadbalancerAllParams) middleware.Responder {
			return middleware.NotImplemented("operation DeleteConfigLoadbalancerAll has not yet been implemented")
		}),
		DeleteConfigLoadbalancerExternalipaddressIPAddressPortPortProtocolProtoHandler: DeleteConfigLoadbalancerExternalipaddressIPAddressPortPortProtocolProtoHandlerFunc(func(params DeleteConfigLoadbalancerExternalipaddressIPAddressPortPortProtocolProtoParams) middleware.Responder {
			return middleware.NotImplemented("operation DeleteConfigLoadbalancerExternalipaddressIPAddressPortPortProtocolProto has not yet been implemented")
		}),
		DeleteConfigLoadbalancerHosturlHosturlExternalipaddressIPAddressPortPortProtocolProtoHandler: DeleteConfigLoadbalancerHosturlHosturlExternalipaddressIPAddressPortPortProtocolProtoHandlerFunc(func(params DeleteConfigLoadbalancerHosturlHosturlExternalipaddressIPAddressPortPortProtocolProtoParams) middleware.Responder {
			return middleware.NotImplemented("operation DeleteConfigLoadbalancerHosturlHosturlExternalipaddressIPAddressPortPortProtocolProto has not yet been implemented")
		}),
		DeleteConfigLoadbalancerNameLbNameHandler: DeleteConfigLoadbalancerNameLbNameHandlerFunc(func(params DeleteConfigLoadbalancerNameLbNameParams) middleware.Responder {
			return middleware.NotImplemented("operation DeleteConfigLoadbalancerNameLbName has not yet been implemented")
		}),
		DeleteConfigMirrorIdentIdentHandler: DeleteConfigMirrorIdentIdentHandlerFunc(func(params DeleteConfigMirrorIdentIdentParams) middleware.Responder {
			return middleware.NotImplemented("operation DeleteConfigMirrorIdentIdent has not yet been implemented")
		}),
		DeleteConfigNeighborIPAddressDevIfNameHandler: DeleteConfigNeighborIPAddressDevIfNameHandlerFunc(func(params DeleteConfigNeighborIPAddressDevIfNameParams) middleware.Responder {
			return middleware.NotImplemented("operation DeleteConfigNeighborIPAddressDevIfName has not yet been implemented")
		}),
		DeleteConfigPolicyIdentIdentHandler: DeleteConfigPolicyIdentIdentHandlerFunc(func(params DeleteConfigPolicyIdentIdentParams) middleware.Responder {
			return middleware.NotImplemented("operation DeleteConfigPolicyIdentIdent has not yet been implemented")
		}),
		DeleteConfigRouteDestinationIPNetIPAddressMaskHandler: DeleteConfigRouteDestinationIPNetIPAddressMaskHandlerFunc(func(params DeleteConfigRouteDestinationIPNetIPAddressMaskParams) middleware.Responder {
			return middleware.NotImplemented("operation DeleteConfigRouteDestinationIPNetIPAddressMask has not yet been implemented")
		}),
		DeleteConfigSessionIdentIdentHandler: DeleteConfigSessionIdentIdentHandlerFunc(func(params DeleteConfigSessionIdentIdentParams) middleware.Responder {
			return middleware.NotImplemented("operation DeleteConfigSessionIdentIdent has not yet been implemented")
		}),
		DeleteConfigSessionulclIdentIdentUlclAddressIPAddressHandler: DeleteConfigSessionulclIdentIdentUlclAddressIPAddressHandlerFunc(func(params DeleteConfigSessionulclIdentIdentUlclAddressIPAddressParams) middleware.Responder {
			return middleware.NotImplemented("operation DeleteConfigSessionulclIdentIdentUlclAddressIPAddress has not yet been implemented")
		}),
		DeleteConfigTunnelVxlanVxlanIDHandler: DeleteConfigTunnelVxlanVxlanIDHandlerFunc(func(params DeleteConfigTunnelVxlanVxlanIDParams) middleware.Responder {
			return middleware.NotImplemented("operation DeleteConfigTunnelVxlanVxlanID has not yet been implemented")
		}),
		DeleteConfigTunnelVxlanVxlanIDPeerPeerIPHandler: DeleteConfigTunnelVxlanVxlanIDPeerPeerIPHandlerFunc(func(params DeleteConfigTunnelVxlanVxlanIDPeerPeerIPParams) middleware.Responder {
			return middleware.NotImplemented("operation DeleteConfigTunnelVxlanVxlanIDPeerPeerIP has not yet been implemented")
		}),
		DeleteConfigVlanVlanIDHandler: DeleteConfigVlanVlanIDHandlerFunc(func(params DeleteConfigVlanVlanIDParams) middleware.Responder {
			return middleware.NotImplemented("operation DeleteConfigVlanVlanID has not yet been implemented")
		}),
		DeleteConfigVlanVlanIDMemberIfNameTaggedTaggedHandler: DeleteConfigVlanVlanIDMemberIfNameTaggedTaggedHandlerFunc(func(params DeleteConfigVlanVlanIDMemberIfNameTaggedTaggedParams) middleware.Responder {
			return middleware.NotImplemented("operation DeleteConfigVlanVlanIDMemberIfNameTaggedTagged has not yet been implemented")
		}),
		GetConfigBfdAllHandler: GetConfigBfdAllHandlerFunc(func(params GetConfigBfdAllParams) middleware.Responder {
			return middleware.NotImplemented("operation GetConfigBfdAll has not yet been implemented")
		}),
		GetConfigBgpNeighAllHandler: GetConfigBgpNeighAllHandlerFunc(func(params GetConfigBgpNeighAllParams) middleware.Responder {
			return middleware.NotImplemented("operation GetConfigBgpNeighAll has not yet been implemented")
		}),
		GetConfigBgpPolicyDefinedsetsDefinesetTypeTypeNameHandler: GetConfigBgpPolicyDefinedsetsDefinesetTypeTypeNameHandlerFunc(func(params GetConfigBgpPolicyDefinedsetsDefinesetTypeTypeNameParams) middleware.Responder {
			return middleware.NotImplemented("operation GetConfigBgpPolicyDefinedsetsDefinesetTypeTypeName has not yet been implemented")
		}),
		GetConfigBgpPolicyDefinitionsAllHandler: GetConfigBgpPolicyDefinitionsAllHandlerFunc(func(params GetConfigBgpPolicyDefinitionsAllParams) middleware.Responder {
			return middleware.NotImplemented("operation GetConfigBgpPolicyDefinitionsAll has not yet been implemented")
		}),
		GetConfigCistateAllHandler: GetConfigCistateAllHandlerFunc(func(params GetConfigCistateAllParams) middleware.Responder {
			return middleware.NotImplemented("operation GetConfigCistateAll has not yet been implemented")
		}),
		GetConfigConntrackAllHandler: GetConfigConntrackAllHandlerFunc(func(params GetConfigConntrackAllParams) middleware.Responder {
			return middleware.NotImplemented("operation GetConfigConntrackAll has not yet been implemented")
		}),
		GetConfigEndpointAllHandler: GetConfigEndpointAllHandlerFunc(func(params GetConfigEndpointAllParams) middleware.Responder {
			return middleware.NotImplemented("operation GetConfigEndpointAll has not yet been implemented")
		}),
		GetConfigFdbAllHandler: GetConfigFdbAllHandlerFunc(func(params GetConfigFdbAllParams) middleware.Responder {
			return middleware.NotImplemented("operation GetConfigFdbAll has not yet been implemented")
		}),
		GetConfigFirewallAllHandler: GetConfigFirewallAllHandlerFunc(func(params GetConfigFirewallAllParams) middleware.Responder {
			return middleware.NotImplemented("operation GetConfigFirewallAll has not yet been implemented")
		}),
		GetConfigIpv4addressAllHandler: GetConfigIpv4addressAllHandlerFunc(func(params GetConfigIpv4addressAllParams) middleware.Responder {
			return middleware.NotImplemented("operation GetConfigIpv4addressAll has not yet been implemented")
		}),
		GetConfigLoadbalancerAllHandler: GetConfigLoadbalancerAllHandlerFunc(func(params GetConfigLoadbalancerAllParams) middleware.Responder {
			return middleware.NotImplemented("operation GetConfigLoadbalancerAll has not yet been implemented")
		}),
		GetConfigMirrorAllHandler: GetConfigMirrorAllHandlerFunc(func(params GetConfigMirrorAllParams) middleware.Responder {
			return middleware.NotImplemented("operation GetConfigMirrorAll has not yet been implemented")
		}),
		GetConfigNeighborAllHandler: GetConfigNeighborAllHandlerFunc(func(params GetConfigNeighborAllParams) middleware.Responder {
			return middleware.NotImplemented("operation GetConfigNeighborAll has not yet been implemented")
		}),
		GetConfigParamsHandler: GetConfigParamsHandlerFunc(func(params GetConfigParamsParams) middleware.Responder {
			return middleware.NotImplemented("operation GetConfigParams has not yet been implemented")
		}),
		GetConfigPolicyAllHandler: GetConfigPolicyAllHandlerFunc(func(params GetConfigPolicyAllParams) middleware.Responder {
			return middleware.NotImplemented("operation GetConfigPolicyAll has not yet been implemented")
		}),
		GetConfigPortAllHandler: GetConfigPortAllHandlerFunc(func(params GetConfigPortAllParams) middleware.Responder {
			return middleware.NotImplemented("operation GetConfigPortAll has not yet been implemented")
		}),
		GetConfigRouteAllHandler: GetConfigRouteAllHandlerFunc(func(params GetConfigRouteAllParams) middleware.Responder {
			return middleware.NotImplemented("operation GetConfigRouteAll has not yet been implemented")
		}),
		GetConfigSessionAllHandler: GetConfigSessionAllHandlerFunc(func(params GetConfigSessionAllParams) middleware.Responder {
			return middleware.NotImplemented("operation GetConfigSessionAll has not yet been implemented")
		}),
		GetConfigSessionulclAllHandler: GetConfigSessionulclAllHandlerFunc(func(params GetConfigSessionulclAllParams) middleware.Responder {
			return middleware.NotImplemented("operation GetConfigSessionulclAll has not yet been implemented")
		}),
		GetConfigTunnelVxlanAllHandler: GetConfigTunnelVxlanAllHandlerFunc(func(params GetConfigTunnelVxlanAllParams) middleware.Responder {
			return middleware.NotImplemented("operation GetConfigTunnelVxlanAll has not yet been implemented")
		}),
		GetConfigVlanAllHandler: GetConfigVlanAllHandlerFunc(func(params GetConfigVlanAllParams) middleware.Responder {
			return middleware.NotImplemented("operation GetConfigVlanAll has not yet been implemented")
		}),
		GetMetricsHandler: GetMetricsHandlerFunc(func(params GetMetricsParams) middleware.Responder {
			return middleware.NotImplemented("operation GetMetrics has not yet been implemented")
		}),
		GetStatusDeviceHandler: GetStatusDeviceHandlerFunc(func(params GetStatusDeviceParams) middleware.Responder {
			return middleware.NotImplemented("operation GetStatusDevice has not yet been implemented")
		}),
		GetStatusFilesystemHandler: GetStatusFilesystemHandlerFunc(func(params GetStatusFilesystemParams) middleware.Responder {
			return middleware.NotImplemented("operation GetStatusFilesystem has not yet been implemented")
		}),
		GetStatusProcessHandler: GetStatusProcessHandlerFunc(func(params GetStatusProcessParams) middleware.Responder {
			return middleware.NotImplemented("operation GetStatusProcess has not yet been implemented")
		}),
		PostConfigBfdHandler: PostConfigBfdHandlerFunc(func(params PostConfigBfdParams) middleware.Responder {
			return middleware.NotImplemented("operation PostConfigBfd has not yet been implemented")
		}),
		PostConfigBgpGlobalHandler: PostConfigBgpGlobalHandlerFunc(func(params PostConfigBgpGlobalParams) middleware.Responder {
			return middleware.NotImplemented("operation PostConfigBgpGlobal has not yet been implemented")
		}),
		PostConfigBgpNeighHandler: PostConfigBgpNeighHandlerFunc(func(params PostConfigBgpNeighParams) middleware.Responder {
			return middleware.NotImplemented("operation PostConfigBgpNeigh has not yet been implemented")
		}),
		PostConfigBgpPolicyApplyHandler: PostConfigBgpPolicyApplyHandlerFunc(func(params PostConfigBgpPolicyApplyParams) middleware.Responder {
			return middleware.NotImplemented("operation PostConfigBgpPolicyApply has not yet been implemented")
		}),
		PostConfigBgpPolicyDefinedsetsDefinesetTypeHandler: PostConfigBgpPolicyDefinedsetsDefinesetTypeHandlerFunc(func(params PostConfigBgpPolicyDefinedsetsDefinesetTypeParams) middleware.Responder {
			return middleware.NotImplemented("operation PostConfigBgpPolicyDefinedsetsDefinesetType has not yet been implemented")
		}),
		PostConfigBgpPolicyDefinitionsHandler: PostConfigBgpPolicyDefinitionsHandlerFunc(func(params PostConfigBgpPolicyDefinitionsParams) middleware.Responder {
			return middleware.NotImplemented("operation PostConfigBgpPolicyDefinitions has not yet been implemented")
		}),
		PostConfigCistateHandler: PostConfigCistateHandlerFunc(func(params PostConfigCistateParams) middleware.Responder {
			return middleware.NotImplemented("operation PostConfigCistate has not yet been implemented")
		}),
		PostConfigEndpointHandler: PostConfigEndpointHandlerFunc(func(params PostConfigEndpointParams) middleware.Responder {
			return middleware.NotImplemented("operation PostConfigEndpoint has not yet been implemented")
		}),
		PostConfigFdbHandler: PostConfigFdbHandlerFunc(func(params PostConfigFdbParams) middleware.Responder {
			return middleware.NotImplemented("operation PostConfigFdb has not yet been implemented")
		}),
		PostConfigFirewallHandler: PostConfigFirewallHandlerFunc(func(params PostConfigFirewallParams) middleware.Responder {
			return middleware.NotImplemented("operation PostConfigFirewall has not yet been implemented")
		}),
		PostConfigIpv4addressHandler: PostConfigIpv4addressHandlerFunc(func(params PostConfigIpv4addressParams) middleware.Responder {
			return middleware.NotImplemented("operation PostConfigIpv4address has not yet been implemented")
		}),
		PostConfigLoadbalancerHandler: PostConfigLoadbalancerHandlerFunc(func(params PostConfigLoadbalancerParams) middleware.Responder {
			return middleware.NotImplemented("operation PostConfigLoadbalancer has not yet been implemented")
		}),
		PostConfigMirrorHandler: PostConfigMirrorHandlerFunc(func(params PostConfigMirrorParams) middleware.Responder {
			return middleware.NotImplemented("operation PostConfigMirror has not yet been implemented")
		}),
		PostConfigNeighborHandler: PostConfigNeighborHandlerFunc(func(params PostConfigNeighborParams) middleware.Responder {
			return middleware.NotImplemented("operation PostConfigNeighbor has not yet been implemented")
		}),
		PostConfigParamsHandler: PostConfigParamsHandlerFunc(func(params PostConfigParamsParams) middleware.Responder {
			return middleware.NotImplemented("operation PostConfigParams has not yet been implemented")
		}),
		PostConfigPolicyHandler: PostConfigPolicyHandlerFunc(func(params PostConfigPolicyParams) middleware.Responder {
			return middleware.NotImplemented("operation PostConfigPolicy has not yet been implemented")
		}),
		PostConfigRouteHandler: PostConfigRouteHandlerFunc(func(params PostConfigRouteParams) middleware.Responder {
			return middleware.NotImplemented("operation PostConfigRoute has not yet been implemented")
		}),
		PostConfigSessionHandler: PostConfigSessionHandlerFunc(func(params PostConfigSessionParams) middleware.Responder {
			return middleware.NotImplemented("operation PostConfigSession has not yet been implemented")
		}),
		PostConfigSessionulclHandler: PostConfigSessionulclHandlerFunc(func(params PostConfigSessionulclParams) middleware.Responder {
			return middleware.NotImplemented("operation PostConfigSessionulcl has not yet been implemented")
		}),
		PostConfigTunnelVxlanHandler: PostConfigTunnelVxlanHandlerFunc(func(params PostConfigTunnelVxlanParams) middleware.Responder {
			return middleware.NotImplemented("operation PostConfigTunnelVxlan has not yet been implemented")
		}),
		PostConfigTunnelVxlanVxlanIDPeerHandler: PostConfigTunnelVxlanVxlanIDPeerHandlerFunc(func(params PostConfigTunnelVxlanVxlanIDPeerParams) middleware.Responder {
			return middleware.NotImplemented("operation PostConfigTunnelVxlanVxlanIDPeer has not yet been implemented")
		}),
		PostConfigVlanHandler: PostConfigVlanHandlerFunc(func(params PostConfigVlanParams) middleware.Responder {
			return middleware.NotImplemented("operation PostConfigVlan has not yet been implemented")
		}),
		PostConfigVlanVlanIDMemberHandler: PostConfigVlanVlanIDMemberHandlerFunc(func(params PostConfigVlanVlanIDMemberParams) middleware.Responder {
			return middleware.NotImplemented("operation PostConfigVlanVlanIDMember has not yet been implemented")
		}),
	}
}

/*LoxilbRestAPIAPI Loxilb REST API for Baremetal Scenarios */
type LoxilbRestAPIAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	customConsumers map[string]runtime.Consumer
	customProducers map[string]runtime.Producer
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler
	useSwaggerUI    bool

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator

	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator

	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for the following mime types:
	//   - application/json
	JSONConsumer runtime.Consumer

	// JSONProducer registers a producer for the following mime types:
	//   - application/json
	JSONProducer runtime.Producer

	// DeleteConfigBfdRemoteIPRemoteIPHandler sets the operation handler for the delete config bfd remote IP remote IP operation
	DeleteConfigBfdRemoteIPRemoteIPHandler DeleteConfigBfdRemoteIPRemoteIPHandler
	// DeleteConfigBgpNeighIPAddressHandler sets the operation handler for the delete config bgp neigh IP address operation
	DeleteConfigBgpNeighIPAddressHandler DeleteConfigBgpNeighIPAddressHandler
	// DeleteConfigBgpPolicyApplyHandler sets the operation handler for the delete config bgp policy apply operation
	DeleteConfigBgpPolicyApplyHandler DeleteConfigBgpPolicyApplyHandler
	// DeleteConfigBgpPolicyDefinedsetsDefinesetTypeTypeNameHandler sets the operation handler for the delete config bgp policy definedsets defineset type type name operation
	DeleteConfigBgpPolicyDefinedsetsDefinesetTypeTypeNameHandler DeleteConfigBgpPolicyDefinedsetsDefinesetTypeTypeNameHandler
	// DeleteConfigBgpPolicyDefinitionsPolicyNameHandler sets the operation handler for the delete config bgp policy definitions policy name operation
	DeleteConfigBgpPolicyDefinitionsPolicyNameHandler DeleteConfigBgpPolicyDefinitionsPolicyNameHandler
	// DeleteConfigEndpointEpipaddressIPAddressHandler sets the operation handler for the delete config endpoint epipaddress IP address operation
	DeleteConfigEndpointEpipaddressIPAddressHandler DeleteConfigEndpointEpipaddressIPAddressHandler
	// DeleteConfigFdbMacAddressDevIfNameHandler sets the operation handler for the delete config fdb mac address dev if name operation
	DeleteConfigFdbMacAddressDevIfNameHandler DeleteConfigFdbMacAddressDevIfNameHandler
	// DeleteConfigFirewallHandler sets the operation handler for the delete config firewall operation
	DeleteConfigFirewallHandler DeleteConfigFirewallHandler
	// DeleteConfigIpv4addressIPAddressMaskDevIfNameHandler sets the operation handler for the delete config ipv4address IP address mask dev if name operation
	DeleteConfigIpv4addressIPAddressMaskDevIfNameHandler DeleteConfigIpv4addressIPAddressMaskDevIfNameHandler
	// DeleteConfigLoadbalancerAllHandler sets the operation handler for the delete config loadbalancer all operation
	DeleteConfigLoadbalancerAllHandler DeleteConfigLoadbalancerAllHandler
	// DeleteConfigLoadbalancerExternalipaddressIPAddressPortPortProtocolProtoHandler sets the operation handler for the delete config loadbalancer externalipaddress IP address port port protocol proto operation
	DeleteConfigLoadbalancerExternalipaddressIPAddressPortPortProtocolProtoHandler DeleteConfigLoadbalancerExternalipaddressIPAddressPortPortProtocolProtoHandler
	// DeleteConfigLoadbalancerHosturlHosturlExternalipaddressIPAddressPortPortProtocolProtoHandler sets the operation handler for the delete config loadbalancer hosturl hosturl externalipaddress IP address port port protocol proto operation
	DeleteConfigLoadbalancerHosturlHosturlExternalipaddressIPAddressPortPortProtocolProtoHandler DeleteConfigLoadbalancerHosturlHosturlExternalipaddressIPAddressPortPortProtocolProtoHandler
	// DeleteConfigLoadbalancerNameLbNameHandler sets the operation handler for the delete config loadbalancer name lb name operation
	DeleteConfigLoadbalancerNameLbNameHandler DeleteConfigLoadbalancerNameLbNameHandler
	// DeleteConfigMirrorIdentIdentHandler sets the operation handler for the delete config mirror ident ident operation
	DeleteConfigMirrorIdentIdentHandler DeleteConfigMirrorIdentIdentHandler
	// DeleteConfigNeighborIPAddressDevIfNameHandler sets the operation handler for the delete config neighbor IP address dev if name operation
	DeleteConfigNeighborIPAddressDevIfNameHandler DeleteConfigNeighborIPAddressDevIfNameHandler
	// DeleteConfigPolicyIdentIdentHandler sets the operation handler for the delete config policy ident ident operation
	DeleteConfigPolicyIdentIdentHandler DeleteConfigPolicyIdentIdentHandler
	// DeleteConfigRouteDestinationIPNetIPAddressMaskHandler sets the operation handler for the delete config route destination IP net IP address mask operation
	DeleteConfigRouteDestinationIPNetIPAddressMaskHandler DeleteConfigRouteDestinationIPNetIPAddressMaskHandler
	// DeleteConfigSessionIdentIdentHandler sets the operation handler for the delete config session ident ident operation
	DeleteConfigSessionIdentIdentHandler DeleteConfigSessionIdentIdentHandler
	// DeleteConfigSessionulclIdentIdentUlclAddressIPAddressHandler sets the operation handler for the delete config sessionulcl ident ident ulcl address IP address operation
	DeleteConfigSessionulclIdentIdentUlclAddressIPAddressHandler DeleteConfigSessionulclIdentIdentUlclAddressIPAddressHandler
	// DeleteConfigTunnelVxlanVxlanIDHandler sets the operation handler for the delete config tunnel vxlan vxlan ID operation
	DeleteConfigTunnelVxlanVxlanIDHandler DeleteConfigTunnelVxlanVxlanIDHandler
	// DeleteConfigTunnelVxlanVxlanIDPeerPeerIPHandler sets the operation handler for the delete config tunnel vxlan vxlan ID peer peer IP operation
	DeleteConfigTunnelVxlanVxlanIDPeerPeerIPHandler DeleteConfigTunnelVxlanVxlanIDPeerPeerIPHandler
	// DeleteConfigVlanVlanIDHandler sets the operation handler for the delete config vlan vlan ID operation
	DeleteConfigVlanVlanIDHandler DeleteConfigVlanVlanIDHandler
	// DeleteConfigVlanVlanIDMemberIfNameTaggedTaggedHandler sets the operation handler for the delete config vlan vlan ID member if name tagged tagged operation
	DeleteConfigVlanVlanIDMemberIfNameTaggedTaggedHandler DeleteConfigVlanVlanIDMemberIfNameTaggedTaggedHandler
	// GetConfigBfdAllHandler sets the operation handler for the get config bfd all operation
	GetConfigBfdAllHandler GetConfigBfdAllHandler
	// GetConfigBgpNeighAllHandler sets the operation handler for the get config bgp neigh all operation
	GetConfigBgpNeighAllHandler GetConfigBgpNeighAllHandler
	// GetConfigBgpPolicyDefinedsetsDefinesetTypeTypeNameHandler sets the operation handler for the get config bgp policy definedsets defineset type type name operation
	GetConfigBgpPolicyDefinedsetsDefinesetTypeTypeNameHandler GetConfigBgpPolicyDefinedsetsDefinesetTypeTypeNameHandler
	// GetConfigBgpPolicyDefinitionsAllHandler sets the operation handler for the get config bgp policy definitions all operation
	GetConfigBgpPolicyDefinitionsAllHandler GetConfigBgpPolicyDefinitionsAllHandler
	// GetConfigCistateAllHandler sets the operation handler for the get config cistate all operation
	GetConfigCistateAllHandler GetConfigCistateAllHandler
	// GetConfigConntrackAllHandler sets the operation handler for the get config conntrack all operation
	GetConfigConntrackAllHandler GetConfigConntrackAllHandler
	// GetConfigEndpointAllHandler sets the operation handler for the get config endpoint all operation
	GetConfigEndpointAllHandler GetConfigEndpointAllHandler
	// GetConfigFdbAllHandler sets the operation handler for the get config fdb all operation
	GetConfigFdbAllHandler GetConfigFdbAllHandler
	// GetConfigFirewallAllHandler sets the operation handler for the get config firewall all operation
	GetConfigFirewallAllHandler GetConfigFirewallAllHandler
	// GetConfigIpv4addressAllHandler sets the operation handler for the get config ipv4address all operation
	GetConfigIpv4addressAllHandler GetConfigIpv4addressAllHandler
	// GetConfigLoadbalancerAllHandler sets the operation handler for the get config loadbalancer all operation
	GetConfigLoadbalancerAllHandler GetConfigLoadbalancerAllHandler
	// GetConfigMirrorAllHandler sets the operation handler for the get config mirror all operation
	GetConfigMirrorAllHandler GetConfigMirrorAllHandler
	// GetConfigNeighborAllHandler sets the operation handler for the get config neighbor all operation
	GetConfigNeighborAllHandler GetConfigNeighborAllHandler
	// GetConfigParamsHandler sets the operation handler for the get config params operation
	GetConfigParamsHandler GetConfigParamsHandler
	// GetConfigPolicyAllHandler sets the operation handler for the get config policy all operation
	GetConfigPolicyAllHandler GetConfigPolicyAllHandler
	// GetConfigPortAllHandler sets the operation handler for the get config port all operation
	GetConfigPortAllHandler GetConfigPortAllHandler
	// GetConfigRouteAllHandler sets the operation handler for the get config route all operation
	GetConfigRouteAllHandler GetConfigRouteAllHandler
	// GetConfigSessionAllHandler sets the operation handler for the get config session all operation
	GetConfigSessionAllHandler GetConfigSessionAllHandler
	// GetConfigSessionulclAllHandler sets the operation handler for the get config sessionulcl all operation
	GetConfigSessionulclAllHandler GetConfigSessionulclAllHandler
	// GetConfigTunnelVxlanAllHandler sets the operation handler for the get config tunnel vxlan all operation
	GetConfigTunnelVxlanAllHandler GetConfigTunnelVxlanAllHandler
	// GetConfigVlanAllHandler sets the operation handler for the get config vlan all operation
	GetConfigVlanAllHandler GetConfigVlanAllHandler
	// GetMetricsHandler sets the operation handler for the get metrics operation
	GetMetricsHandler GetMetricsHandler
	// GetStatusDeviceHandler sets the operation handler for the get status device operation
	GetStatusDeviceHandler GetStatusDeviceHandler
	// GetStatusFilesystemHandler sets the operation handler for the get status filesystem operation
	GetStatusFilesystemHandler GetStatusFilesystemHandler
	// GetStatusProcessHandler sets the operation handler for the get status process operation
	GetStatusProcessHandler GetStatusProcessHandler
	// PostConfigBfdHandler sets the operation handler for the post config bfd operation
	PostConfigBfdHandler PostConfigBfdHandler
	// PostConfigBgpGlobalHandler sets the operation handler for the post config bgp global operation
	PostConfigBgpGlobalHandler PostConfigBgpGlobalHandler
	// PostConfigBgpNeighHandler sets the operation handler for the post config bgp neigh operation
	PostConfigBgpNeighHandler PostConfigBgpNeighHandler
	// PostConfigBgpPolicyApplyHandler sets the operation handler for the post config bgp policy apply operation
	PostConfigBgpPolicyApplyHandler PostConfigBgpPolicyApplyHandler
	// PostConfigBgpPolicyDefinedsetsDefinesetTypeHandler sets the operation handler for the post config bgp policy definedsets defineset type operation
	PostConfigBgpPolicyDefinedsetsDefinesetTypeHandler PostConfigBgpPolicyDefinedsetsDefinesetTypeHandler
	// PostConfigBgpPolicyDefinitionsHandler sets the operation handler for the post config bgp policy definitions operation
	PostConfigBgpPolicyDefinitionsHandler PostConfigBgpPolicyDefinitionsHandler
	// PostConfigCistateHandler sets the operation handler for the post config cistate operation
	PostConfigCistateHandler PostConfigCistateHandler
	// PostConfigEndpointHandler sets the operation handler for the post config endpoint operation
	PostConfigEndpointHandler PostConfigEndpointHandler
	// PostConfigFdbHandler sets the operation handler for the post config fdb operation
	PostConfigFdbHandler PostConfigFdbHandler
	// PostConfigFirewallHandler sets the operation handler for the post config firewall operation
	PostConfigFirewallHandler PostConfigFirewallHandler
	// PostConfigIpv4addressHandler sets the operation handler for the post config ipv4address operation
	PostConfigIpv4addressHandler PostConfigIpv4addressHandler
	// PostConfigLoadbalancerHandler sets the operation handler for the post config loadbalancer operation
	PostConfigLoadbalancerHandler PostConfigLoadbalancerHandler
	// PostConfigMirrorHandler sets the operation handler for the post config mirror operation
	PostConfigMirrorHandler PostConfigMirrorHandler
	// PostConfigNeighborHandler sets the operation handler for the post config neighbor operation
	PostConfigNeighborHandler PostConfigNeighborHandler
	// PostConfigParamsHandler sets the operation handler for the post config params operation
	PostConfigParamsHandler PostConfigParamsHandler
	// PostConfigPolicyHandler sets the operation handler for the post config policy operation
	PostConfigPolicyHandler PostConfigPolicyHandler
	// PostConfigRouteHandler sets the operation handler for the post config route operation
	PostConfigRouteHandler PostConfigRouteHandler
	// PostConfigSessionHandler sets the operation handler for the post config session operation
	PostConfigSessionHandler PostConfigSessionHandler
	// PostConfigSessionulclHandler sets the operation handler for the post config sessionulcl operation
	PostConfigSessionulclHandler PostConfigSessionulclHandler
	// PostConfigTunnelVxlanHandler sets the operation handler for the post config tunnel vxlan operation
	PostConfigTunnelVxlanHandler PostConfigTunnelVxlanHandler
	// PostConfigTunnelVxlanVxlanIDPeerHandler sets the operation handler for the post config tunnel vxlan vxlan ID peer operation
	PostConfigTunnelVxlanVxlanIDPeerHandler PostConfigTunnelVxlanVxlanIDPeerHandler
	// PostConfigVlanHandler sets the operation handler for the post config vlan operation
	PostConfigVlanHandler PostConfigVlanHandler
	// PostConfigVlanVlanIDMemberHandler sets the operation handler for the post config vlan vlan ID member operation
	PostConfigVlanVlanIDMemberHandler PostConfigVlanVlanIDMemberHandler

	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// PreServerShutdown is called before the HTTP(S) server is shutdown
	// This allows for custom functions to get executed before the HTTP(S) server stops accepting traffic
	PreServerShutdown func()

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// UseRedoc for documentation at /docs
func (o *LoxilbRestAPIAPI) UseRedoc() {
	o.useSwaggerUI = false
}

// UseSwaggerUI for documentation at /docs
func (o *LoxilbRestAPIAPI) UseSwaggerUI() {
	o.useSwaggerUI = true
}

// SetDefaultProduces sets the default produces media type
func (o *LoxilbRestAPIAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *LoxilbRestAPIAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *LoxilbRestAPIAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *LoxilbRestAPIAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *LoxilbRestAPIAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *LoxilbRestAPIAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *LoxilbRestAPIAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the LoxilbRestAPIAPI
func (o *LoxilbRestAPIAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.DeleteConfigBfdRemoteIPRemoteIPHandler == nil {
		unregistered = append(unregistered, "DeleteConfigBfdRemoteIPRemoteIPHandler")
	}
	if o.DeleteConfigBgpNeighIPAddressHandler == nil {
		unregistered = append(unregistered, "DeleteConfigBgpNeighIPAddressHandler")
	}
	if o.DeleteConfigBgpPolicyApplyHandler == nil {
		unregistered = append(unregistered, "DeleteConfigBgpPolicyApplyHandler")
	}
	if o.DeleteConfigBgpPolicyDefinedsetsDefinesetTypeTypeNameHandler == nil {
		unregistered = append(unregistered, "DeleteConfigBgpPolicyDefinedsetsDefinesetTypeTypeNameHandler")
	}
	if o.DeleteConfigBgpPolicyDefinitionsPolicyNameHandler == nil {
		unregistered = append(unregistered, "DeleteConfigBgpPolicyDefinitionsPolicyNameHandler")
	}
	if o.DeleteConfigEndpointEpipaddressIPAddressHandler == nil {
		unregistered = append(unregistered, "DeleteConfigEndpointEpipaddressIPAddressHandler")
	}
	if o.DeleteConfigFdbMacAddressDevIfNameHandler == nil {
		unregistered = append(unregistered, "DeleteConfigFdbMacAddressDevIfNameHandler")
	}
	if o.DeleteConfigFirewallHandler == nil {
		unregistered = append(unregistered, "DeleteConfigFirewallHandler")
	}
	if o.DeleteConfigIpv4addressIPAddressMaskDevIfNameHandler == nil {
		unregistered = append(unregistered, "DeleteConfigIpv4addressIPAddressMaskDevIfNameHandler")
	}
	if o.DeleteConfigLoadbalancerAllHandler == nil {
		unregistered = append(unregistered, "DeleteConfigLoadbalancerAllHandler")
	}
	if o.DeleteConfigLoadbalancerExternalipaddressIPAddressPortPortProtocolProtoHandler == nil {
		unregistered = append(unregistered, "DeleteConfigLoadbalancerExternalipaddressIPAddressPortPortProtocolProtoHandler")
	}
	if o.DeleteConfigLoadbalancerHosturlHosturlExternalipaddressIPAddressPortPortProtocolProtoHandler == nil {
		unregistered = append(unregistered, "DeleteConfigLoadbalancerHosturlHosturlExternalipaddressIPAddressPortPortProtocolProtoHandler")
	}
	if o.DeleteConfigLoadbalancerNameLbNameHandler == nil {
		unregistered = append(unregistered, "DeleteConfigLoadbalancerNameLbNameHandler")
	}
	if o.DeleteConfigMirrorIdentIdentHandler == nil {
		unregistered = append(unregistered, "DeleteConfigMirrorIdentIdentHandler")
	}
	if o.DeleteConfigNeighborIPAddressDevIfNameHandler == nil {
		unregistered = append(unregistered, "DeleteConfigNeighborIPAddressDevIfNameHandler")
	}
	if o.DeleteConfigPolicyIdentIdentHandler == nil {
		unregistered = append(unregistered, "DeleteConfigPolicyIdentIdentHandler")
	}
	if o.DeleteConfigRouteDestinationIPNetIPAddressMaskHandler == nil {
		unregistered = append(unregistered, "DeleteConfigRouteDestinationIPNetIPAddressMaskHandler")
	}
	if o.DeleteConfigSessionIdentIdentHandler == nil {
		unregistered = append(unregistered, "DeleteConfigSessionIdentIdentHandler")
	}
	if o.DeleteConfigSessionulclIdentIdentUlclAddressIPAddressHandler == nil {
		unregistered = append(unregistered, "DeleteConfigSessionulclIdentIdentUlclAddressIPAddressHandler")
	}
	if o.DeleteConfigTunnelVxlanVxlanIDHandler == nil {
		unregistered = append(unregistered, "DeleteConfigTunnelVxlanVxlanIDHandler")
	}
	if o.DeleteConfigTunnelVxlanVxlanIDPeerPeerIPHandler == nil {
		unregistered = append(unregistered, "DeleteConfigTunnelVxlanVxlanIDPeerPeerIPHandler")
	}
	if o.DeleteConfigVlanVlanIDHandler == nil {
		unregistered = append(unregistered, "DeleteConfigVlanVlanIDHandler")
	}
	if o.DeleteConfigVlanVlanIDMemberIfNameTaggedTaggedHandler == nil {
		unregistered = append(unregistered, "DeleteConfigVlanVlanIDMemberIfNameTaggedTaggedHandler")
	}
	if o.GetConfigBfdAllHandler == nil {
		unregistered = append(unregistered, "GetConfigBfdAllHandler")
	}
	if o.GetConfigBgpNeighAllHandler == nil {
		unregistered = append(unregistered, "GetConfigBgpNeighAllHandler")
	}
	if o.GetConfigBgpPolicyDefinedsetsDefinesetTypeTypeNameHandler == nil {
		unregistered = append(unregistered, "GetConfigBgpPolicyDefinedsetsDefinesetTypeTypeNameHandler")
	}
	if o.GetConfigBgpPolicyDefinitionsAllHandler == nil {
		unregistered = append(unregistered, "GetConfigBgpPolicyDefinitionsAllHandler")
	}
	if o.GetConfigCistateAllHandler == nil {
		unregistered = append(unregistered, "GetConfigCistateAllHandler")
	}
	if o.GetConfigConntrackAllHandler == nil {
		unregistered = append(unregistered, "GetConfigConntrackAllHandler")
	}
	if o.GetConfigEndpointAllHandler == nil {
		unregistered = append(unregistered, "GetConfigEndpointAllHandler")
	}
	if o.GetConfigFdbAllHandler == nil {
		unregistered = append(unregistered, "GetConfigFdbAllHandler")
	}
	if o.GetConfigFirewallAllHandler == nil {
		unregistered = append(unregistered, "GetConfigFirewallAllHandler")
	}
	if o.GetConfigIpv4addressAllHandler == nil {
		unregistered = append(unregistered, "GetConfigIpv4addressAllHandler")
	}
	if o.GetConfigLoadbalancerAllHandler == nil {
		unregistered = append(unregistered, "GetConfigLoadbalancerAllHandler")
	}
	if o.GetConfigMirrorAllHandler == nil {
		unregistered = append(unregistered, "GetConfigMirrorAllHandler")
	}
	if o.GetConfigNeighborAllHandler == nil {
		unregistered = append(unregistered, "GetConfigNeighborAllHandler")
	}
	if o.GetConfigParamsHandler == nil {
		unregistered = append(unregistered, "GetConfigParamsHandler")
	}
	if o.GetConfigPolicyAllHandler == nil {
		unregistered = append(unregistered, "GetConfigPolicyAllHandler")
	}
	if o.GetConfigPortAllHandler == nil {
		unregistered = append(unregistered, "GetConfigPortAllHandler")
	}
	if o.GetConfigRouteAllHandler == nil {
		unregistered = append(unregistered, "GetConfigRouteAllHandler")
	}
	if o.GetConfigSessionAllHandler == nil {
		unregistered = append(unregistered, "GetConfigSessionAllHandler")
	}
	if o.GetConfigSessionulclAllHandler == nil {
		unregistered = append(unregistered, "GetConfigSessionulclAllHandler")
	}
	if o.GetConfigTunnelVxlanAllHandler == nil {
		unregistered = append(unregistered, "GetConfigTunnelVxlanAllHandler")
	}
	if o.GetConfigVlanAllHandler == nil {
		unregistered = append(unregistered, "GetConfigVlanAllHandler")
	}
	if o.GetMetricsHandler == nil {
		unregistered = append(unregistered, "GetMetricsHandler")
	}
	if o.GetStatusDeviceHandler == nil {
		unregistered = append(unregistered, "GetStatusDeviceHandler")
	}
	if o.GetStatusFilesystemHandler == nil {
		unregistered = append(unregistered, "GetStatusFilesystemHandler")
	}
	if o.GetStatusProcessHandler == nil {
		unregistered = append(unregistered, "GetStatusProcessHandler")
	}
	if o.PostConfigBfdHandler == nil {
		unregistered = append(unregistered, "PostConfigBfdHandler")
	}
	if o.PostConfigBgpGlobalHandler == nil {
		unregistered = append(unregistered, "PostConfigBgpGlobalHandler")
	}
	if o.PostConfigBgpNeighHandler == nil {
		unregistered = append(unregistered, "PostConfigBgpNeighHandler")
	}
	if o.PostConfigBgpPolicyApplyHandler == nil {
		unregistered = append(unregistered, "PostConfigBgpPolicyApplyHandler")
	}
	if o.PostConfigBgpPolicyDefinedsetsDefinesetTypeHandler == nil {
		unregistered = append(unregistered, "PostConfigBgpPolicyDefinedsetsDefinesetTypeHandler")
	}
	if o.PostConfigBgpPolicyDefinitionsHandler == nil {
		unregistered = append(unregistered, "PostConfigBgpPolicyDefinitionsHandler")
	}
	if o.PostConfigCistateHandler == nil {
		unregistered = append(unregistered, "PostConfigCistateHandler")
	}
	if o.PostConfigEndpointHandler == nil {
		unregistered = append(unregistered, "PostConfigEndpointHandler")
	}
	if o.PostConfigFdbHandler == nil {
		unregistered = append(unregistered, "PostConfigFdbHandler")
	}
	if o.PostConfigFirewallHandler == nil {
		unregistered = append(unregistered, "PostConfigFirewallHandler")
	}
	if o.PostConfigIpv4addressHandler == nil {
		unregistered = append(unregistered, "PostConfigIpv4addressHandler")
	}
	if o.PostConfigLoadbalancerHandler == nil {
		unregistered = append(unregistered, "PostConfigLoadbalancerHandler")
	}
	if o.PostConfigMirrorHandler == nil {
		unregistered = append(unregistered, "PostConfigMirrorHandler")
	}
	if o.PostConfigNeighborHandler == nil {
		unregistered = append(unregistered, "PostConfigNeighborHandler")
	}
	if o.PostConfigParamsHandler == nil {
		unregistered = append(unregistered, "PostConfigParamsHandler")
	}
	if o.PostConfigPolicyHandler == nil {
		unregistered = append(unregistered, "PostConfigPolicyHandler")
	}
	if o.PostConfigRouteHandler == nil {
		unregistered = append(unregistered, "PostConfigRouteHandler")
	}
	if o.PostConfigSessionHandler == nil {
		unregistered = append(unregistered, "PostConfigSessionHandler")
	}
	if o.PostConfigSessionulclHandler == nil {
		unregistered = append(unregistered, "PostConfigSessionulclHandler")
	}
	if o.PostConfigTunnelVxlanHandler == nil {
		unregistered = append(unregistered, "PostConfigTunnelVxlanHandler")
	}
	if o.PostConfigTunnelVxlanVxlanIDPeerHandler == nil {
		unregistered = append(unregistered, "PostConfigTunnelVxlanVxlanIDPeerHandler")
	}
	if o.PostConfigVlanHandler == nil {
		unregistered = append(unregistered, "PostConfigVlanHandler")
	}
	if o.PostConfigVlanVlanIDMemberHandler == nil {
		unregistered = append(unregistered, "PostConfigVlanVlanIDMemberHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *LoxilbRestAPIAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *LoxilbRestAPIAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {
	return nil
}

// Authorizer returns the registered authorizer
func (o *LoxilbRestAPIAPI) Authorizer() runtime.Authorizer {
	return nil
}

// ConsumersFor gets the consumers for the specified media types.
// MIME type parameters are ignored here.
func (o *LoxilbRestAPIAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {
	result := make(map[string]runtime.Consumer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/json":
			result["application/json"] = o.JSONConsumer
		}

		if c, ok := o.customConsumers[mt]; ok {
			result[mt] = c
		}
	}
	return result
}

// ProducersFor gets the producers for the specified media types.
// MIME type parameters are ignored here.
func (o *LoxilbRestAPIAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {
	result := make(map[string]runtime.Producer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/json":
			result["application/json"] = o.JSONProducer
		}

		if p, ok := o.customProducers[mt]; ok {
			result[mt] = p
		}
	}
	return result
}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *LoxilbRestAPIAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the loxilb rest API API
func (o *LoxilbRestAPIAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *LoxilbRestAPIAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened
	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/config/bfd/remoteIP/{remote_ip}"] = NewDeleteConfigBfdRemoteIPRemoteIP(o.context, o.DeleteConfigBfdRemoteIPRemoteIPHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/config/bgp/neigh/{ip_address}"] = NewDeleteConfigBgpNeighIPAddress(o.context, o.DeleteConfigBgpNeighIPAddressHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/config/bgp/policy/apply"] = NewDeleteConfigBgpPolicyApply(o.context, o.DeleteConfigBgpPolicyApplyHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/config/bgp/policy/definedsets/{defineset_type}/{type_name}"] = NewDeleteConfigBgpPolicyDefinedsetsDefinesetTypeTypeName(o.context, o.DeleteConfigBgpPolicyDefinedsetsDefinesetTypeTypeNameHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/config/bgp/policy/definitions/{policy_name}"] = NewDeleteConfigBgpPolicyDefinitionsPolicyName(o.context, o.DeleteConfigBgpPolicyDefinitionsPolicyNameHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/config/endpoint/epipaddress/{ip_address}"] = NewDeleteConfigEndpointEpipaddressIPAddress(o.context, o.DeleteConfigEndpointEpipaddressIPAddressHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/config/fdb/{mac_address}/dev/{if_name}"] = NewDeleteConfigFdbMacAddressDevIfName(o.context, o.DeleteConfigFdbMacAddressDevIfNameHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/config/firewall"] = NewDeleteConfigFirewall(o.context, o.DeleteConfigFirewallHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/config/ipv4address/{ip_address}/{mask}/dev/{if_name}"] = NewDeleteConfigIpv4addressIPAddressMaskDevIfName(o.context, o.DeleteConfigIpv4addressIPAddressMaskDevIfNameHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/config/loadbalancer/all"] = NewDeleteConfigLoadbalancerAll(o.context, o.DeleteConfigLoadbalancerAllHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/config/loadbalancer/externalipaddress/{ip_address}/port/{port}/protocol/{proto}"] = NewDeleteConfigLoadbalancerExternalipaddressIPAddressPortPortProtocolProto(o.context, o.DeleteConfigLoadbalancerExternalipaddressIPAddressPortPortProtocolProtoHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/config/loadbalancer/hosturl/{hosturl}/externalipaddress/{ip_address}/port/{port}/protocol/{proto}"] = NewDeleteConfigLoadbalancerHosturlHosturlExternalipaddressIPAddressPortPortProtocolProto(o.context, o.DeleteConfigLoadbalancerHosturlHosturlExternalipaddressIPAddressPortPortProtocolProtoHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/config/loadbalancer/name/{lb_name}"] = NewDeleteConfigLoadbalancerNameLbName(o.context, o.DeleteConfigLoadbalancerNameLbNameHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/config/mirror/ident/{ident}"] = NewDeleteConfigMirrorIdentIdent(o.context, o.DeleteConfigMirrorIdentIdentHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/config/neighbor/{ip_address}/dev/{if_name}"] = NewDeleteConfigNeighborIPAddressDevIfName(o.context, o.DeleteConfigNeighborIPAddressDevIfNameHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/config/policy/ident/{ident}"] = NewDeleteConfigPolicyIdentIdent(o.context, o.DeleteConfigPolicyIdentIdentHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/config/route/destinationIPNet/{ip_address}/{mask}"] = NewDeleteConfigRouteDestinationIPNetIPAddressMask(o.context, o.DeleteConfigRouteDestinationIPNetIPAddressMaskHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/config/session/ident/{ident}"] = NewDeleteConfigSessionIdentIdent(o.context, o.DeleteConfigSessionIdentIdentHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/config/sessionulcl/ident/{ident}/ulclAddress/{ip_address}"] = NewDeleteConfigSessionulclIdentIdentUlclAddressIPAddress(o.context, o.DeleteConfigSessionulclIdentIdentUlclAddressIPAddressHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/config/tunnel/vxlan/{vxlanID}"] = NewDeleteConfigTunnelVxlanVxlanID(o.context, o.DeleteConfigTunnelVxlanVxlanIDHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/config/tunnel/vxlan/{vxlanID}/peer/{PeerIP}"] = NewDeleteConfigTunnelVxlanVxlanIDPeerPeerIP(o.context, o.DeleteConfigTunnelVxlanVxlanIDPeerPeerIPHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/config/vlan/{vlan_id}"] = NewDeleteConfigVlanVlanID(o.context, o.DeleteConfigVlanVlanIDHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/config/vlan/{vlan_id}/member/{if_name}/tagged/{tagged}"] = NewDeleteConfigVlanVlanIDMemberIfNameTaggedTagged(o.context, o.DeleteConfigVlanVlanIDMemberIfNameTaggedTaggedHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/config/bfd/all"] = NewGetConfigBfdAll(o.context, o.GetConfigBfdAllHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/config/bgp/neigh/all"] = NewGetConfigBgpNeighAll(o.context, o.GetConfigBgpNeighAllHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/config/bgp/policy/definedsets/{defineset_type}/{type_name}"] = NewGetConfigBgpPolicyDefinedsetsDefinesetTypeTypeName(o.context, o.GetConfigBgpPolicyDefinedsetsDefinesetTypeTypeNameHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/config/bgp/policy/definitions/all"] = NewGetConfigBgpPolicyDefinitionsAll(o.context, o.GetConfigBgpPolicyDefinitionsAllHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/config/cistate/all"] = NewGetConfigCistateAll(o.context, o.GetConfigCistateAllHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/config/conntrack/all"] = NewGetConfigConntrackAll(o.context, o.GetConfigConntrackAllHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/config/endpoint/all"] = NewGetConfigEndpointAll(o.context, o.GetConfigEndpointAllHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/config/fdb/all"] = NewGetConfigFdbAll(o.context, o.GetConfigFdbAllHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/config/firewall/all"] = NewGetConfigFirewallAll(o.context, o.GetConfigFirewallAllHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/config/ipv4address/all"] = NewGetConfigIpv4addressAll(o.context, o.GetConfigIpv4addressAllHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/config/loadbalancer/all"] = NewGetConfigLoadbalancerAll(o.context, o.GetConfigLoadbalancerAllHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/config/mirror/all"] = NewGetConfigMirrorAll(o.context, o.GetConfigMirrorAllHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/config/neighbor/all"] = NewGetConfigNeighborAll(o.context, o.GetConfigNeighborAllHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/config/params"] = NewGetConfigParams(o.context, o.GetConfigParamsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/config/policy/all"] = NewGetConfigPolicyAll(o.context, o.GetConfigPolicyAllHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/config/port/all"] = NewGetConfigPortAll(o.context, o.GetConfigPortAllHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/config/route/all"] = NewGetConfigRouteAll(o.context, o.GetConfigRouteAllHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/config/session/all"] = NewGetConfigSessionAll(o.context, o.GetConfigSessionAllHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/config/sessionulcl/all"] = NewGetConfigSessionulclAll(o.context, o.GetConfigSessionulclAllHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/config/tunnel/vxlan/all"] = NewGetConfigTunnelVxlanAll(o.context, o.GetConfigTunnelVxlanAllHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/config/vlan/all"] = NewGetConfigVlanAll(o.context, o.GetConfigVlanAllHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/metrics"] = NewGetMetrics(o.context, o.GetMetricsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/status/device"] = NewGetStatusDevice(o.context, o.GetStatusDeviceHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/status/filesystem"] = NewGetStatusFilesystem(o.context, o.GetStatusFilesystemHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/status/process"] = NewGetStatusProcess(o.context, o.GetStatusProcessHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/config/bfd"] = NewPostConfigBfd(o.context, o.PostConfigBfdHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/config/bgp/global"] = NewPostConfigBgpGlobal(o.context, o.PostConfigBgpGlobalHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/config/bgp/neigh"] = NewPostConfigBgpNeigh(o.context, o.PostConfigBgpNeighHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/config/bgp/policy/apply"] = NewPostConfigBgpPolicyApply(o.context, o.PostConfigBgpPolicyApplyHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/config/bgp/policy/definedsets/{defineset_type}"] = NewPostConfigBgpPolicyDefinedsetsDefinesetType(o.context, o.PostConfigBgpPolicyDefinedsetsDefinesetTypeHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/config/bgp/policy/definitions"] = NewPostConfigBgpPolicyDefinitions(o.context, o.PostConfigBgpPolicyDefinitionsHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/config/cistate"] = NewPostConfigCistate(o.context, o.PostConfigCistateHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/config/endpoint"] = NewPostConfigEndpoint(o.context, o.PostConfigEndpointHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/config/fdb"] = NewPostConfigFdb(o.context, o.PostConfigFdbHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/config/firewall"] = NewPostConfigFirewall(o.context, o.PostConfigFirewallHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/config/ipv4address"] = NewPostConfigIpv4address(o.context, o.PostConfigIpv4addressHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/config/loadbalancer"] = NewPostConfigLoadbalancer(o.context, o.PostConfigLoadbalancerHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/config/mirror"] = NewPostConfigMirror(o.context, o.PostConfigMirrorHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/config/neighbor"] = NewPostConfigNeighbor(o.context, o.PostConfigNeighborHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/config/params"] = NewPostConfigParams(o.context, o.PostConfigParamsHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/config/policy"] = NewPostConfigPolicy(o.context, o.PostConfigPolicyHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/config/route"] = NewPostConfigRoute(o.context, o.PostConfigRouteHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/config/session"] = NewPostConfigSession(o.context, o.PostConfigSessionHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/config/sessionulcl"] = NewPostConfigSessionulcl(o.context, o.PostConfigSessionulclHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/config/tunnel/vxlan"] = NewPostConfigTunnelVxlan(o.context, o.PostConfigTunnelVxlanHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/config/tunnel/vxlan/{vxlanID}/peer"] = NewPostConfigTunnelVxlanVxlanIDPeer(o.context, o.PostConfigTunnelVxlanVxlanIDPeerHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/config/vlan"] = NewPostConfigVlan(o.context, o.PostConfigVlanHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/config/vlan/{vlan_id}/member"] = NewPostConfigVlanVlanIDMember(o.context, o.PostConfigVlanVlanIDMemberHandler)
}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *LoxilbRestAPIAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	if o.useSwaggerUI {
		return o.context.APIHandlerSwaggerUI(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middleware as you see fit
func (o *LoxilbRestAPIAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}

// RegisterConsumer allows you to add (or override) a consumer for a media type.
func (o *LoxilbRestAPIAPI) RegisterConsumer(mediaType string, consumer runtime.Consumer) {
	o.customConsumers[mediaType] = consumer
}

// RegisterProducer allows you to add (or override) a producer for a media type.
func (o *LoxilbRestAPIAPI) RegisterProducer(mediaType string, producer runtime.Producer) {
	o.customProducers[mediaType] = producer
}

// AddMiddlewareFor adds a http middleware to existing handler
func (o *LoxilbRestAPIAPI) AddMiddlewareFor(method, path string, builder middleware.Builder) {
	um := strings.ToUpper(method)
	if path == "/" {
		path = ""
	}
	o.Init()
	if h, ok := o.handlers[um][path]; ok {
		o.handlers[method][path] = builder(h)
	}
}
