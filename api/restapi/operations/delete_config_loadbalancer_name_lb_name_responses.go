// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/loxilb-io/loxilb/api/models"
)

// DeleteConfigLoadbalancerNameLbNameNoContentCode is the HTTP code returned for type DeleteConfigLoadbalancerNameLbNameNoContent
const DeleteConfigLoadbalancerNameLbNameNoContentCode int = 204

/*
DeleteConfigLoadbalancerNameLbNameNoContent OK

swagger:response deleteConfigLoadbalancerNameLbNameNoContent
*/
type DeleteConfigLoadbalancerNameLbNameNoContent struct {
}

// NewDeleteConfigLoadbalancerNameLbNameNoContent creates DeleteConfigLoadbalancerNameLbNameNoContent with default headers values
func NewDeleteConfigLoadbalancerNameLbNameNoContent() *DeleteConfigLoadbalancerNameLbNameNoContent {

	return &DeleteConfigLoadbalancerNameLbNameNoContent{}
}

// WriteResponse to the client
func (o *DeleteConfigLoadbalancerNameLbNameNoContent) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(204)
}

// DeleteConfigLoadbalancerNameLbNameBadRequestCode is the HTTP code returned for type DeleteConfigLoadbalancerNameLbNameBadRequest
const DeleteConfigLoadbalancerNameLbNameBadRequestCode int = 400

/*
DeleteConfigLoadbalancerNameLbNameBadRequest Malformed arguments for API call

swagger:response deleteConfigLoadbalancerNameLbNameBadRequest
*/
type DeleteConfigLoadbalancerNameLbNameBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewDeleteConfigLoadbalancerNameLbNameBadRequest creates DeleteConfigLoadbalancerNameLbNameBadRequest with default headers values
func NewDeleteConfigLoadbalancerNameLbNameBadRequest() *DeleteConfigLoadbalancerNameLbNameBadRequest {

	return &DeleteConfigLoadbalancerNameLbNameBadRequest{}
}

// WithPayload adds the payload to the delete config loadbalancer name lb name bad request response
func (o *DeleteConfigLoadbalancerNameLbNameBadRequest) WithPayload(payload *models.Error) *DeleteConfigLoadbalancerNameLbNameBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete config loadbalancer name lb name bad request response
func (o *DeleteConfigLoadbalancerNameLbNameBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteConfigLoadbalancerNameLbNameBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteConfigLoadbalancerNameLbNameUnauthorizedCode is the HTTP code returned for type DeleteConfigLoadbalancerNameLbNameUnauthorized
const DeleteConfigLoadbalancerNameLbNameUnauthorizedCode int = 401

/*
DeleteConfigLoadbalancerNameLbNameUnauthorized Invalid authentication credentials

swagger:response deleteConfigLoadbalancerNameLbNameUnauthorized
*/
type DeleteConfigLoadbalancerNameLbNameUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewDeleteConfigLoadbalancerNameLbNameUnauthorized creates DeleteConfigLoadbalancerNameLbNameUnauthorized with default headers values
func NewDeleteConfigLoadbalancerNameLbNameUnauthorized() *DeleteConfigLoadbalancerNameLbNameUnauthorized {

	return &DeleteConfigLoadbalancerNameLbNameUnauthorized{}
}

// WithPayload adds the payload to the delete config loadbalancer name lb name unauthorized response
func (o *DeleteConfigLoadbalancerNameLbNameUnauthorized) WithPayload(payload *models.Error) *DeleteConfigLoadbalancerNameLbNameUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete config loadbalancer name lb name unauthorized response
func (o *DeleteConfigLoadbalancerNameLbNameUnauthorized) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteConfigLoadbalancerNameLbNameUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteConfigLoadbalancerNameLbNameForbiddenCode is the HTTP code returned for type DeleteConfigLoadbalancerNameLbNameForbidden
const DeleteConfigLoadbalancerNameLbNameForbiddenCode int = 403

/*
DeleteConfigLoadbalancerNameLbNameForbidden Capacity insufficient

swagger:response deleteConfigLoadbalancerNameLbNameForbidden
*/
type DeleteConfigLoadbalancerNameLbNameForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewDeleteConfigLoadbalancerNameLbNameForbidden creates DeleteConfigLoadbalancerNameLbNameForbidden with default headers values
func NewDeleteConfigLoadbalancerNameLbNameForbidden() *DeleteConfigLoadbalancerNameLbNameForbidden {

	return &DeleteConfigLoadbalancerNameLbNameForbidden{}
}

// WithPayload adds the payload to the delete config loadbalancer name lb name forbidden response
func (o *DeleteConfigLoadbalancerNameLbNameForbidden) WithPayload(payload *models.Error) *DeleteConfigLoadbalancerNameLbNameForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete config loadbalancer name lb name forbidden response
func (o *DeleteConfigLoadbalancerNameLbNameForbidden) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteConfigLoadbalancerNameLbNameForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteConfigLoadbalancerNameLbNameNotFoundCode is the HTTP code returned for type DeleteConfigLoadbalancerNameLbNameNotFound
const DeleteConfigLoadbalancerNameLbNameNotFoundCode int = 404

/*
DeleteConfigLoadbalancerNameLbNameNotFound Resource not found

swagger:response deleteConfigLoadbalancerNameLbNameNotFound
*/
type DeleteConfigLoadbalancerNameLbNameNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewDeleteConfigLoadbalancerNameLbNameNotFound creates DeleteConfigLoadbalancerNameLbNameNotFound with default headers values
func NewDeleteConfigLoadbalancerNameLbNameNotFound() *DeleteConfigLoadbalancerNameLbNameNotFound {

	return &DeleteConfigLoadbalancerNameLbNameNotFound{}
}

// WithPayload adds the payload to the delete config loadbalancer name lb name not found response
func (o *DeleteConfigLoadbalancerNameLbNameNotFound) WithPayload(payload *models.Error) *DeleteConfigLoadbalancerNameLbNameNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete config loadbalancer name lb name not found response
func (o *DeleteConfigLoadbalancerNameLbNameNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteConfigLoadbalancerNameLbNameNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteConfigLoadbalancerNameLbNameConflictCode is the HTTP code returned for type DeleteConfigLoadbalancerNameLbNameConflict
const DeleteConfigLoadbalancerNameLbNameConflictCode int = 409

/*
DeleteConfigLoadbalancerNameLbNameConflict Resource Conflict. VLAN already exists OR dependency VRF/VNET not found

swagger:response deleteConfigLoadbalancerNameLbNameConflict
*/
type DeleteConfigLoadbalancerNameLbNameConflict struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewDeleteConfigLoadbalancerNameLbNameConflict creates DeleteConfigLoadbalancerNameLbNameConflict with default headers values
func NewDeleteConfigLoadbalancerNameLbNameConflict() *DeleteConfigLoadbalancerNameLbNameConflict {

	return &DeleteConfigLoadbalancerNameLbNameConflict{}
}

// WithPayload adds the payload to the delete config loadbalancer name lb name conflict response
func (o *DeleteConfigLoadbalancerNameLbNameConflict) WithPayload(payload *models.Error) *DeleteConfigLoadbalancerNameLbNameConflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete config loadbalancer name lb name conflict response
func (o *DeleteConfigLoadbalancerNameLbNameConflict) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteConfigLoadbalancerNameLbNameConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteConfigLoadbalancerNameLbNameInternalServerErrorCode is the HTTP code returned for type DeleteConfigLoadbalancerNameLbNameInternalServerError
const DeleteConfigLoadbalancerNameLbNameInternalServerErrorCode int = 500

/*
DeleteConfigLoadbalancerNameLbNameInternalServerError Internal service error

swagger:response deleteConfigLoadbalancerNameLbNameInternalServerError
*/
type DeleteConfigLoadbalancerNameLbNameInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewDeleteConfigLoadbalancerNameLbNameInternalServerError creates DeleteConfigLoadbalancerNameLbNameInternalServerError with default headers values
func NewDeleteConfigLoadbalancerNameLbNameInternalServerError() *DeleteConfigLoadbalancerNameLbNameInternalServerError {

	return &DeleteConfigLoadbalancerNameLbNameInternalServerError{}
}

// WithPayload adds the payload to the delete config loadbalancer name lb name internal server error response
func (o *DeleteConfigLoadbalancerNameLbNameInternalServerError) WithPayload(payload *models.Error) *DeleteConfigLoadbalancerNameLbNameInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete config loadbalancer name lb name internal server error response
func (o *DeleteConfigLoadbalancerNameLbNameInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteConfigLoadbalancerNameLbNameInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteConfigLoadbalancerNameLbNameServiceUnavailableCode is the HTTP code returned for type DeleteConfigLoadbalancerNameLbNameServiceUnavailable
const DeleteConfigLoadbalancerNameLbNameServiceUnavailableCode int = 503

/*
DeleteConfigLoadbalancerNameLbNameServiceUnavailable Maintenance mode

swagger:response deleteConfigLoadbalancerNameLbNameServiceUnavailable
*/
type DeleteConfigLoadbalancerNameLbNameServiceUnavailable struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewDeleteConfigLoadbalancerNameLbNameServiceUnavailable creates DeleteConfigLoadbalancerNameLbNameServiceUnavailable with default headers values
func NewDeleteConfigLoadbalancerNameLbNameServiceUnavailable() *DeleteConfigLoadbalancerNameLbNameServiceUnavailable {

	return &DeleteConfigLoadbalancerNameLbNameServiceUnavailable{}
}

// WithPayload adds the payload to the delete config loadbalancer name lb name service unavailable response
func (o *DeleteConfigLoadbalancerNameLbNameServiceUnavailable) WithPayload(payload *models.Error) *DeleteConfigLoadbalancerNameLbNameServiceUnavailable {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete config loadbalancer name lb name service unavailable response
func (o *DeleteConfigLoadbalancerNameLbNameServiceUnavailable) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteConfigLoadbalancerNameLbNameServiceUnavailable) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(503)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
